// Generated from PlSqlParser.g4 by ANTLR 4.7
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PlSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ACCESS=1, ACCOUNT=2, ADD=3, ADMIN=4, ADMINISTER=5, ADVISOR=6, AFTER=7, 
		AGENT=8, AGGREGATE=9, A_LETTER=10, ALL=11, ALTER=12, ANALYZE=13, AND=14, 
		ANY=15, ARCHIVE=16, ARRAY=17, AS=18, ASC=19, ASSOCIATE=20, ASYNCHRONOUS=21, 
		AT=22, ATTRIBUTE=23, AUDIT=24, AUTHENTICATED=25, AUTHENTICATION=26, AUTHID=27, 
		AUTOALLOCATE=28, AUTO=29, AUTOEXTEND=30, AUTOMATIC=31, AUTONOMOUS_TRANSACTION=32, 
		BACKUP=33, BASIC=34, BATCH=35, BECOME=36, BEFORE=37, BEGIN=38, BETWEEN=39, 
		BFILE=40, BIGFILE=41, BINARY_DOUBLE=42, BINARY_FLOAT=43, BINARY_INTEGER=44, 
		BLOB=45, BLOCK=46, BLOCKSIZE=47, BODY=48, BOOLEAN=49, BOTH=50, BREADTH=51, 
		BUFFER_POOL=52, BUILD=53, BULK=54, BY=55, BYTE=56, CACHE=57, CALL=58, 
		CANONICAL=59, CASCADE=60, CASE=61, CAST=62, CERTIFICATE=63, CHANGE=64, 
		CHARACTER=65, CHAR=66, CHAR_CS=67, CHECK=68, CHR=69, CLASS=70, C_LETTER=71, 
		CLOB=72, CLOSE=73, CLUSTER=74, COALESCE=75, COLLECT=76, COLUMN=77, COLUMNS=78, 
		COMMENT=79, COMMIT=80, COMMITTED=81, COMPATIBILITY=82, COMPILE=83, COMPLETE=84, 
		COMPOUND=85, COMPRESS=86, COMPUTE=87, CONNECT_BY_ROOT=88, CONNECT=89, 
		CONSTANT=90, CONSTRAINT=91, CONSTRAINTS=92, CONSTRUCTOR=93, CONTAINER=94, 
		CONTAINER_DATA=95, CONTENT=96, CONTEXT=97, CONTINUE=98, CONVERT=99, CORRUPT_XID_ALL=100, 
		CORRUPT_XID=101, COST=102, COUNT=103, CREATE=104, CREATION=105, CROSS=106, 
		CUBE=107, CURRENT=108, CURRENT_USER=109, CURSOR=110, CUSTOMDATUM=111, 
		CYCLE=112, DATABASE=113, DATA=114, DATAFILE=115, DATE=116, DAY=117, DBA_RECYCLEBIN=118, 
		DB_ROLE_CHANGE=119, DBTIMEZONE=120, DDL=121, DEBUG=122, DEC=123, DECIMAL=124, 
		DECLARE=125, DECOMPOSE=126, DECREMENT=127, DEFAULT=128, DEFAULTS=129, 
		DEFERRABLE=130, DEFERRED=131, DEFINE=132, DEFINER=133, DELEGATE=134, DELETE=135, 
		DEMAND=136, DEPTH=137, DESC=138, DETERMINISTIC=139, DICTIONARY=140, DIMENSION=141, 
		DIRECTORY=142, DISABLE=143, DISASSOCIATE=144, DISTINCT=145, DISTINGUISHED=146, 
		DOCUMENT=147, DOUBLE=148, DROP=149, DSINTERVAL_UNCONSTRAINED=150, EACH=151, 
		EDITION=152, EDITIONING=153, EDITIONS=154, ELEMENT=155, ELSE=156, ELSIF=157, 
		EMPTY=158, ENABLE=159, ENCODING=160, ENCRYPT=161, ENCRYPTION=162, END=163, 
		ENFORCED=164, ENTERPRISE=165, ENTITYESCAPING=166, ERR=167, ERRORS=168, 
		ESCAPE=169, EVALNAME=170, EXCEPT=171, EXCEPTION=172, EXCEPTION_INIT=173, 
		EXCEPTIONS=174, EXCLUDE=175, EXCLUDING=176, EXCLUSIVE=177, EXECUTE=178, 
		EXEMPT=179, EXISTS=180, EXIT=181, EXPIRE=182, EXPLAIN=183, EXTENT=184, 
		EXTERNAL=185, EXTERNALLY=186, EXTRACT=187, FAILURE=188, FALSE=189, FAST=190, 
		FETCH=191, FILESYSTEM_LIKE_LOGGING=192, FINAL=193, FIRST=194, FIRST_VALUE=195, 
		FLASHBACK=196, FLASH_CACHE=197, FLOAT=198, FOLDER=199, FOLLOWING=200, 
		FOLLOWS=201, FORALL=202, FORCE=203, FOREIGN=204, FOR=205, FREELIST=206, 
		FREELISTS=207, FROM=208, FULL=209, FUNCTION=210, GLOBAL=211, GLOBALLY=212, 
		GOTO=213, GRANT=214, GROUP=215, GROUPING=216, GROUPS=217, GUARANTEE=218, 
		HASH=219, HAVING=220, HIDE=221, HIERARCHY=222, HIGH=223, HOUR=224, IDENTIFIED=225, 
		IDENTIFIER=226, ID=227, IF=228, IGNORE=229, IMMEDIATE=230, INCLUDE=231, 
		INCLUDING=232, INCREMENT=233, INDENT=234, INDEXED=235, INDEX=236, INDEXTYPE=237, 
		INDICATOR=238, INDICES=239, INFINITE=240, INHERIT=241, IN=242, INITIAL=243, 
		INITIALLY=244, INITRANS=245, INLINE=246, INNER=247, INOUT=248, INSERT=249, 
		INSTANTIABLE=250, INSTEAD=251, INTEGER=252, INTERSECT=253, INTERVAL=254, 
		INT=255, INTO=256, INVALIDATE=257, IS=258, ISOLATION=259, ITERATE=260, 
		JAVA=261, JOB=262, JOIN=263, KEEP=264, KEY=265, LANGUAGE=266, LAST=267, 
		LAST_VALUE=268, LEADING=269, LEFT=270, LESS=271, LEVEL=272, LIBRARY=273, 
		LIKE2=274, LIKE4=275, LIKEC=276, LIKE=277, LIMIT=278, LINK=279, LIST=280, 
		LOCAL=281, LOCKED=282, LOCK=283, LOGGING=284, LOG=285, LOGMINING=286, 
		LOGOFF=287, LOGON=288, LONG=289, LOOP=290, LOW=291, MAIN=292, MANAGE=293, 
		MANAGEMENT=294, MANUAL=295, MAP=296, MASTER=297, MATCHED=298, MATERIALIZED=299, 
		MAXSIZE=300, MAXVALUE=301, MEASURE=302, MEASURES=303, MEMBER=304, MERGE=305, 
		MINEXTENTS=306, MINIMUM=307, MINING=308, MINUS=309, MINUTE=310, MINVALUE=311, 
		MLSLABEL=312, MODEL=313, MODE=314, MODIFY=315, MONTH=316, MOVEMENT=317, 
		MULTISET=318, NAME=319, NAN=320, NATURAL=321, NATURALN=322, NAV=323, NCHAR_CS=324, 
		NCHAR=325, NCLOB=326, NESTED=327, NEVER=328, NEW=329, NEXT=330, NOAUDIT=331, 
		NOCACHE=332, NOCOMPRESS=333, NOCOPY=334, NOCYCLE=335, NOENTITYESCAPING=336, 
		NOGUARANTEE=337, NOLOGGING=338, NOMAXVALUE=339, NOMINVALUE=340, NONE=341, 
		NO=342, NOORDER=343, NOPARALLEL=344, NORELY=345, NOSCHEMACHECK=346, NOTIFICATION=347, 
		NOT=348, NOVALIDATE=349, NOWAIT=350, NULL=351, NULLS=352, NUMBER=353, 
		NUMERIC=354, NVARCHAR2=355, OBJECT=356, OFFLINE=357, OFF=358, OF=359, 
		OID=360, OLD=361, OLTP=362, ONLINE=363, ONLY=364, ON=365, OPEN=366, OPERATOR=367, 
		OPTIMAL=368, OPTION=369, ORADATA=370, ORDER=371, ORDINALITY=372, OR=373, 
		OSERROR=374, OUTER=375, OUTLINE=376, OUT=377, OVER=378, OVERRIDING=379, 
		PACKAGE=380, PARALLEL_ENABLE=381, PARALLEL=382, PARAMETERS=383, PARENT=384, 
		PARTITION=385, PASSING=386, PASSWORD=387, PATH=388, PCTFREE=389, PCTINCREASE=390, 
		PCTUSED=391, PERCENT_FOUND=392, PERCENT_ISOPEN=393, PERCENT_NOTFOUND=394, 
		PERCENT_ROWCOUNT=395, PERCENT_ROWTYPE=396, PERCENT_TYPE=397, PIPELINED=398, 
		PIPE=399, PIVOT=400, PLAN=401, PLS_INTEGER=402, PLUGGABLE=403, POLICY=404, 
		POSITIVEN=405, POSITIVE=406, PRAGMA=407, PREBUILT=408, PRECEDING=409, 
		PRECISION=410, PRESENT=411, PRESERVE=412, PRIMARY=413, PRIOR=414, PRIVILEGE=415, 
		PRIVILEGES=416, PROCEDURE=417, PROCESS=418, PROFILE=419, PROGRAM=420, 
		PUBLIC=421, PURGE=422, QUERY=423, QUOTA=424, RAISE=425, RANGE=426, RAW=427, 
		READ=428, REAL=429, RECORD=430, RECYCLE=431, REDACTION=432, REDUCED=433, 
		REFERENCE=434, REFERENCES=435, REFERENCING=436, REF=437, REFRESH=438, 
		REJECT=439, RELIES_ON=440, RELY=441, REMOVE=442, RENAME=443, REPLACE=444, 
		REQUIRED=445, RESOURCE=446, RESPECT=447, RESTRICTED=448, RESTRICT_REFERENCES=449, 
		RESULT_CACHE=450, RESULT=451, RESUMABLE=452, RETENTION=453, RETURNING=454, 
		RETURN=455, REUSE=456, REVERSE=457, REVOKE=458, REWRITE=459, RIGHT=460, 
		ROLE=461, ROLES=462, ROLLBACK=463, ROLLUP=464, ROWID=465, ROW=466, ROWS=467, 
		RULES=468, SALT=469, SAMPLE=470, SAVEPOINT=471, SAVE=472, SCHEDULER=473, 
		SCHEMACHECK=474, SCHEMA=475, SCN=476, SEARCH=477, SECOND=478, SEED=479, 
		SEGMENT=480, SELECT=481, SELF=482, SEQUENCE=483, SEQUENTIAL=484, SERIALIZABLE=485, 
		SERIALLY_REUSABLE=486, SERVERERROR=487, SESSION=488, SESSIONTIMEZONE=489, 
		SET=490, SETS=491, SETTINGS=492, SHARE=493, SHOW=494, SHUTDOWN=495, SIBLINGS=496, 
		SIGNTYPE=497, SIMPLE_INTEGER=498, SINGLE=499, SIZE=500, SKIP_=501, SMALLFILE=502, 
		SMALLINT=503, SNAPSHOT=504, SOME=505, SORT=506, SOURCE=507, SPACE_KEYWORD=508, 
		SPECIFICATION=509, SQLDATA=510, SQLERROR=511, SQL=512, STANDALONE=513, 
		START=514, STARTUP=515, STATEMENT_ID=516, STATEMENT=517, STATIC=518, STATISTICS=519, 
		STORAGE=520, STORE=521, STRING=522, SUBMULTISET=523, SUBPARTITION=524, 
		SUBSTITUTABLE=525, SUBTYPE=526, SUCCESS=527, SUSPEND=528, SYNCHRONOUS=529, 
		SYNONYM=530, SYSBACKUP=531, SYSDATE=532, SYSDBA=533, SYSDG=534, SYSGUID=535, 
		SYSKM=536, SYSOPER=537, TABLESPACE=538, TABLE=539, TEMPFILE=540, TEMPORARY=541, 
		THAN=542, THEN=543, THE=544, THROUGH=545, TIMESTAMP_LTZ_UNCONSTRAINED=546, 
		TIMESTAMP=547, TIMESTAMP_TZ_UNCONSTRAINED=548, TIMESTAMP_UNCONSTRAINED=549, 
		TIME=550, TIMEZONE_ABBR=551, TIMEZONE_HOUR=552, TIMEZONE_MINUTE=553, TIMEZONE_REGION=554, 
		TO=555, TRAILING=556, TRANSACTION=557, TRANSLATE=558, TRANSLATION=559, 
		TREAT=560, TRIGGER=561, TRUE=562, TRUNCATE=563, TRUSTED=564, TUNING=565, 
		TYPE=566, UNBOUNDED=567, UNDER=568, UNDO=569, UNIFORM=570, UNION=571, 
		UNIQUE=572, UNLIMITED=573, UNLOCK=574, UNPIVOT=575, UNTIL=576, UPDATED=577, 
		UPDATE=578, UPSERT=579, UROWID=580, USERS=581, USER=582, USE=583, USING=584, 
		VALIDATE=585, VALUES=586, VALUE=587, VARCHAR2=588, VARCHAR=589, VARIABLE=590, 
		VARRAY=591, VARYING=592, VERSIONS=593, VERSION=594, VIEW=595, WAIT=596, 
		WARNING=597, WELLFORMED=598, WHENEVER=599, WHEN=600, WHERE=601, WHILE=602, 
		WITHIN=603, WITHOUT=604, WITH=605, WORK=606, WRITE=607, XMLAGG=608, XMLATTRIBUTES=609, 
		XMLCAST=610, XMLCOLATTVAL=611, XMLELEMENT=612, XMLEXISTS=613, XMLFOREST=614, 
		XMLNAMESPACES=615, XMLPARSE=616, XMLPI=617, XMLQUERY=618, XMLROOT=619, 
		XMLSERIALIZE=620, XMLTABLE=621, XML=622, YEAR=623, YES=624, YMINTERVAL_UNCONSTRAINED=625, 
		ZONE=626, PREDICTION=627, PREDICTION_BOUNDS=628, PREDICTION_COST=629, 
		PREDICTION_DETAILS=630, PREDICTION_PROBABILITY=631, PREDICTION_SET=632, 
		CUME_DIST=633, DENSE_RANK=634, LISTAGG=635, PERCENT_RANK=636, PERCENTILE_CONT=637, 
		PERCENTILE_DISC=638, RANK=639, AVG=640, CORR=641, COVAR_=642, DECODE=643, 
		LAG=644, LEAD=645, MAX=646, MEDIAN=647, MIN=648, NTILE=649, NVL=650, RATIO_TO_REPORT=651, 
		REGR_=652, ROUND=653, ROW_NUMBER=654, SUBSTR=655, TO_CHAR=656, TRIM=657, 
		SUM=658, STDDEV=659, VAR_=660, VARIANCE=661, LEAST=662, GREATEST=663, 
		TO_DATE=664, NATIONAL_CHAR_STRING_LIT=665, BIT_STRING_LIT=666, HEX_STRING_LIT=667, 
		DOUBLE_PERIOD=668, PERIOD=669, UNSIGNED_INTEGER=670, APPROXIMATE_NUM_LIT=671, 
		CHAR_STRING=672, DELIMITED_ID=673, PERCENT=674, AMPERSAND=675, LEFT_PAREN=676, 
		RIGHT_PAREN=677, DOUBLE_ASTERISK=678, ASTERISK=679, PLUS_SIGN=680, MINUS_SIGN=681, 
		COMMA=682, SOLIDUS=683, AT_SIGN=684, ASSIGN_OP=685, BINDVAR=686, NOT_EQUAL_OP=687, 
		CARRET_OPERATOR_PART=688, TILDE_OPERATOR_PART=689, EXCLAMATION_OPERATOR_PART=690, 
		GREATER_THAN_OP=691, LESS_THAN_OP=692, COLON=693, SEMICOLON=694, BAR=695, 
		EQUALS_OP=696, LEFT_BRACKET=697, RIGHT_BRACKET=698, INTRODUCER=699, SPACES=700, 
		SINGLE_LINE_COMMENT=701, MULTI_LINE_COMMENT=702, PROMPT=703, START_CMD=704, 
		REGULAR_ID=705, ZV=706;
	public static final int
		RULE_javln = 0, RULE_javln_head = 1, RULE_javln_body = 2, RULE_sql_script = 3, 
		RULE_unit_statement = 4, RULE_drop_function = 5, RULE_alter_function = 6, 
		RULE_create_function_body = 7, RULE_parallel_enable_clause = 8, RULE_partition_by_clause = 9, 
		RULE_result_cache_clause = 10, RULE_relies_on_part = 11, RULE_streaming_clause = 12, 
		RULE_drop_package = 13, RULE_alter_package = 14, RULE_create_package = 15, 
		RULE_create_package_body = 16, RULE_package_obj_spec = 17, RULE_procedure_spec = 18, 
		RULE_function_spec = 19, RULE_package_obj_body = 20, RULE_drop_procedure = 21, 
		RULE_alter_procedure = 22, RULE_function_body = 23, RULE_procedure_body = 24, 
		RULE_create_procedure_body = 25, RULE_drop_trigger = 26, RULE_alter_trigger = 27, 
		RULE_create_trigger = 28, RULE_trigger_follows_clause = 29, RULE_trigger_when_clause = 30, 
		RULE_simple_dml_trigger = 31, RULE_for_each_row = 32, RULE_compound_dml_trigger = 33, 
		RULE_non_dml_trigger = 34, RULE_trigger_body = 35, RULE_routine_clause = 36, 
		RULE_compound_trigger_block = 37, RULE_timing_point_section = 38, RULE_non_dml_event = 39, 
		RULE_dml_event_clause = 40, RULE_dml_event_element = 41, RULE_dml_event_nested_clause = 42, 
		RULE_referencing_clause = 43, RULE_referencing_element = 44, RULE_drop_type = 45, 
		RULE_alter_type = 46, RULE_compile_type_clause = 47, RULE_replace_type_clause = 48, 
		RULE_alter_method_spec = 49, RULE_alter_method_element = 50, RULE_alter_attribute_definition = 51, 
		RULE_attribute_definition = 52, RULE_alter_collection_clauses = 53, RULE_dependent_handling_clause = 54, 
		RULE_dependent_exceptions_part = 55, RULE_create_type = 56, RULE_type_definition = 57, 
		RULE_object_type_def = 58, RULE_object_as_part = 59, RULE_object_under_part = 60, 
		RULE_nested_table_type_def = 61, RULE_sqlj_object_type = 62, RULE_type_body = 63, 
		RULE_type_body_elements = 64, RULE_map_order_func_declaration = 65, RULE_subprog_decl_in_type = 66, 
		RULE_proc_decl_in_type = 67, RULE_func_decl_in_type = 68, RULE_constructor_declaration = 69, 
		RULE_modifier_clause = 70, RULE_object_member_spec = 71, RULE_sqlj_object_type_attr = 72, 
		RULE_element_spec = 73, RULE_element_spec_options = 74, RULE_subprogram_spec = 75, 
		RULE_type_procedure_spec = 76, RULE_type_function_spec = 77, RULE_constructor_spec = 78, 
		RULE_map_order_function_spec = 79, RULE_pragma_clause = 80, RULE_pragma_elements = 81, 
		RULE_type_elements_parameter = 82, RULE_drop_sequence = 83, RULE_alter_sequence = 84, 
		RULE_create_sequence = 85, RULE_sequence_spec = 86, RULE_sequence_start_clause = 87, 
		RULE_create_index = 88, RULE_alter_index = 89, RULE_create_user = 90, 
		RULE_alter_user = 91, RULE_alter_identified_by = 92, RULE_identified_by = 93, 
		RULE_identified_other_clause = 94, RULE_user_tablespace_clause = 95, RULE_quota_clause = 96, 
		RULE_profile_clause = 97, RULE_role_clause = 98, RULE_user_default_role_clause = 99, 
		RULE_password_expire_clause = 100, RULE_user_lock_clause = 101, RULE_user_editions_clause = 102, 
		RULE_alter_user_editions_clause = 103, RULE_proxy_clause = 104, RULE_container_names = 105, 
		RULE_set_container_data = 106, RULE_add_rem_container_data = 107, RULE_container_data_clause = 108, 
		RULE_drop_index = 109, RULE_grant_statement = 110, RULE_container_clause = 111, 
		RULE_create_view = 112, RULE_view_options = 113, RULE_view_alias_constraint = 114, 
		RULE_object_view_clause = 115, RULE_inline_constraint = 116, RULE_out_of_line_constraint = 117, 
		RULE_constraint_state = 118, RULE_create_tablespace = 119, RULE_permanent_tablespace_clause = 120, 
		RULE_tablespace_encryption_spec = 121, RULE_logging_clause = 122, RULE_extent_management_clause = 123, 
		RULE_segment_management_clause = 124, RULE_flashback_mode_clause = 125, 
		RULE_temporary_tablespace_clause = 126, RULE_tablespace_group_clause = 127, 
		RULE_undo_tablespace_clause = 128, RULE_tablespace_retention_clause = 129, 
		RULE_datafile_specification = 130, RULE_tempfile_specification = 131, 
		RULE_datafile_tempfile_spec = 132, RULE_redo_log_file_spec = 133, RULE_autoextend_clause = 134, 
		RULE_maxsize_clause = 135, RULE_build_clause = 136, RULE_parallel_clause = 137, 
		RULE_create_materialized_view_log = 138, RULE_new_values_clause = 139, 
		RULE_mv_log_purge_clause = 140, RULE_create_materialized_view = 141, RULE_create_mv_refresh = 142, 
		RULE_create_table = 143, RULE_table_range_partition_by_clause = 144, RULE_datatype_null_enable = 145, 
		RULE_size_clause = 146, RULE_table_compression = 147, RULE_physical_attributes_clause = 148, 
		RULE_storage_clause = 149, RULE_deferred_segment_creation = 150, RULE_segment_attributes_clause = 151, 
		RULE_physical_properties = 152, RULE_row_movement_clause = 153, RULE_flashback_archive_clause = 154, 
		RULE_drop_table = 155, RULE_comment_on_column = 156, RULE_create_synonym = 157, 
		RULE_comment_on_table = 158, RULE_alter_table = 159, RULE_add_constraint = 160, 
		RULE_check_constraint = 161, RULE_drop_constraint = 162, RULE_enable_constraint = 163, 
		RULE_disable_constraint = 164, RULE_foreign_key_clause = 165, RULE_references_clause = 166, 
		RULE_on_delete_clause = 167, RULE_unique_key_clause = 168, RULE_primary_key_clause = 169, 
		RULE_anonymous_block = 170, RULE_invoker_rights_clause = 171, RULE_compiler_parameters_clause = 172, 
		RULE_call_spec = 173, RULE_java_spec = 174, RULE_c_spec = 175, RULE_c_agent_in_clause = 176, 
		RULE_c_parameters_clause = 177, RULE_parameter = 178, RULE_default_value_part = 179, 
		RULE_seq_of_declare_specs = 180, RULE_declare_spec = 181, RULE_variable_declaration = 182, 
		RULE_subtype_declaration = 183, RULE_cursor_declaration = 184, RULE_parameter_spec = 185, 
		RULE_exception_declaration = 186, RULE_pragma_declaration = 187, RULE_record_type_def = 188, 
		RULE_field_spec = 189, RULE_ref_cursor_type_def = 190, RULE_type_declaration = 191, 
		RULE_table_type_def = 192, RULE_table_indexed_by_part = 193, RULE_varray_type_def = 194, 
		RULE_seq_of_statements = 195, RULE_label_declaration = 196, RULE_statement = 197, 
		RULE_swallow_to_semi = 198, RULE_assignment_statement = 199, RULE_continue_statement = 200, 
		RULE_exit_statement = 201, RULE_goto_statement = 202, RULE_if_statement = 203, 
		RULE_elsif_part = 204, RULE_else_part = 205, RULE_loop_statement = 206, 
		RULE_cursor_loop_param = 207, RULE_forall_statement = 208, RULE_bounds_clause = 209, 
		RULE_between_bound = 210, RULE_lower_bound = 211, RULE_upper_bound = 212, 
		RULE_null_statement = 213, RULE_raise_statement = 214, RULE_return_statement = 215, 
		RULE_function_call = 216, RULE_pipe_row_statement = 217, RULE_body = 218, 
		RULE_exception_handler = 219, RULE_trigger_block = 220, RULE_block = 221, 
		RULE_sql_statement = 222, RULE_execute_immediate = 223, RULE_dynamic_returning_clause = 224, 
		RULE_data_manipulation_language_statements = 225, RULE_cursor_manipulation_statements = 226, 
		RULE_close_statement = 227, RULE_open_statement = 228, RULE_fetch_statement = 229, 
		RULE_open_for_statement = 230, RULE_transaction_control_statements = 231, 
		RULE_set_transaction_command = 232, RULE_set_constraint_command = 233, 
		RULE_commit_statement = 234, RULE_write_clause = 235, RULE_rollback_statement = 236, 
		RULE_savepoint_statement = 237, RULE_explain_statement = 238, RULE_select_statement = 239, 
		RULE_subquery_factoring_clause = 240, RULE_factoring_element = 241, RULE_search_clause = 242, 
		RULE_cycle_clause = 243, RULE_subquery = 244, RULE_subquery_basic_elements = 245, 
		RULE_subquery_operation_part = 246, RULE_query_block = 247, RULE_selected_element = 248, 
		RULE_from_clause = 249, RULE_select_list_elements = 250, RULE_table_ref_list = 251, 
		RULE_table_ref = 252, RULE_table_ref_aux = 253, RULE_table_ref_aux_internal = 254, 
		RULE_join_clause = 255, RULE_join_on_part = 256, RULE_join_using_part = 257, 
		RULE_outer_join_type = 258, RULE_query_partition_clause = 259, RULE_flashback_query_clause = 260, 
		RULE_pivot_clause = 261, RULE_pivot_element = 262, RULE_pivot_for_clause = 263, 
		RULE_pivot_in_clause = 264, RULE_pivot_in_clause_element = 265, RULE_pivot_in_clause_elements = 266, 
		RULE_unpivot_clause = 267, RULE_unpivot_in_clause = 268, RULE_unpivot_in_elements = 269, 
		RULE_hierarchical_query_clause = 270, RULE_start_part = 271, RULE_group_by_clause = 272, 
		RULE_group_by_elements = 273, RULE_rollup_cube_clause = 274, RULE_grouping_sets_clause = 275, 
		RULE_grouping_sets_elements = 276, RULE_having_clause = 277, RULE_model_clause = 278, 
		RULE_cell_reference_options = 279, RULE_return_rows_clause = 280, RULE_reference_model = 281, 
		RULE_main_model = 282, RULE_model_column_clauses = 283, RULE_model_column_partition_part = 284, 
		RULE_model_column_list = 285, RULE_model_column = 286, RULE_model_rules_clause = 287, 
		RULE_model_rules_part = 288, RULE_model_rules_element = 289, RULE_cell_assignment = 290, 
		RULE_model_iterate_clause = 291, RULE_until_part = 292, RULE_order_by_clause = 293, 
		RULE_order_by_elements = 294, RULE_for_update_clause = 295, RULE_for_update_of_part = 296, 
		RULE_for_update_options = 297, RULE_update_statement = 298, RULE_update_set_clause = 299, 
		RULE_column_based_update_set_clause = 300, RULE_delete_statement = 301, 
		RULE_insert_statement = 302, RULE_single_table_insert = 303, RULE_multi_table_insert = 304, 
		RULE_multi_table_element = 305, RULE_conditional_insert_clause = 306, 
		RULE_conditional_insert_when_part = 307, RULE_conditional_insert_else_part = 308, 
		RULE_insert_into_clause = 309, RULE_values_clause = 310, RULE_merge_statement = 311, 
		RULE_merge_update_clause = 312, RULE_merge_element = 313, RULE_merge_update_delete_part = 314, 
		RULE_merge_insert_clause = 315, RULE_selected_tableview = 316, RULE_lock_table_statement = 317, 
		RULE_wait_nowait_part = 318, RULE_lock_table_element = 319, RULE_lock_mode = 320, 
		RULE_general_table_ref = 321, RULE_static_returning_clause = 322, RULE_error_logging_clause = 323, 
		RULE_error_logging_into_part = 324, RULE_error_logging_reject_part = 325, 
		RULE_dml_table_expression_clause = 326, RULE_table_collection_expression = 327, 
		RULE_subquery_restriction_clause = 328, RULE_sample_clause = 329, RULE_seed_part = 330, 
		RULE_condition = 331, RULE_expressions = 332, RULE_expression = 333, RULE_cursor_expression = 334, 
		RULE_logical_expression = 335, RULE_multiset_expression = 336, RULE_relational_expression = 337, 
		RULE_compound_expression = 338, RULE_relational_operator = 339, RULE_in_elements = 340, 
		RULE_between_elements = 341, RULE_concatenation = 342, RULE_interval_expression = 343, 
		RULE_model_expression = 344, RULE_model_expression_element = 345, RULE_single_column_for_loop = 346, 
		RULE_multi_column_for_loop = 347, RULE_unary_expression = 348, RULE_case_statement = 349, 
		RULE_simple_case_statement = 350, RULE_simple_case_when_part = 351, RULE_searched_case_statement = 352, 
		RULE_searched_case_when_part = 353, RULE_case_else_part = 354, RULE_atom = 355, 
		RULE_quantified_expression = 356, RULE_string_function = 357, RULE_standard_function = 358, 
		RULE_numeric_function_wrapper = 359, RULE_numeric_function = 360, RULE_other_function = 361, 
		RULE_over_clause_keyword = 362, RULE_within_or_over_clause_keyword = 363, 
		RULE_standard_prediction_function_keyword = 364, RULE_over_clause = 365, 
		RULE_windowing_clause = 366, RULE_windowing_type = 367, RULE_windowing_elements = 368, 
		RULE_using_clause = 369, RULE_using_element = 370, RULE_collect_order_by_part = 371, 
		RULE_within_or_over_part = 372, RULE_cost_matrix_clause = 373, RULE_xml_passing_clause = 374, 
		RULE_xml_attributes_clause = 375, RULE_xml_namespaces_clause = 376, RULE_xml_table_column = 377, 
		RULE_xml_general_default_part = 378, RULE_xml_multiuse_expression_element = 379, 
		RULE_xmlroot_param_version_part = 380, RULE_xmlroot_param_standalone_part = 381, 
		RULE_xmlserialize_param_enconding_part = 382, RULE_xmlserialize_param_version_part = 383, 
		RULE_xmlserialize_param_ident_part = 384, RULE_sql_plus_command = 385, 
		RULE_whenever_command = 386, RULE_set_command = 387, RULE_partition_extension_clause = 388, 
		RULE_column_alias = 389, RULE_table_alias = 390, RULE_where_clause = 391, 
		RULE_into_clause = 392, RULE_xml_column_name = 393, RULE_cost_class_name = 394, 
		RULE_attribute_name = 395, RULE_savepoint_name = 396, RULE_rollback_segment_name = 397, 
		RULE_table_var_name = 398, RULE_schema_name = 399, RULE_routine_name = 400, 
		RULE_package_name = 401, RULE_implementation_type_name = 402, RULE_parameter_name = 403, 
		RULE_reference_model_name = 404, RULE_main_model_name = 405, RULE_container_tableview_name = 406, 
		RULE_aggregate_function_name = 407, RULE_query_name = 408, RULE_grantee_name = 409, 
		RULE_role_name = 410, RULE_constraint_name = 411, RULE_label_name = 412, 
		RULE_type_name = 413, RULE_sequence_name = 414, RULE_exception_name = 415, 
		RULE_function_name = 416, RULE_procedure_name = 417, RULE_trigger_name = 418, 
		RULE_variable_name = 419, RULE_index_name = 420, RULE_cursor_name = 421, 
		RULE_record_name = 422, RULE_collection_name = 423, RULE_link_name = 424, 
		RULE_column_name = 425, RULE_tableview_name = 426, RULE_char_set_name = 427, 
		RULE_synonym_name = 428, RULE_schema_object_name = 429, RULE_dir_object_name = 430, 
		RULE_user_object_name = 431, RULE_grant_object_name = 432, RULE_column_list = 433, 
		RULE_paren_column_list = 434, RULE_keep_clause = 435, RULE_function_argument = 436, 
		RULE_function_argument_analytic = 437, RULE_function_argument_modeling = 438, 
		RULE_respect_or_ignore_nulls = 439, RULE_argument = 440, RULE_type_spec = 441, 
		RULE_datatype = 442, RULE_precision_part = 443, RULE_native_datatype_element = 444, 
		RULE_bind_variable = 445, RULE_general_element = 446, RULE_general_element_part = 447, 
		RULE_table_element = 448, RULE_object_privilege = 449, RULE_system_privilege = 450, 
		RULE_constant = 451, RULE_numeric = 452, RULE_numeric_negative = 453, 
		RULE_quoted_string = 454, RULE_identifier = 455, RULE_id_expression = 456, 
		RULE_outer_join_sign = 457, RULE_regular_id = 458, RULE_string_function_name = 459, 
		RULE_numeric_function_name = 460;
	public static final String[] ruleNames = {
		"javln", "javln_head", "javln_body", "sql_script", "unit_statement", "drop_function", 
		"alter_function", "create_function_body", "parallel_enable_clause", "partition_by_clause", 
		"result_cache_clause", "relies_on_part", "streaming_clause", "drop_package", 
		"alter_package", "create_package", "create_package_body", "package_obj_spec", 
		"procedure_spec", "function_spec", "package_obj_body", "drop_procedure", 
		"alter_procedure", "function_body", "procedure_body", "create_procedure_body", 
		"drop_trigger", "alter_trigger", "create_trigger", "trigger_follows_clause", 
		"trigger_when_clause", "simple_dml_trigger", "for_each_row", "compound_dml_trigger", 
		"non_dml_trigger", "trigger_body", "routine_clause", "compound_trigger_block", 
		"timing_point_section", "non_dml_event", "dml_event_clause", "dml_event_element", 
		"dml_event_nested_clause", "referencing_clause", "referencing_element", 
		"drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
		"alter_method_spec", "alter_method_element", "alter_attribute_definition", 
		"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
		"dependent_exceptions_part", "create_type", "type_definition", "object_type_def", 
		"object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type", 
		"type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
		"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause", 
		"object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options", 
		"subprogram_spec", "type_procedure_spec", "type_function_spec", "constructor_spec", 
		"map_order_function_spec", "pragma_clause", "pragma_elements", "type_elements_parameter", 
		"drop_sequence", "alter_sequence", "create_sequence", "sequence_spec", 
		"sequence_start_clause", "create_index", "alter_index", "create_user", 
		"alter_user", "alter_identified_by", "identified_by", "identified_other_clause", 
		"user_tablespace_clause", "quota_clause", "profile_clause", "role_clause", 
		"user_default_role_clause", "password_expire_clause", "user_lock_clause", 
		"user_editions_clause", "alter_user_editions_clause", "proxy_clause", 
		"container_names", "set_container_data", "add_rem_container_data", "container_data_clause", 
		"drop_index", "grant_statement", "container_clause", "create_view", "view_options", 
		"view_alias_constraint", "object_view_clause", "inline_constraint", "out_of_line_constraint", 
		"constraint_state", "create_tablespace", "permanent_tablespace_clause", 
		"tablespace_encryption_spec", "logging_clause", "extent_management_clause", 
		"segment_management_clause", "flashback_mode_clause", "temporary_tablespace_clause", 
		"tablespace_group_clause", "undo_tablespace_clause", "tablespace_retention_clause", 
		"datafile_specification", "tempfile_specification", "datafile_tempfile_spec", 
		"redo_log_file_spec", "autoextend_clause", "maxsize_clause", "build_clause", 
		"parallel_clause", "create_materialized_view_log", "new_values_clause", 
		"mv_log_purge_clause", "create_materialized_view", "create_mv_refresh", 
		"create_table", "table_range_partition_by_clause", "datatype_null_enable", 
		"size_clause", "table_compression", "physical_attributes_clause", "storage_clause", 
		"deferred_segment_creation", "segment_attributes_clause", "physical_properties", 
		"row_movement_clause", "flashback_archive_clause", "drop_table", "comment_on_column", 
		"create_synonym", "comment_on_table", "alter_table", "add_constraint", 
		"check_constraint", "drop_constraint", "enable_constraint", "disable_constraint", 
		"foreign_key_clause", "references_clause", "on_delete_clause", "unique_key_clause", 
		"primary_key_clause", "anonymous_block", "invoker_rights_clause", "compiler_parameters_clause", 
		"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
		"parameter", "default_value_part", "seq_of_declare_specs", "declare_spec", 
		"variable_declaration", "subtype_declaration", "cursor_declaration", "parameter_spec", 
		"exception_declaration", "pragma_declaration", "record_type_def", "field_spec", 
		"ref_cursor_type_def", "type_declaration", "table_type_def", "table_indexed_by_part", 
		"varray_type_def", "seq_of_statements", "label_declaration", "statement", 
		"swallow_to_semi", "assignment_statement", "continue_statement", "exit_statement", 
		"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
		"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
		"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
		"function_call", "pipe_row_statement", "body", "exception_handler", "trigger_block", 
		"block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
		"data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_basic_elements", 
		"subquery_operation_part", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"table_ref_aux_internal", "join_clause", "join_on_part", "join_using_part", 
		"outer_join_type", "query_partition_clause", "flashback_query_clause", 
		"pivot_clause", "pivot_element", "pivot_for_clause", "pivot_in_clause", 
		"pivot_in_clause_element", "pivot_in_clause_elements", "unpivot_clause", 
		"unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "condition", "expressions", "expression", 
		"cursor_expression", "logical_expression", "multiset_expression", "relational_expression", 
		"compound_expression", "relational_operator", "in_elements", "between_elements", 
		"concatenation", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "multi_column_for_loop", "unary_expression", 
		"case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
		"searched_case_when_part", "case_else_part", "atom", "quantified_expression", 
		"string_function", "standard_function", "numeric_function_wrapper", "numeric_function", 
		"other_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "partition_extension_clause", "column_alias", 
		"table_alias", "where_clause", "into_clause", "xml_column_name", "cost_class_name", 
		"attribute_name", "savepoint_name", "rollback_segment_name", "table_var_name", 
		"schema_name", "routine_name", "package_name", "implementation_type_name", 
		"parameter_name", "reference_model_name", "main_model_name", "container_tableview_name", 
		"aggregate_function_name", "query_name", "grantee_name", "role_name", 
		"constraint_name", "label_name", "type_name", "sequence_name", "exception_name", 
		"function_name", "procedure_name", "trigger_name", "variable_name", "index_name", 
		"cursor_name", "record_name", "collection_name", "link_name", "column_name", 
		"tableview_name", "char_set_name", "synonym_name", "schema_object_name", 
		"dir_object_name", "user_object_name", "grant_object_name", "column_list", 
		"paren_column_list", "keep_clause", "function_argument", "function_argument_analytic", 
		"function_argument_modeling", "respect_or_ignore_nulls", "argument", "type_spec", 
		"datatype", "precision_part", "native_datatype_element", "bind_variable", 
		"general_element", "general_element_part", "table_element", "object_privilege", 
		"system_privilege", "constant", "numeric", "numeric_negative", "quoted_string", 
		"identifier", "id_expression", "outer_join_sign", "regular_id", "string_function_name", 
		"numeric_function_name"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'..'", "'.'", null, null, 
		null, null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", 
		"'/'", "'@'", "':='", null, null, "'^'", "'~'", "'!'", "'>'", "'<'", "':'", 
		"';'", "'|'", "'='", "'['", "']'", "'_'", null, null, null, null, null, 
		null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ACCESS", "ACCOUNT", "ADD", "ADMIN", "ADMINISTER", "ADVISOR", "AFTER", 
		"AGENT", "AGGREGATE", "A_LETTER", "ALL", "ALTER", "ANALYZE", "AND", "ANY", 
		"ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", "ASYNCHRONOUS", "AT", "ATTRIBUTE", 
		"AUDIT", "AUTHENTICATED", "AUTHENTICATION", "AUTHID", "AUTOALLOCATE", 
		"AUTO", "AUTOEXTEND", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BACKUP", 
		"BASIC", "BATCH", "BECOME", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BIGFILE", 
		"BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", "BLOCKSIZE", 
		"BODY", "BOOLEAN", "BOTH", "BREADTH", "BUFFER_POOL", "BUILD", "BULK", 
		"BY", "BYTE", "CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", "CAST", 
		"CERTIFICATE", "CHANGE", "CHARACTER", "CHAR", "CHAR_CS", "CHECK", "CHR", 
		"CLASS", "C_LETTER", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COLLECT", 
		"COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
		"COMPILE", "COMPLETE", "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT_BY_ROOT", 
		"CONNECT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTAINER", 
		"CONTAINER_DATA", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID_ALL", 
		"CORRUPT_XID", "COST", "COUNT", "CREATE", "CREATION", "CROSS", "CUBE", 
		"CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", "DATABASE", 
		"DATA", "DATAFILE", "DATE", "DAY", "DBA_RECYCLEBIN", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINE", 
		"DEFINER", "DELEGATE", "DELETE", "DEMAND", "DEPTH", "DESC", "DETERMINISTIC", 
		"DICTIONARY", "DIMENSION", "DIRECTORY", "DISABLE", "DISASSOCIATE", "DISTINCT", 
		"DISTINGUISHED", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
		"EACH", "EDITION", "EDITIONING", "EDITIONS", "ELEMENT", "ELSE", "ELSIF", 
		"EMPTY", "ENABLE", "ENCODING", "ENCRYPT", "ENCRYPTION", "END", "ENFORCED", 
		"ENTERPRISE", "ENTITYESCAPING", "ERR", "ERRORS", "ESCAPE", "EVALNAME", 
		"EXCEPT", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", "EXCLUDE", "EXCLUDING", 
		"EXCLUSIVE", "EXECUTE", "EXEMPT", "EXISTS", "EXIT", "EXPIRE", "EXPLAIN", 
		"EXTENT", "EXTERNAL", "EXTERNALLY", "EXTRACT", "FAILURE", "FALSE", "FAST", 
		"FETCH", "FILESYSTEM_LIKE_LOGGING", "FINAL", "FIRST", "FIRST_VALUE", "FLASHBACK", 
		"FLASH_CACHE", "FLOAT", "FOLDER", "FOLLOWING", "FOLLOWS", "FORALL", "FORCE", 
		"FOREIGN", "FOR", "FREELIST", "FREELISTS", "FROM", "FULL", "FUNCTION", 
		"GLOBAL", "GLOBALLY", "GOTO", "GRANT", "GROUP", "GROUPING", "GROUPS", 
		"GUARANTEE", "HASH", "HAVING", "HIDE", "HIERARCHY", "HIGH", "HOUR", "IDENTIFIED", 
		"IDENTIFIER", "ID", "IF", "IGNORE", "IMMEDIATE", "INCLUDE", "INCLUDING", 
		"INCREMENT", "INDENT", "INDEXED", "INDEX", "INDEXTYPE", "INDICATOR", "INDICES", 
		"INFINITE", "INHERIT", "IN", "INITIAL", "INITIALLY", "INITRANS", "INLINE", 
		"INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", "INTEGER", "INTERSECT", 
		"INTERVAL", "INT", "INTO", "INVALIDATE", "IS", "ISOLATION", "ITERATE", 
		"JAVA", "JOB", "JOIN", "KEEP", "KEY", "LANGUAGE", "LAST", "LAST_VALUE", 
		"LEADING", "LEFT", "LESS", "LEVEL", "LIBRARY", "LIKE2", "LIKE4", "LIKEC", 
		"LIKE", "LIMIT", "LINK", "LIST", "LOCAL", "LOCKED", "LOCK", "LOGGING", 
		"LOG", "LOGMINING", "LOGOFF", "LOGON", "LONG", "LOOP", "LOW", "MAIN", 
		"MANAGE", "MANAGEMENT", "MANUAL", "MAP", "MASTER", "MATCHED", "MATERIALIZED", 
		"MAXSIZE", "MAXVALUE", "MEASURE", "MEASURES", "MEMBER", "MERGE", "MINEXTENTS", 
		"MINIMUM", "MINING", "MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MODEL", 
		"MODE", "MODIFY", "MONTH", "MOVEMENT", "MULTISET", "NAME", "NAN", "NATURAL", 
		"NATURALN", "NAV", "NCHAR_CS", "NCHAR", "NCLOB", "NESTED", "NEVER", "NEW", 
		"NEXT", "NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
		"NOGUARANTEE", "NOLOGGING", "NOMAXVALUE", "NOMINVALUE", "NONE", "NO", 
		"NOORDER", "NOPARALLEL", "NORELY", "NOSCHEMACHECK", "NOTIFICATION", "NOT", 
		"NOVALIDATE", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", 
		"OBJECT", "OFFLINE", "OFF", "OF", "OID", "OLD", "OLTP", "ONLINE", "ONLY", 
		"ON", "OPEN", "OPERATOR", "OPTIMAL", "OPTION", "ORADATA", "ORDER", "ORDINALITY", 
		"OR", "OSERROR", "OUTER", "OUTLINE", "OUT", "OVER", "OVERRIDING", "PACKAGE", 
		"PARALLEL_ENABLE", "PARALLEL", "PARAMETERS", "PARENT", "PARTITION", "PASSING", 
		"PASSWORD", "PATH", "PCTFREE", "PCTINCREASE", "PCTUSED", "PERCENT_FOUND", 
		"PERCENT_ISOPEN", "PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", 
		"PERCENT_TYPE", "PIPELINED", "PIPE", "PIVOT", "PLAN", "PLS_INTEGER", "PLUGGABLE", 
		"POLICY", "POSITIVEN", "POSITIVE", "PRAGMA", "PREBUILT", "PRECEDING", 
		"PRECISION", "PRESENT", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGE", "PRIVILEGES", 
		"PROCEDURE", "PROCESS", "PROFILE", "PROGRAM", "PUBLIC", "PURGE", "QUERY", 
		"QUOTA", "RAISE", "RANGE", "RAW", "READ", "REAL", "RECORD", "RECYCLE", 
		"REDACTION", "REDUCED", "REFERENCE", "REFERENCES", "REFERENCING", "REF", 
		"REFRESH", "REJECT", "RELIES_ON", "RELY", "REMOVE", "RENAME", "REPLACE", 
		"REQUIRED", "RESOURCE", "RESPECT", "RESTRICTED", "RESTRICT_REFERENCES", 
		"RESULT_CACHE", "RESULT", "RESUMABLE", "RETENTION", "RETURNING", "RETURN", 
		"REUSE", "REVERSE", "REVOKE", "REWRITE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", 
		"ROLLUP", "ROWID", "ROW", "ROWS", "RULES", "SALT", "SAMPLE", "SAVEPOINT", 
		"SAVE", "SCHEDULER", "SCHEMACHECK", "SCHEMA", "SCN", "SEARCH", "SECOND", 
		"SEED", "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", 
		"SERIALLY_REUSABLE", "SERVERERROR", "SESSION", "SESSIONTIMEZONE", "SET", 
		"SETS", "SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", 
		"SIMPLE_INTEGER", "SINGLE", "SIZE", "SKIP_", "SMALLFILE", "SMALLINT", 
		"SNAPSHOT", "SOME", "SORT", "SOURCE", "SPACE_KEYWORD", "SPECIFICATION", 
		"SQLDATA", "SQLERROR", "SQL", "STANDALONE", "START", "STARTUP", "STATEMENT_ID", 
		"STATEMENT", "STATIC", "STATISTICS", "STORAGE", "STORE", "STRING", "SUBMULTISET", 
		"SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", "SYNCHRONOUS", 
		"SYNONYM", "SYSBACKUP", "SYSDATE", "SYSDBA", "SYSDG", "SYSGUID", "SYSKM", 
		"SYSOPER", "TABLESPACE", "TABLE", "TEMPFILE", "TEMPORARY", "THAN", "THEN", 
		"THE", "THROUGH", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", 
		"TIMESTAMP_UNCONSTRAINED", "TIME", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
		"TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", 
		"TREAT", "TRIGGER", "TRUE", "TRUNCATE", "TRUSTED", "TUNING", "TYPE", "UNBOUNDED", 
		"UNDER", "UNDO", "UNIFORM", "UNION", "UNIQUE", "UNLIMITED", "UNLOCK", 
		"UNPIVOT", "UNTIL", "UPDATED", "UPDATE", "UPSERT", "UROWID", "USERS", 
		"USER", "USE", "USING", "VALIDATE", "VALUES", "VALUE", "VARCHAR2", "VARCHAR", 
		"VARIABLE", "VARRAY", "VARYING", "VERSIONS", "VERSION", "VIEW", "WAIT", 
		"WARNING", "WELLFORMED", "WHENEVER", "WHEN", "WHERE", "WHILE", "WITHIN", 
		"WITHOUT", "WITH", "WORK", "WRITE", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", 
		"XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", 
		"XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
		"XML", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", 
		"PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", 
		"PREDICTION_SET", "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
		"PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", 
		"DECODE", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", 
		"REGR_", "ROUND", "ROW_NUMBER", "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", 
		"VAR_", "VARIANCE", "LEAST", "GREATEST", "TO_DATE", "NATIONAL_CHAR_STRING_LIT", 
		"BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", 
		"APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
		"LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", 
		"MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "BINDVAR", "NOT_EQUAL_OP", 
		"CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
		"GREATER_THAN_OP", "LESS_THAN_OP", "COLON", "SEMICOLON", "BAR", "EQUALS_OP", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT", "PROMPT", "START_CMD", "REGULAR_ID", "ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PlSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class JavlnContext extends ParserRuleContext {
		public Javln_headContext javln_head() {
			return getRuleContext(Javln_headContext.class,0);
		}
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Javln_bodyContext> javln_body() {
			return getRuleContexts(Javln_bodyContext.class);
		}
		public Javln_bodyContext javln_body(int i) {
			return getRuleContext(Javln_bodyContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public List<TerminalNode> SOLIDUS() { return getTokens(PlSqlParser.SOLIDUS); }
		public TerminalNode SOLIDUS(int i) {
			return getToken(PlSqlParser.SOLIDUS, i);
		}
		public JavlnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_javln; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJavln(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJavln(this);
		}
	}

	public final JavlnContext javln() throws RecognitionException {
		JavlnContext _localctx = new JavlnContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_javln);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(922);
			javln_head();
			setState(927); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(923);
				javln_body();
				setState(925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SOLIDUS || _la==SEMICOLON) {
					{
					setState(924);
					_la = _input.LA(1);
					if ( !(_la==SOLIDUS || _la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(929); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CREATE );
			setState(931);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Javln_headContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode DEFINE() { return getToken(PlSqlParser.DEFINE, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public Javln_headContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_javln_head; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJavln_head(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJavln_head(this);
		}
	}

	public final Javln_headContext javln_head() throws RecognitionException {
		Javln_headContext _localctx = new Javln_headContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_javln_head);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(933);
			match(SET);
			setState(934);
			match(DEFINE);
			setState(935);
			match(OFF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Javln_bodyContext extends ParserRuleContext {
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_package_bodyContext create_package_body() {
			return getRuleContext(Create_package_bodyContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Javln_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_javln_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJavln_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJavln_body(this);
		}
	}

	public final Javln_bodyContext javln_body() throws RecognitionException {
		Javln_bodyContext _localctx = new Javln_bodyContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_javln_body);
		try {
			setState(943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(937);
				create_function_body();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(938);
				create_procedure_body();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(939);
				create_package();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(940);
				create_package_body();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(941);
				create_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(942);
				create_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_script(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BEGIN - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CREATE - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECLARE - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DROP - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GRANT - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSERT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOCK - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELECT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPDATE - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WITH - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (COMMA - 646)) | (1L << (SOLIDUS - 646)) | (1L << (PROMPT - 646)) | (1L << (START_CMD - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				{
				setState(947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					setState(945);
					unit_statement();
					}
					break;
				case 2:
					{
					setState(946);
					sql_plus_command();
					}
					break;
				}
				setState(950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMICOLON) {
					{
					setState(949);
					match(SEMICOLON);
					}
				}

				}
				}
				setState(956);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(957);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_indexContext alter_index() {
			return getRuleContext(Alter_indexContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_package_bodyContext create_package_body() {
			return getRuleContext(Create_package_bodyContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_tablespaceContext create_tablespace() {
			return getRuleContext(Create_tablespaceContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_materialized_viewContext create_materialized_view() {
			return getRuleContext(Create_materialized_viewContext.class,0);
		}
		public Create_materialized_view_logContext create_materialized_view_log() {
			return getRuleContext(Create_materialized_view_logContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Comment_on_columnContext comment_on_column() {
			return getRuleContext(Comment_on_columnContext.class,0);
		}
		public Comment_on_tableContext comment_on_table() {
			return getRuleContext(Comment_on_tableContext.class,0);
		}
		public Anonymous_blockContext anonymous_block() {
			return getRuleContext(Anonymous_blockContext.class,0);
		}
		public Grant_statementContext grant_statement() {
			return getRuleContext(Grant_statementContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnit_statement(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_unit_statement);
		try {
			setState(997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(959);
				transaction_control_statements();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(960);
				alter_function();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(961);
				alter_package();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(962);
				alter_procedure();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(963);
				alter_sequence();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(964);
				alter_trigger();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(965);
				alter_type();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(966);
				alter_table();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(967);
				alter_index();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(968);
				alter_user();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(969);
				create_function_body();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(970);
				create_procedure_body();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(971);
				create_package();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(972);
				create_package_body();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(973);
				create_index();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(974);
				create_table();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(975);
				create_tablespace();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(976);
				create_view();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(977);
				create_materialized_view();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(978);
				create_materialized_view_log();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(979);
				create_user();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(980);
				create_sequence();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(981);
				create_trigger();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(982);
				create_type();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(983);
				create_synonym();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(984);
				drop_function();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(985);
				drop_package();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(986);
				drop_procedure();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(987);
				drop_sequence();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(988);
				drop_trigger();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(989);
				drop_type();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(990);
				data_manipulation_language_statements();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(991);
				drop_table();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(992);
				drop_index();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(993);
				comment_on_column();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(994);
				comment_on_table();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(995);
				anonymous_block();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(996);
				grant_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_function(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(999);
			match(DROP);
			setState(1000);
			match(FUNCTION);
			setState(1001);
			function_name();
			setState(1002);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_function(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1004);
			match(ALTER);
			setState(1005);
			match(FUNCTION);
			setState(1006);
			function_name();
			setState(1007);
			match(COMPILE);
			setState(1009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(1008);
				match(DEBUG);
				}
				break;
			}
			setState(1014);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1011);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1016);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
			}
			setState(1019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1017);
				match(REUSE);
				setState(1018);
				match(SETTINGS);
				}
			}

			setState(1021);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_function_body(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1023);
			match(CREATE);
			setState(1026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1024);
				match(OR);
				setState(1025);
				match(REPLACE);
				}
			}

			setState(1028);
			match(FUNCTION);
			setState(1029);
			function_name();
			setState(1041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1030);
				match(LEFT_PAREN);
				setState(1035); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1032);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1031);
						match(COMMA);
						}
					}

					setState(1034);
					parameter();
					}
					}
					setState(1037); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				setState(1039);
				match(RIGHT_PAREN);
				}
			}

			setState(1043);
			match(RETURN);
			setState(1044);
			type_spec();
			setState(1051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1049);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1045);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1046);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1047);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1048);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1053);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				{
				setState(1055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1054);
					match(PIPELINED);
					}
				}

				setState(1057);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1066);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					setState(1059);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1058);
						match(DECLARE);
						}
					}

					setState(1062);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
						{
						setState(1061);
						seq_of_declare_specs();
						}
					}

					setState(1064);
					body();
					}
					break;
				case 2:
					{
					setState(1065);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1068);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1069);
				match(USING);
				setState(1070);
				implementation_type_name();
				}
				break;
			}
			setState(1073);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParallel_enable_clause(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1075);
			match(PARALLEL_ENABLE);
			setState(1077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1076);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode LIST() { return getToken(PlSqlParser.LIST, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPartition_by_clause(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1079);
			match(LEFT_PAREN);
			setState(1080);
			match(PARTITION);
			setState(1081);
			expression();
			setState(1082);
			match(BY);
			setState(1086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(1083);
				match(ANY);
				}
				break;
			case HASH:
			case LIST:
			case RANGE:
				{
				setState(1084);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==LIST || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1085);
				paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(1088);
				streaming_clause();
				}
			}

			setState(1091);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitResult_cache_clause(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1093);
			match(RESULT_CACHE);
			setState(1095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(1094);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelies_on_part(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1097);
			match(RELIES_ON);
			setState(1098);
			match(LEFT_PAREN);
			setState(1099);
			tableview_name();
			setState(1104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1100);
				match(COMMA);
				setState(1101);
				tableview_name();
				}
				}
				setState(1106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1107);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStreaming_clause(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1109);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1110);
			expression();
			setState(1111);
			match(BY);
			setState(1112);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_package(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1114);
			match(DROP);
			setState(1115);
			match(PACKAGE);
			setState(1117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1116);
				match(BODY);
				}
				break;
			}
			setState(1122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(1119);
				schema_object_name();
				setState(1120);
				match(PERIOD);
				}
				break;
			}
			setState(1124);
			package_name();
			setState(1125);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(PlSqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(PlSqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_package(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1127);
			match(ALTER);
			setState(1128);
			match(PACKAGE);
			setState(1129);
			package_name();
			setState(1130);
			match(COMPILE);
			setState(1132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1131);
				match(DEBUG);
				}
				break;
			}
			setState(1135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1134);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1140);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1137);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1142);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			}
			setState(1145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1143);
				match(REUSE);
				setState(1144);
				match(SETTINGS);
				}
			}

			setState(1147);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_package(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1149);
			match(CREATE);
			setState(1152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1150);
				match(OR);
				setState(1151);
				match(REPLACE);
				}
			}

			setState(1154);
			match(PACKAGE);
			setState(1158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(1155);
				schema_object_name();
				setState(1156);
				match(PERIOD);
				}
				break;
			}
			setState(1160);
			package_name();
			setState(1162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1161);
				invoker_rights_clause();
				}
			}

			setState(1164);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				{
				setState(1165);
				package_obj_spec();
				}
				}
				setState(1170);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1171);
			match(END);
			setState(1173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(1172);
				package_name();
				}
			}

			setState(1175);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_package_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Create_package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_package_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_package_body(this);
		}
	}

	public final Create_package_bodyContext create_package_body() throws RecognitionException {
		Create_package_bodyContext _localctx = new Create_package_bodyContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_create_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			match(CREATE);
			setState(1180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1178);
				match(OR);
				setState(1179);
				match(REPLACE);
				}
			}

			setState(1182);
			match(PACKAGE);
			setState(1183);
			match(BODY);
			setState(1187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				setState(1184);
				schema_object_name();
				setState(1185);
				match(PERIOD);
				}
				break;
			}
			setState(1189);
			package_name();
			setState(1190);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				{
				setState(1191);
				package_obj_body();
				}
				}
				setState(1196);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BEGIN) {
				{
				setState(1197);
				match(BEGIN);
				setState(1198);
				seq_of_statements();
				}
			}

			setState(1201);
			match(END);
			setState(1203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(1202);
				package_name();
				}
			}

			setState(1205);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_obj_spec(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_package_obj_spec);
		try {
			setState(1215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1207);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1208);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1209);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1210);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1211);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1212);
				type_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1213);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1214);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_spec(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1217);
			match(PROCEDURE);
			setState(1218);
			identifier();
			setState(1230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1219);
				match(LEFT_PAREN);
				setState(1220);
				parameter();
				setState(1225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1221);
					match(COMMA);
					setState(1222);
					parameter();
					}
					}
					setState(1227);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1228);
				match(RIGHT_PAREN);
				}
			}

			setState(1232);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_spec(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1234);
			match(FUNCTION);
			setState(1235);
			identifier();
			setState(1247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1236);
				match(LEFT_PAREN);
				setState(1237);
				parameter();
				setState(1242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1238);
					match(COMMA);
					setState(1239);
					parameter();
					}
					}
					setState(1244);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1245);
				match(RIGHT_PAREN);
				}
			}

			setState(1249);
			match(RETURN);
			setState(1250);
			type_spec();
			setState(1252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETERMINISTIC) {
				{
				setState(1251);
				match(DETERMINISTIC);
				}
			}

			setState(1255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(1254);
				match(RESULT_CACHE);
				}
			}

			setState(1257);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_obj_body(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_package_obj_body);
		try {
			setState(1268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1259);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1260);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1261);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1262);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1263);
				type_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1264);
				procedure_body();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1265);
				function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1266);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1267);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_procedure(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1270);
			match(DROP);
			setState(1271);
			match(PROCEDURE);
			setState(1272);
			procedure_name();
			setState(1273);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_procedure(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1275);
			match(ALTER);
			setState(1276);
			match(PROCEDURE);
			setState(1277);
			procedure_name();
			setState(1278);
			match(COMPILE);
			setState(1280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				setState(1279);
				match(DEBUG);
				}
				break;
			}
			setState(1285);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1282);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1287);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			}
			setState(1290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1288);
				match(REUSE);
				setState(1289);
				match(SETTINGS);
				}
			}

			setState(1292);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_body(this);
		}
	}

	public final Function_bodyContext function_body() throws RecognitionException {
		Function_bodyContext _localctx = new Function_bodyContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1294);
			match(FUNCTION);
			setState(1295);
			identifier();
			setState(1307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1296);
				match(LEFT_PAREN);
				setState(1297);
				parameter();
				setState(1302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1298);
					match(COMMA);
					setState(1299);
					parameter();
					}
					}
					setState(1304);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1305);
				match(RIGHT_PAREN);
				}
			}

			setState(1309);
			match(RETURN);
			setState(1310);
			type_spec();
			setState(1317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1315);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1311);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1312);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1313);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1314);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				{
				setState(1321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1320);
					match(PIPELINED);
					}
				}

				setState(1323);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(1325);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1324);
						match(DECLARE);
						}
					}

					setState(1328);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
						{
						setState(1327);
						seq_of_declare_specs();
						}
					}

					setState(1330);
					body();
					}
					break;
				case 2:
					{
					setState(1331);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1334);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1335);
				match(USING);
				setState(1336);
				implementation_type_name();
				}
				break;
			}
			setState(1339);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_body(this);
		}
	}

	public final Procedure_bodyContext procedure_body() throws RecognitionException {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1341);
			match(PROCEDURE);
			setState(1342);
			identifier();
			setState(1354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1343);
				match(LEFT_PAREN);
				setState(1344);
				parameter();
				setState(1349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1345);
					match(COMMA);
					setState(1346);
					parameter();
					}
					}
					setState(1351);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1352);
				match(RIGHT_PAREN);
				}
			}

			setState(1356);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1357);
					match(DECLARE);
					}
				}

				setState(1361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(1360);
					seq_of_declare_specs();
					}
				}

				setState(1363);
				body();
				}
				break;
			case 2:
				{
				setState(1364);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1365);
				match(EXTERNAL);
				}
				break;
			}
			setState(1368);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_procedure_body(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1370);
			match(CREATE);
			setState(1373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1371);
				match(OR);
				setState(1372);
				match(REPLACE);
				}
			}

			setState(1375);
			match(PROCEDURE);
			setState(1376);
			procedure_name();
			setState(1388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1377);
				match(LEFT_PAREN);
				setState(1378);
				parameter();
				setState(1383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1379);
					match(COMMA);
					setState(1380);
					parameter();
					}
					}
					setState(1385);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1386);
				match(RIGHT_PAREN);
				}
			}

			setState(1391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1390);
				invoker_rights_clause();
				}
			}

			setState(1393);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1394);
					match(DECLARE);
					}
				}

				setState(1398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(1397);
					seq_of_declare_specs();
					}
				}

				setState(1400);
				body();
				}
				break;
			case 2:
				{
				setState(1401);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1402);
				match(EXTERNAL);
				}
				break;
			}
			setState(1405);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_trigger(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1407);
			match(DROP);
			setState(1408);
			match(TRIGGER);
			setState(1409);
			trigger_name();
			setState(1410);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext alter_trigger_name;
		public Trigger_nameContext rename_trigger_name;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_trigger(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1412);
			match(ALTER);
			setState(1413);
			match(TRIGGER);
			setState(1414);
			((Alter_triggerContext)_localctx).alter_trigger_name = trigger_name();
			setState(1433);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1415);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1416);
				match(RENAME);
				setState(1417);
				match(TO);
				setState(1418);
				((Alter_triggerContext)_localctx).rename_trigger_name = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1419);
				match(COMPILE);
				setState(1421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(1420);
					match(DEBUG);
					}
					break;
				}
				setState(1426);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1423);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1428);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
				}
				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1429);
					match(REUSE);
					setState(1430);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1435);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_trigger(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1437);
			match(CREATE);
			setState(1440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1438);
				match(OR);
				setState(1439);
				match(REPLACE);
				}
			}

			setState(1442);
			match(TRIGGER);
			setState(1443);
			trigger_name();
			setState(1447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(1444);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1445);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1446);
				non_dml_trigger();
				}
				break;
			}
			setState(1450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1449);
				trigger_follows_clause();
				}
				break;
			}
			setState(1453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1452);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1455);
				trigger_when_clause();
				}
			}

			setState(1458);
			trigger_body();
			setState(1459);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_follows_clause(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1461);
			match(FOLLOWS);
			setState(1462);
			trigger_name();
			setState(1467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1463);
				match(COMMA);
				setState(1464);
				trigger_name();
				}
				}
				setState(1469);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_when_clause(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1470);
			match(WHEN);
			setState(1471);
			match(LEFT_PAREN);
			setState(1472);
			condition();
			setState(1473);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_dml_trigger(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1475);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1476);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1477);
				match(INSTEAD);
				setState(1478);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1481);
			dml_event_clause();
			setState(1483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1482);
				referencing_clause();
				}
				break;
			}
			setState(1486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1485);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_each_row(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1488);
			match(FOR);
			setState(1489);
			match(EACH);
			setState(1490);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_dml_trigger(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1492);
			match(FOR);
			setState(1493);
			dml_event_clause();
			setState(1495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1494);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNon_dml_trigger(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1498);
			non_dml_event();
			setState(1503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1499);
				match(OR);
				setState(1500);
				non_dml_event();
				}
				}
				setState(1505);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1506);
			match(ON);
			setState(1514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1507);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1511);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
				case 1:
					{
					setState(1508);
					schema_name();
					setState(1509);
					match(PERIOD);
					}
					break;
				}
				setState(1513);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_body(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_trigger_body);
		try {
			setState(1521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1516);
				match(COMPOUND);
				setState(1517);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1518);
				match(CALL);
				setState(1519);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1520);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRoutine_clause(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1523);
			routine_name();
			setState(1525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1524);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_trigger_block(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_compound_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1527);
			match(COMPOUND);
			setState(1528);
			match(TRIGGER);
			setState(1530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1529);
				seq_of_declare_specs();
				}
				break;
			}
			setState(1533); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1532);
				timing_point_section();
				}
				}
				setState(1535); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1537);
			match(END);
			setState(1538);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(PlSqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(PlSqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(PlSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(PlSqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(PlSqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(PlSqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(PlSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PlSqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(PlSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(PlSqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTiming_point_section(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_timing_point_section);
		try {
			setState(1576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1540);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1541);
				match(STATEMENT);
				setState(1542);
				match(IS);
				setState(1543);
				trigger_block();
				setState(1544);
				match(BEFORE);
				setState(1545);
				match(STATEMENT);
				setState(1546);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1548);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1549);
				match(EACH);
				setState(1550);
				match(ROW);
				setState(1551);
				match(IS);
				setState(1552);
				trigger_block();
				setState(1553);
				match(BEFORE);
				setState(1554);
				match(EACH);
				setState(1555);
				match(ROW);
				setState(1556);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1558);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1559);
				match(STATEMENT);
				setState(1560);
				match(IS);
				setState(1561);
				trigger_block();
				setState(1562);
				match(AFTER);
				setState(1563);
				match(STATEMENT);
				setState(1564);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1566);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1567);
				match(EACH);
				setState(1568);
				match(ROW);
				setState(1569);
				match(IS);
				setState(1570);
				trigger_block();
				setState(1571);
				match(AFTER);
				setState(1572);
				match(EACH);
				setState(1573);
				match(ROW);
				setState(1574);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNon_dml_event(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_non_dml_event);
		try {
			setState(1604);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1578);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1579);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1580);
				match(ASSOCIATE);
				setState(1581);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1582);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1583);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1584);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1585);
				match(DISASSOCIATE);
				setState(1586);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1587);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1588);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1589);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1590);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1591);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1592);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1593);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1594);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1595);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1596);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1597);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1598);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1599);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1600);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1601);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1602);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1603);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_clause(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1606);
			dml_event_element();
			setState(1611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1607);
				match(OR);
				setState(1608);
				dml_event_element();
				}
				}
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1614);
			match(ON);
			setState(1616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1615);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1618);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_element(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1620);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1621);
				match(OF);
				setState(1622);
				column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_nested_clause(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1625);
			match(NESTED);
			setState(1626);
			match(TABLE);
			setState(1627);
			tableview_name();
			setState(1628);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferencing_clause(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1630);
			match(REFERENCING);
			setState(1632); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1631);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1634); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferencing_element(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1636);
			_la = _input.LA(1);
			if ( !(((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NEW - 329)) | (1L << (OLD - 329)) | (1L << (PARENT - 329)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1637);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_type(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			match(DROP);
			setState(1640);
			match(TYPE);
			setState(1642);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(1641);
				match(BODY);
				}
				break;
			}
			setState(1644);
			type_name();
			setState(1646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1645);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1648);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_type(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1650);
			match(ALTER);
			setState(1651);
			match(TYPE);
			setState(1652);
			type_name();
			setState(1658);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1653);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1654);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1655);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1656);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1657);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1660);
				dependent_handling_clause();
				}
			}

			setState(1663);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompile_type_clause(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1665);
			match(COMPILE);
			setState(1667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1666);
				match(DEBUG);
				}
				break;
			}
			setState(1670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1669);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1675);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1672);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1677);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			}
			setState(1680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1678);
				match(REUSE);
				setState(1679);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReplace_type_clause(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1682);
			match(REPLACE);
			setState(1684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1683);
				invoker_rights_clause();
				}
			}

			setState(1686);
			match(AS);
			setState(1687);
			match(OBJECT);
			setState(1688);
			match(LEFT_PAREN);
			setState(1689);
			object_member_spec();
			setState(1694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1690);
				match(COMMA);
				setState(1691);
				object_member_spec();
				}
				}
				setState(1696);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1697);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_method_spec(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1699);
			alter_method_element();
			setState(1704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1700);
				match(COMMA);
				setState(1701);
				alter_method_element();
				}
				}
				setState(1706);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_method_element(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1707);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1708);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1709);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_attribute_definition(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1712);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1713);
			match(ATTRIBUTE);
			setState(1726);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1714);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1715);
				match(LEFT_PAREN);
				setState(1716);
				attribute_definition();
				setState(1721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1717);
					match(COMMA);
					setState(1718);
					attribute_definition();
					}
					}
					setState(1723);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1724);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAttribute_definition(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1728);
			attribute_name();
			setState(1730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(1729);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_collection_clauses(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1732);
			match(MODIFY);
			setState(1738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1733);
				match(LIMIT);
				setState(1734);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1735);
				match(ELEMENT);
				setState(1736);
				match(TYPE);
				setState(1737);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDependent_handling_clause(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1740);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1741);
				match(CASCADE);
				setState(1751);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1742);
					match(CONVERT);
					setState(1743);
					match(TO);
					setState(1744);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1746);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1745);
						match(NOT);
						}
					}

					setState(1748);
					match(INCLUDING);
					setState(1749);
					match(TABLE);
					setState(1750);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				setState(1754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1753);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDependent_exceptions_part(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1758);
				match(FORCE);
				}
			}

			setState(1761);
			match(EXCEPTIONS);
			setState(1762);
			match(INTO);
			setState(1763);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_type(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1765);
			match(CREATE);
			setState(1768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1766);
				match(OR);
				setState(1767);
				match(REPLACE);
				}
			}

			setState(1770);
			match(TYPE);
			setState(1773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				setState(1771);
				type_definition();
				}
				break;
			case 2:
				{
				setState(1772);
				type_body();
				}
				break;
			}
			setState(1775);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_definition(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1777);
			type_name();
			setState(1780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1778);
				match(OID);
				setState(1779);
				match(CHAR_STRING);
				}
			}

			setState(1783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1782);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_type_def(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1785);
				invoker_rights_clause();
				}
			}

			setState(1790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1788);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1789);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1792);
				sqlj_object_type();
				}
			}

			setState(1806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1795);
				match(LEFT_PAREN);
				setState(1796);
				object_member_spec();
				setState(1801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1797);
					match(COMMA);
					setState(1798);
					object_member_spec();
					}
					}
					setState(1803);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1804);
				match(RIGHT_PAREN);
				}
			}

			setState(1811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1808);
				modifier_clause();
				}
				}
				setState(1813);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_as_part(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1814);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1818);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1815);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1816);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1817);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_under_part(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1820);
			match(UNDER);
			setState(1821);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNested_table_type_def(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1823);
			match(TABLE);
			setState(1824);
			match(OF);
			setState(1825);
			type_spec();
			setState(1828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(1826);
				match(NOT);
				setState(1827);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSqlj_object_type(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830);
			match(EXTERNAL);
			setState(1831);
			match(NAME);
			setState(1832);
			expression();
			setState(1833);
			match(LANGUAGE);
			setState(1834);
			match(JAVA);
			setState(1835);
			match(USING);
			setState(1836);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_body(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1838);
			match(BODY);
			setState(1839);
			type_name();
			setState(1840);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1842); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1841);
				type_body_elements();
				}
				}
				setState(1844); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(1846);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_body_elements(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_type_body_elements);
		try {
			setState(1850);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1848);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1849);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMap_order_func_declaration(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1852);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1853);
			match(MEMBER);
			setState(1854);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubprog_decl_in_type(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1856);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1860);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1857);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1858);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1859);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProc_decl_in_type(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			match(PROCEDURE);
			setState(1863);
			procedure_name();
			setState(1864);
			match(LEFT_PAREN);
			setState(1865);
			type_elements_parameter();
			setState(1870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1866);
				match(COMMA);
				setState(1867);
				type_elements_parameter();
				}
				}
				setState(1872);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1873);
			match(RIGHT_PAREN);
			setState(1874);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				setState(1875);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1876);
					match(DECLARE);
					}
				}

				setState(1880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(1879);
					seq_of_declare_specs();
					}
				}

				setState(1882);
				body();
				setState(1883);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunc_decl_in_type(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1887);
			match(FUNCTION);
			setState(1888);
			function_name();
			setState(1900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1889);
				match(LEFT_PAREN);
				setState(1890);
				type_elements_parameter();
				setState(1895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1891);
					match(COMMA);
					setState(1892);
					type_elements_parameter();
					}
					}
					setState(1897);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1898);
				match(RIGHT_PAREN);
				}
			}

			setState(1902);
			match(RETURN);
			setState(1903);
			type_spec();
			setState(1904);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				setState(1905);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1906);
					match(DECLARE);
					}
				}

				setState(1910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(1909);
					seq_of_declare_specs();
					}
				}

				setState(1912);
				body();
				setState(1913);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstructor_declaration(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1917);
				match(FINAL);
				}
			}

			setState(1921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1920);
				match(INSTANTIABLE);
				}
			}

			setState(1923);
			match(CONSTRUCTOR);
			setState(1924);
			match(FUNCTION);
			setState(1925);
			type_spec();
			setState(1943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1926);
				match(LEFT_PAREN);
				{
				setState(1927);
				match(SELF);
				setState(1928);
				match(IN);
				setState(1929);
				match(OUT);
				setState(1930);
				type_spec();
				setState(1931);
				match(COMMA);
				}
				setState(1933);
				type_elements_parameter();
				setState(1938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1934);
					match(COMMA);
					setState(1935);
					type_elements_parameter();
					}
					}
					setState(1940);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1941);
				match(RIGHT_PAREN);
				}
			}

			setState(1945);
			match(RETURN);
			setState(1946);
			match(SELF);
			setState(1947);
			match(AS);
			setState(1948);
			match(RESULT);
			setState(1949);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				setState(1950);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1951);
					match(DECLARE);
					}
				}

				setState(1955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(1954);
					seq_of_declare_specs();
					}
				}

				setState(1957);
				body();
				setState(1958);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModifier_clause(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1962);
				match(NOT);
				}
			}

			setState(1965);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_member_spec(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_object_member_spec);
		int _la;
		try {
			setState(1973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1967);
				identifier();
				setState(1968);
				type_spec();
				setState(1970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1969);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1972);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSqlj_object_type_attr(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1975);
			match(EXTERNAL);
			setState(1976);
			match(NAME);
			setState(1977);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElement_spec(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1979);
				modifier_clause();
				}
				break;
			}
			setState(1983); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1982);
				element_spec_options();
				}
				}
				setState(1985); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(1989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(1987);
				match(COMMA);
				setState(1988);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElement_spec_options(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_element_spec_options);
		try {
			setState(1994);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1991);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1992);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1993);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubprogram_spec(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1996);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1999);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1997);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1998);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_procedure_spec(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2001);
			match(PROCEDURE);
			setState(2002);
			procedure_name();
			setState(2003);
			match(LEFT_PAREN);
			setState(2004);
			type_elements_parameter();
			setState(2009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2005);
				match(COMMA);
				setState(2006);
				type_elements_parameter();
				}
				}
				setState(2011);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2012);
			match(RIGHT_PAREN);
			setState(2015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2013);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2014);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_function_spec(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2017);
			match(FUNCTION);
			setState(2018);
			function_name();
			setState(2030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2019);
				match(LEFT_PAREN);
				setState(2020);
				type_elements_parameter();
				setState(2025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2021);
					match(COMMA);
					setState(2022);
					type_elements_parameter();
					}
					}
					setState(2027);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2028);
				match(RIGHT_PAREN);
				}
			}

			setState(2032);
			match(RETURN);
			setState(2037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(2033);
				type_spec();
				}
				break;
			case 2:
				{
				setState(2034);
				match(SELF);
				setState(2035);
				match(AS);
				setState(2036);
				match(RESULT);
				}
				break;
			}
			setState(2047);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2039);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2040);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(2041);
				match(EXTERNAL);
				setState(2043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(2042);
					match(VARIABLE);
					}
				}

				setState(2045);
				match(NAME);
				setState(2046);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstructor_spec(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2049);
				match(FINAL);
				}
			}

			setState(2053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2052);
				match(INSTANTIABLE);
				}
			}

			setState(2055);
			match(CONSTRUCTOR);
			setState(2056);
			match(FUNCTION);
			setState(2057);
			type_spec();
			setState(2075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2058);
				match(LEFT_PAREN);
				{
				setState(2059);
				match(SELF);
				setState(2060);
				match(IN);
				setState(2061);
				match(OUT);
				setState(2062);
				type_spec();
				setState(2063);
				match(COMMA);
				}
				setState(2065);
				type_elements_parameter();
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2066);
					match(COMMA);
					setState(2067);
					type_elements_parameter();
					}
					}
					setState(2072);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2073);
				match(RIGHT_PAREN);
				}
			}

			setState(2077);
			match(RETURN);
			setState(2078);
			match(SELF);
			setState(2079);
			match(AS);
			setState(2080);
			match(RESULT);
			setState(2083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2081);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2082);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMap_order_function_spec(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2085);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2086);
			match(MEMBER);
			setState(2087);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_clause(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2089);
			match(PRAGMA);
			setState(2090);
			match(RESTRICT_REFERENCES);
			setState(2091);
			match(LEFT_PAREN);
			setState(2092);
			pragma_elements();
			setState(2097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2093);
				match(COMMA);
				setState(2094);
				pragma_elements();
				}
				}
				setState(2099);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2100);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_elements(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_pragma_elements);
		try {
			setState(2104);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2102);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2103);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_elements_parameter(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2106);
			parameter_name();
			setState(2107);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_sequence(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2109);
			match(DROP);
			setState(2110);
			match(SEQUENCE);
			setState(2111);
			sequence_name();
			setState(2112);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_sequence(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2114);
			match(ALTER);
			setState(2115);
			match(SEQUENCE);
			setState(2116);
			sequence_name();
			setState(2118); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2117);
				sequence_spec();
				}
				}
				setState(2120); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (MAXVALUE - 301)) | (1L << (MINVALUE - 301)) | (1L << (NOCACHE - 301)) | (1L << (NOCYCLE - 301)) | (1L << (NOMAXVALUE - 301)) | (1L << (NOMINVALUE - 301)) | (1L << (NOORDER - 301)))) != 0) || _la==ORDER );
			setState(2122);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_sequence(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			match(CREATE);
			setState(2125);
			match(SEQUENCE);
			setState(2126);
			sequence_name();
			setState(2131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (MAXVALUE - 301)) | (1L << (MINVALUE - 301)) | (1L << (NOCACHE - 301)) | (1L << (NOCYCLE - 301)) | (1L << (NOMAXVALUE - 301)) | (1L << (NOMINVALUE - 301)) | (1L << (NOORDER - 301)))) != 0) || _la==ORDER || _la==START) {
				{
				setState(2129);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(2127);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(2128);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2133);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2134);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_spec(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_sequence_spec);
		try {
			setState(2152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2136);
				match(INCREMENT);
				setState(2137);
				match(BY);
				setState(2138);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2139);
				match(MAXVALUE);
				setState(2140);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2141);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2142);
				match(MINVALUE);
				setState(2143);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2144);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2145);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2146);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2147);
				match(CACHE);
				setState(2148);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2149);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2150);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2151);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_start_clause(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2154);
			match(START);
			setState(2155);
			match(WITH);
			setState(2156);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(PlSqlParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_index(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2158);
			match(CREATE);
			setState(2160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2159);
				match(UNIQUE);
				}
			}

			setState(2162);
			match(INDEX);
			setState(2163);
			index_name();
			setState(2164);
			match(ON);
			setState(2165);
			tableview_name();
			setState(2166);
			paren_column_list();
			setState(2169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2167);
				match(TABLESPACE);
				setState(2168);
				id_expression();
				}
			}

			setState(2173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPUTE) {
				{
				setState(2171);
				match(COMPUTE);
				setState(2172);
				match(STATISTICS);
				}
			}

			setState(2175);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_indexContext extends ParserRuleContext {
		public Index_nameContext old_index_name;
		public Index_nameContext new_index_name;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<Index_nameContext> index_name() {
			return getRuleContexts(Index_nameContext.class);
		}
		public Index_nameContext index_name(int i) {
			return getRuleContext(Index_nameContext.class,i);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_index(this);
		}
	}

	public final Alter_indexContext alter_index() throws RecognitionException {
		Alter_indexContext _localctx = new Alter_indexContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_alter_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2177);
			match(ALTER);
			setState(2178);
			match(INDEX);
			setState(2179);
			((Alter_indexContext)_localctx).old_index_name = index_name();
			setState(2180);
			match(RENAME);
			setState(2181);
			match(TO);
			setState(2182);
			((Alter_indexContext)_localctx).new_index_name = index_name();
			setState(2183);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public User_object_nameContext user_object_name() {
			return getRuleContext(User_object_nameContext.class,0);
		}
		public List<Identified_byContext> identified_by() {
			return getRuleContexts(Identified_byContext.class);
		}
		public Identified_byContext identified_by(int i) {
			return getRuleContext(Identified_byContext.class,i);
		}
		public List<Identified_other_clauseContext> identified_other_clause() {
			return getRuleContexts(Identified_other_clauseContext.class);
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return getRuleContext(Identified_other_clauseContext.class,i);
		}
		public List<User_tablespace_clauseContext> user_tablespace_clause() {
			return getRuleContexts(User_tablespace_clauseContext.class);
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return getRuleContext(User_tablespace_clauseContext.class,i);
		}
		public List<Quota_clauseContext> quota_clause() {
			return getRuleContexts(Quota_clauseContext.class);
		}
		public Quota_clauseContext quota_clause(int i) {
			return getRuleContext(Quota_clauseContext.class,i);
		}
		public List<Profile_clauseContext> profile_clause() {
			return getRuleContexts(Profile_clauseContext.class);
		}
		public Profile_clauseContext profile_clause(int i) {
			return getRuleContext(Profile_clauseContext.class,i);
		}
		public List<Password_expire_clauseContext> password_expire_clause() {
			return getRuleContexts(Password_expire_clauseContext.class);
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return getRuleContext(Password_expire_clauseContext.class,i);
		}
		public List<User_lock_clauseContext> user_lock_clause() {
			return getRuleContexts(User_lock_clauseContext.class);
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return getRuleContext(User_lock_clauseContext.class,i);
		}
		public List<User_editions_clauseContext> user_editions_clause() {
			return getRuleContexts(User_editions_clauseContext.class);
		}
		public User_editions_clauseContext user_editions_clause(int i) {
			return getRuleContext(User_editions_clauseContext.class,i);
		}
		public List<Container_clauseContext> container_clause() {
			return getRuleContexts(Container_clauseContext.class);
		}
		public Container_clauseContext container_clause(int i) {
			return getRuleContext(Container_clauseContext.class,i);
		}
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_user(this);
		}
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2185);
			match(CREATE);
			setState(2186);
			match(USER);
			setState(2187);
			user_object_name();
			setState(2197); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(2188);
					identified_by();
					}
					break;
				case 2:
					{
					setState(2189);
					identified_other_clause();
					}
					break;
				case 3:
					{
					setState(2190);
					user_tablespace_clause();
					}
					break;
				case 4:
					{
					setState(2191);
					quota_clause();
					}
					break;
				case 5:
					{
					setState(2192);
					profile_clause();
					}
					break;
				case 6:
					{
					setState(2193);
					password_expire_clause();
					}
					break;
				case 7:
					{
					setState(2194);
					user_lock_clause();
					}
					break;
				case 8:
					{
					setState(2195);
					user_editions_clause();
					}
					break;
				case 9:
					{
					setState(2196);
					container_clause();
					}
					break;
				}
				}
				setState(2199); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ACCOUNT || _la==CONTAINER || _la==DEFAULT || _la==ENABLE || _la==IDENTIFIED || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PASSWORD - 387)) | (1L << (PROFILE - 387)) | (1L << (QUOTA - 387)))) != 0) || _la==TEMPORARY );
			setState(2201);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public List<User_object_nameContext> user_object_name() {
			return getRuleContexts(User_object_nameContext.class);
		}
		public User_object_nameContext user_object_name(int i) {
			return getRuleContext(User_object_nameContext.class,i);
		}
		public List<Alter_identified_byContext> alter_identified_by() {
			return getRuleContexts(Alter_identified_byContext.class);
		}
		public Alter_identified_byContext alter_identified_by(int i) {
			return getRuleContext(Alter_identified_byContext.class,i);
		}
		public List<Identified_other_clauseContext> identified_other_clause() {
			return getRuleContexts(Identified_other_clauseContext.class);
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return getRuleContext(Identified_other_clauseContext.class,i);
		}
		public List<User_tablespace_clauseContext> user_tablespace_clause() {
			return getRuleContexts(User_tablespace_clauseContext.class);
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return getRuleContext(User_tablespace_clauseContext.class,i);
		}
		public List<Quota_clauseContext> quota_clause() {
			return getRuleContexts(Quota_clauseContext.class);
		}
		public Quota_clauseContext quota_clause(int i) {
			return getRuleContext(Quota_clauseContext.class,i);
		}
		public List<Profile_clauseContext> profile_clause() {
			return getRuleContexts(Profile_clauseContext.class);
		}
		public Profile_clauseContext profile_clause(int i) {
			return getRuleContext(Profile_clauseContext.class,i);
		}
		public List<User_default_role_clauseContext> user_default_role_clause() {
			return getRuleContexts(User_default_role_clauseContext.class);
		}
		public User_default_role_clauseContext user_default_role_clause(int i) {
			return getRuleContext(User_default_role_clauseContext.class,i);
		}
		public List<Password_expire_clauseContext> password_expire_clause() {
			return getRuleContexts(Password_expire_clauseContext.class);
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return getRuleContext(Password_expire_clauseContext.class,i);
		}
		public List<User_lock_clauseContext> user_lock_clause() {
			return getRuleContexts(User_lock_clauseContext.class);
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return getRuleContext(User_lock_clauseContext.class,i);
		}
		public List<Alter_user_editions_clauseContext> alter_user_editions_clause() {
			return getRuleContexts(Alter_user_editions_clauseContext.class);
		}
		public Alter_user_editions_clauseContext alter_user_editions_clause(int i) {
			return getRuleContext(Alter_user_editions_clauseContext.class,i);
		}
		public List<Container_clauseContext> container_clause() {
			return getRuleContexts(Container_clauseContext.class);
		}
		public Container_clauseContext container_clause(int i) {
			return getRuleContext(Container_clauseContext.class,i);
		}
		public List<Container_data_clauseContext> container_data_clause() {
			return getRuleContexts(Container_data_clauseContext.class);
		}
		public Container_data_clauseContext container_data_clause(int i) {
			return getRuleContext(Container_data_clauseContext.class,i);
		}
		public Proxy_clauseContext proxy_clause() {
			return getRuleContext(Proxy_clauseContext.class,0);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_user(this);
		}
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_alter_user);
		int _la;
		try {
			setState(2234);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2203);
				match(ALTER);
				setState(2204);
				match(USER);
				setState(2205);
				user_object_name();
				setState(2217); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2217);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
					case 1:
						{
						setState(2206);
						alter_identified_by();
						}
						break;
					case 2:
						{
						setState(2207);
						identified_other_clause();
						}
						break;
					case 3:
						{
						setState(2208);
						user_tablespace_clause();
						}
						break;
					case 4:
						{
						setState(2209);
						quota_clause();
						}
						break;
					case 5:
						{
						setState(2210);
						profile_clause();
						}
						break;
					case 6:
						{
						setState(2211);
						user_default_role_clause();
						}
						break;
					case 7:
						{
						setState(2212);
						password_expire_clause();
						}
						break;
					case 8:
						{
						setState(2213);
						user_lock_clause();
						}
						break;
					case 9:
						{
						setState(2214);
						alter_user_editions_clause();
						}
						break;
					case 10:
						{
						setState(2215);
						container_clause();
						}
						break;
					case 11:
						{
						setState(2216);
						container_data_clause();
						}
						break;
					}
					}
					setState(2219); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ACCOUNT || _la==ADD || _la==CONTAINER || _la==DEFAULT || _la==ENABLE || _la==IDENTIFIED || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (PASSWORD - 387)) | (1L << (PROFILE - 387)) | (1L << (QUOTA - 387)) | (1L << (REMOVE - 387)))) != 0) || _la==SET || _la==TEMPORARY );
				setState(2221);
				match(SEMICOLON);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2227); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2224);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2223);
						match(COMMA);
						}
					}

					setState(2226);
					user_object_name();
					}
					}
					setState(2229); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				setState(2231);
				proxy_clause();
				setState(2232);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_identified_byContext extends ParserRuleContext {
		public Identified_byContext identified_by() {
			return getRuleContext(Identified_byContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Alter_identified_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identified_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_identified_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_identified_by(this);
		}
	}

	public final Alter_identified_byContext alter_identified_by() throws RecognitionException {
		Alter_identified_byContext _localctx = new Alter_identified_byContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_alter_identified_by);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2236);
			identified_by();
			setState(2239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACE) {
				{
				setState(2237);
				match(REPLACE);
				setState(2238);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identified_byContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED() { return getToken(PlSqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Identified_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identified_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentified_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentified_by(this);
		}
	}

	public final Identified_byContext identified_by() throws RecognitionException {
		Identified_byContext _localctx = new Identified_byContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_identified_by);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2241);
			match(IDENTIFIED);
			setState(2242);
			match(BY);
			setState(2243);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identified_other_clauseContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED() { return getToken(PlSqlParser.IDENTIFIED, 0); }
		public TerminalNode EXTERNALLY() { return getToken(PlSqlParser.EXTERNALLY, 0); }
		public TerminalNode GLOBALLY() { return getToken(PlSqlParser.GLOBALLY, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Identified_other_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identified_other_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentified_other_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentified_other_clause(this);
		}
	}

	public final Identified_other_clauseContext identified_other_clause() throws RecognitionException {
		Identified_other_clauseContext _localctx = new Identified_other_clauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_identified_other_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			match(IDENTIFIED);
			setState(2246);
			_la = _input.LA(1);
			if ( !(_la==EXTERNALLY || _la==GLOBALLY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2249);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2247);
				match(AS);
				setState(2248);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_tablespace_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public User_tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_tablespace_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUser_tablespace_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUser_tablespace_clause(this);
		}
	}

	public final User_tablespace_clauseContext user_tablespace_clause() throws RecognitionException {
		User_tablespace_clauseContext _localctx = new User_tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_user_tablespace_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2251);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2252);
			match(TABLESPACE);
			setState(2253);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quota_clauseContext extends ParserRuleContext {
		public TerminalNode QUOTA() { return getToken(PlSqlParser.QUOTA, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public Quota_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quota_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuota_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuota_clause(this);
		}
	}

	public final Quota_clauseContext quota_clause() throws RecognitionException {
		Quota_clauseContext _localctx = new Quota_clauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_quota_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2255);
			match(QUOTA);
			setState(2258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
				{
				setState(2256);
				size_clause();
				}
				break;
			case UNLIMITED:
				{
				setState(2257);
				match(UNLIMITED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2260);
			match(ON);
			setState(2261);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Profile_clauseContext extends ParserRuleContext {
		public TerminalNode PROFILE() { return getToken(PlSqlParser.PROFILE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Profile_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profile_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProfile_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProfile_clause(this);
		}
	}

	public final Profile_clauseContext profile_clause() throws RecognitionException {
		Profile_clauseContext _localctx = new Profile_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_profile_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2263);
			match(PROFILE);
			setState(2264);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_clauseContext extends ParserRuleContext {
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<TerminalNode> EXCEPT() { return getTokens(PlSqlParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(PlSqlParser.EXCEPT, i);
		}
		public Role_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRole_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRole_clause(this);
		}
	}

	public final Role_clauseContext role_clause() throws RecognitionException {
		Role_clauseContext _localctx = new Role_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_role_clause);
		int _la;
		try {
			int _alt;
			setState(2289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONNECT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2270); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2267);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2266);
							match(COMMA);
							}
						}

						setState(2269);
						role_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2272); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,193,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2274);
				match(ALL);
				setState(2286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCEPT) {
					{
					{
					setState(2275);
					match(EXCEPT);
					setState(2280); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2277);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2276);
								match(COMMA);
								}
							}

							setState(2279);
							role_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2282); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,195,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(2288);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_default_role_clauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(PlSqlParser.ROLE, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public Role_clauseContext role_clause() {
			return getRuleContext(Role_clauseContext.class,0);
		}
		public User_default_role_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_default_role_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUser_default_role_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUser_default_role_clause(this);
		}
	}

	public final User_default_role_clauseContext user_default_role_clause() throws RecognitionException {
		User_default_role_clauseContext _localctx = new User_default_role_clauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_user_default_role_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2291);
			match(DEFAULT);
			setState(2292);
			match(ROLE);
			setState(2295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2293);
				match(NONE);
				}
				break;
			case 2:
				{
				setState(2294);
				role_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Password_expire_clauseContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PlSqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(PlSqlParser.EXPIRE, 0); }
		public Password_expire_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_password_expire_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPassword_expire_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPassword_expire_clause(this);
		}
	}

	public final Password_expire_clauseContext password_expire_clause() throws RecognitionException {
		Password_expire_clauseContext _localctx = new Password_expire_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_password_expire_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2297);
			match(PASSWORD);
			setState(2298);
			match(EXPIRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_lock_clauseContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(PlSqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(PlSqlParser.UNLOCK, 0); }
		public User_lock_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_lock_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUser_lock_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUser_lock_clause(this);
		}
	}

	public final User_lock_clauseContext user_lock_clause() throws RecognitionException {
		User_lock_clauseContext _localctx = new User_lock_clauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_user_lock_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2300);
			match(ACCOUNT);
			setState(2301);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_editions_clauseContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode EDITIONS() { return getToken(PlSqlParser.EDITIONS, 0); }
		public User_editions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_editions_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUser_editions_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUser_editions_clause(this);
		}
	}

	public final User_editions_clauseContext user_editions_clause() throws RecognitionException {
		User_editions_clauseContext _localctx = new User_editions_clauseContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_user_editions_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2303);
			match(ENABLE);
			setState(2304);
			match(EDITIONS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_editions_clauseContext extends ParserRuleContext {
		public User_editions_clauseContext user_editions_clause() {
			return getRuleContext(User_editions_clauseContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public Alter_user_editions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_editions_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_user_editions_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_user_editions_clause(this);
		}
	}

	public final Alter_user_editions_clauseContext alter_user_editions_clause() throws RecognitionException {
		Alter_user_editions_clauseContext _localctx = new Alter_user_editions_clauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_alter_user_editions_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2306);
			user_editions_clause();
			setState(2316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2307);
				match(FOR);
				setState(2312); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2309);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2308);
							match(COMMA);
							}
						}

						setState(2311);
						regular_id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2314); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,200,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(2319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(2318);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proxy_clauseContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode THROUGH() { return getToken(PlSqlParser.THROUGH, 0); }
		public TerminalNode ENTERPRISE() { return getToken(PlSqlParser.ENTERPRISE, 0); }
		public TerminalNode USERS() { return getToken(PlSqlParser.USERS, 0); }
		public User_object_nameContext user_object_name() {
			return getRuleContext(User_object_nameContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(PlSqlParser.AUTHENTICATION, 0); }
		public TerminalNode REQUIRED() { return getToken(PlSqlParser.REQUIRED, 0); }
		public TerminalNode AUTHENTICATED() { return getToken(PlSqlParser.AUTHENTICATED, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode ROLES() { return getToken(PlSqlParser.ROLES, 0); }
		public TerminalNode ROLE() { return getToken(PlSqlParser.ROLE, 0); }
		public Role_clauseContext role_clause() {
			return getRuleContext(Role_clauseContext.class,0);
		}
		public TerminalNode PASSWORD() { return getToken(PlSqlParser.PASSWORD, 0); }
		public TerminalNode CERTIFICATE() { return getToken(PlSqlParser.CERTIFICATE, 0); }
		public TerminalNode DISTINGUISHED() { return getToken(PlSqlParser.DISTINGUISHED, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public Proxy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proxy_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProxy_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProxy_clause(this);
		}
	}

	public final Proxy_clauseContext proxy_clause() throws RecognitionException {
		Proxy_clauseContext _localctx = new Proxy_clauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_proxy_clause);
		int _la;
		try {
			setState(2360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REVOKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2321);
				match(REVOKE);
				setState(2322);
				match(CONNECT);
				setState(2323);
				match(THROUGH);
				setState(2327);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ENTERPRISE:
					{
					setState(2324);
					match(ENTERPRISE);
					setState(2325);
					match(USERS);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(2326);
					user_object_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2329);
				match(GRANT);
				setState(2330);
				match(CONNECT);
				setState(2331);
				match(THROUGH);
				setState(2358);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ENTERPRISE:
					{
					setState(2332);
					match(ENTERPRISE);
					setState(2333);
					match(USERS);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(2334);
					user_object_name();
					setState(2342);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2335);
						match(WITH);
						setState(2340);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NO:
							{
							setState(2336);
							match(NO);
							setState(2337);
							match(ROLES);
							}
							break;
						case ROLE:
							{
							setState(2338);
							match(ROLE);
							setState(2339);
							role_clause();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(2346);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AUTHENTICATION) {
						{
						setState(2344);
						match(AUTHENTICATION);
						setState(2345);
						match(REQUIRED);
						}
					}

					setState(2356);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AUTHENTICATED) {
						{
						setState(2348);
						match(AUTHENTICATED);
						setState(2349);
						match(USING);
						setState(2354);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PASSWORD:
							{
							setState(2350);
							match(PASSWORD);
							}
							break;
						case CERTIFICATE:
							{
							setState(2351);
							match(CERTIFICATE);
							}
							break;
						case DISTINGUISHED:
							{
							setState(2352);
							match(DISTINGUISHED);
							setState(2353);
							match(NAME);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Container_namesContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Container_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_container_names; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterContainer_names(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitContainer_names(this);
		}
	}

	public final Container_namesContext container_names() throws RecognitionException {
		Container_namesContext _localctx = new Container_namesContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_container_names);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2362);
			match(LEFT_PAREN);
			setState(2367); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2363);
					match(COMMA);
					}
				}

				setState(2366);
				id_expression();
				}
				}
				setState(2369); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(2371);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_container_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode CONTAINER_DATA() { return getToken(PlSqlParser.CONTAINER_DATA, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Container_namesContext container_names() {
			return getRuleContext(Container_namesContext.class,0);
		}
		public Set_container_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_container_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_container_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_container_data(this);
		}
	}

	public final Set_container_dataContext set_container_data() throws RecognitionException {
		Set_container_dataContext _localctx = new Set_container_dataContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_set_container_data);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2373);
			match(SET);
			setState(2374);
			match(CONTAINER_DATA);
			setState(2375);
			match(EQUALS_OP);
			setState(2379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2376);
				match(ALL);
				}
				break;
			case DEFAULT:
				{
				setState(2377);
				match(DEFAULT);
				}
				break;
			case LEFT_PAREN:
				{
				setState(2378);
				container_names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_rem_container_dataContext extends ParserRuleContext {
		public TerminalNode CONTAINER_DATA() { return getToken(PlSqlParser.CONTAINER_DATA, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public Container_namesContext container_names() {
			return getRuleContext(Container_namesContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode REMOVE() { return getToken(PlSqlParser.REMOVE, 0); }
		public Add_rem_container_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_rem_container_data; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAdd_rem_container_data(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAdd_rem_container_data(this);
		}
	}

	public final Add_rem_container_dataContext add_rem_container_data() throws RecognitionException {
		Add_rem_container_dataContext _localctx = new Add_rem_container_dataContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_add_rem_container_data);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2381);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==REMOVE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2382);
			match(CONTAINER_DATA);
			setState(2383);
			match(EQUALS_OP);
			setState(2384);
			container_names();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Container_data_clauseContext extends ParserRuleContext {
		public Set_container_dataContext set_container_data() {
			return getRuleContext(Set_container_dataContext.class,0);
		}
		public Add_rem_container_dataContext add_rem_container_data() {
			return getRuleContext(Add_rem_container_dataContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Container_tableview_nameContext container_tableview_name() {
			return getRuleContext(Container_tableview_nameContext.class,0);
		}
		public Container_data_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_container_data_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterContainer_data_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitContainer_data_clause(this);
		}
	}

	public final Container_data_clauseContext container_data_clause() throws RecognitionException {
		Container_data_clauseContext _localctx = new Container_data_clauseContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_container_data_clause);
		int _la;
		try {
			setState(2392);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2386);
				set_container_data();
				}
				break;
			case ADD:
			case REMOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2387);
				add_rem_container_data();
				setState(2390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2388);
					match(FOR);
					setState(2389);
					container_tableview_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_index(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2394);
			match(DROP);
			setState(2395);
			match(INDEX);
			setState(2396);
			index_name();
			setState(2397);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_statementContext extends ParserRuleContext {
		public List<TerminalNode> GRANT() { return getTokens(PlSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(PlSqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Grant_object_nameContext grant_object_name() {
			return getRuleContext(Grant_object_nameContext.class,0);
		}
		public List<Grantee_nameContext> grantee_name() {
			return getRuleContexts(Grantee_nameContext.class);
		}
		public Grantee_nameContext grantee_name(int i) {
			return getRuleContext(Grantee_nameContext.class,i);
		}
		public List<TerminalNode> PUBLIC() { return getTokens(PlSqlParser.PUBLIC); }
		public TerminalNode PUBLIC(int i) {
			return getToken(PlSqlParser.PUBLIC, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PlSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PlSqlParser.WITH, i);
		}
		public List<TerminalNode> OPTION() { return getTokens(PlSqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(PlSqlParser.OPTION, i);
		}
		public TerminalNode HIERARCHY() { return getToken(PlSqlParser.HIERARCHY, 0); }
		public Container_clauseContext container_clause() {
			return getRuleContext(Container_clauseContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PlSqlParser.ADMIN, 0); }
		public TerminalNode DELEGATE() { return getToken(PlSqlParser.DELEGATE, 0); }
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public List<System_privilegeContext> system_privilege() {
			return getRuleContexts(System_privilegeContext.class);
		}
		public System_privilegeContext system_privilege(int i) {
			return getRuleContext(System_privilegeContext.class,i);
		}
		public List<Object_privilegeContext> object_privilege() {
			return getRuleContexts(Object_privilegeContext.class);
		}
		public Object_privilegeContext object_privilege(int i) {
			return getRuleContext(Object_privilegeContext.class,i);
		}
		public List<Paren_column_listContext> paren_column_list() {
			return getRuleContexts(Paren_column_listContext.class);
		}
		public Paren_column_listContext paren_column_list(int i) {
			return getRuleContext(Paren_column_listContext.class,i);
		}
		public Grant_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrant_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrant_statement(this);
		}
	}

	public final Grant_statementContext grant_statement() throws RecognitionException {
		Grant_statementContext _localctx = new Grant_statementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_grant_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2399);
			match(GRANT);
			setState(2411); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2401);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2400);
						match(COMMA);
						}
					}

					setState(2409);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
					case 1:
						{
						setState(2403);
						role_name();
						}
						break;
					case 2:
						{
						setState(2404);
						system_privilege();
						}
						break;
					case 3:
						{
						setState(2405);
						object_privilege();
						setState(2407);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==LEFT_PAREN) {
							{
							setState(2406);
							paren_column_list();
							}
						}

						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2413); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2415);
				match(ON);
				setState(2416);
				grant_object_name();
				}
			}

			setState(2419);
			match(TO);
			setState(2425); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2425);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case REGULAR_ID:
					{
					setState(2421);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2420);
						match(COMMA);
						}
					}

					setState(2423);
					grantee_name();
					}
					break;
				case PUBLIC:
					{
					setState(2424);
					match(PUBLIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2427); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (PUBLIC - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(2432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(2429);
				match(WITH);
				setState(2430);
				_la = _input.LA(1);
				if ( !(_la==ADMIN || _la==DELEGATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2431);
				match(OPTION);
				}
				break;
			}
			setState(2437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2434);
				match(WITH);
				setState(2435);
				match(HIERARCHY);
				setState(2436);
				match(OPTION);
				}
				break;
			}
			setState(2442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2439);
				match(WITH);
				setState(2440);
				match(GRANT);
				setState(2441);
				match(OPTION);
				}
			}

			setState(2445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINER) {
				{
				setState(2444);
				container_clause();
				}
			}

			setState(2447);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Container_clauseContext extends ParserRuleContext {
		public TerminalNode CONTAINER() { return getToken(PlSqlParser.CONTAINER, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Container_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_container_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterContainer_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitContainer_clause(this);
		}
	}

	public final Container_clauseContext container_clause() throws RecognitionException {
		Container_clauseContext _localctx = new Container_clauseContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_container_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2449);
			match(CONTAINER);
			setState(2450);
			match(EQUALS_OP);
			setState(2451);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==CURRENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(PlSqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode EDITIONING() { return getToken(PlSqlParser.EDITIONING, 0); }
		public View_optionsContext view_options() {
			return getRuleContext(View_optionsContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_view(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2453);
			match(CREATE);
			setState(2456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2454);
				match(OR);
				setState(2455);
				match(REPLACE);
				}
				break;
			}
			setState(2462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==OR) {
				{
				setState(2459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2458);
					match(OR);
					}
				}

				setState(2461);
				match(FORCE);
				}
			}

			setState(2465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EDITIONING) {
				{
				setState(2464);
				match(EDITIONING);
				}
			}

			setState(2467);
			match(VIEW);
			setState(2468);
			tableview_name();
			setState(2470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF || _la==LEFT_PAREN) {
				{
				setState(2469);
				view_options();
				}
			}

			setState(2472);
			match(AS);
			setState(2473);
			subquery();
			setState(2475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				setState(2474);
				subquery_restriction_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_optionsContext extends ParserRuleContext {
		public View_alias_constraintContext view_alias_constraint() {
			return getRuleContext(View_alias_constraintContext.class,0);
		}
		public Object_view_clauseContext object_view_clause() {
			return getRuleContext(Object_view_clauseContext.class,0);
		}
		public View_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterView_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitView_options(this);
		}
	}

	public final View_optionsContext view_options() throws RecognitionException {
		View_optionsContext _localctx = new View_optionsContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_view_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(2477);
				view_alias_constraint();
				}
				break;
			case OF:
				{
				setState(2478);
				object_view_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_alias_constraintContext extends ParserRuleContext {
		public List<Table_aliasContext> table_alias() {
			return getRuleContexts(Table_aliasContext.class);
		}
		public Table_aliasContext table_alias(int i) {
			return getRuleContext(Table_aliasContext.class,i);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public View_alias_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_alias_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterView_alias_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitView_alias_constraint(this);
		}
	}

	public final View_alias_constraintContext view_alias_constraint() throws RecognitionException {
		View_alias_constraintContext _localctx = new View_alias_constraintContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_view_alias_constraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2481);
			match(LEFT_PAREN);
			setState(2495); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2482);
					match(COMMA);
					}
				}

				setState(2493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
				case 1:
					{
					setState(2485);
					table_alias();
					setState(2489);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,236,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2486);
							inline_constraint();
							}
							} 
						}
						setState(2491);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,236,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(2492);
					out_of_line_constraint();
					}
					break;
				}
				}
				}
				setState(2497); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHECK - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FOREIGN - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIMARY - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNIQUE - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(2499);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_view_clauseContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IDENTIFIER() { return getToken(PlSqlParser.IDENTIFIER, 0); }
		public TerminalNode ID() { return getToken(PlSqlParser.ID, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public List<TerminalNode> REGULAR_ID() { return getTokens(PlSqlParser.REGULAR_ID); }
		public TerminalNode REGULAR_ID(int i) {
			return getToken(PlSqlParser.REGULAR_ID, i);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Object_view_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_view_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_view_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_view_clause(this);
		}
	}

	public final Object_view_clauseContext object_view_clause() throws RecognitionException {
		Object_view_clauseContext _localctx = new Object_view_clauseContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_object_view_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			match(OF);
			setState(2502);
			type_name();
			setState(2521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(2503);
				match(WITH);
				setState(2504);
				match(OBJECT);
				setState(2505);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER || _la==ID || _la==OID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2517);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(2506);
					match(DEFAULT);
					}
					break;
				case LEFT_PAREN:
					{
					setState(2507);
					match(LEFT_PAREN);
					setState(2512); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2509);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2508);
							match(COMMA);
							}
						}

						setState(2511);
						match(REGULAR_ID);
						}
						}
						setState(2514); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMMA || _la==REGULAR_ID );
					setState(2516);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case UNDER:
				{
				setState(2519);
				match(UNDER);
				setState(2520);
				tableview_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LEFT_PAREN) {
				{
				{
				setState(2523);
				match(LEFT_PAREN);
				setState(2532); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2524);
						match(COMMA);
						}
					}

					setState(2530);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHECK:
					case CONSTRAINT:
					case FOREIGN:
					case PRIMARY:
					case UNIQUE:
						{
						setState(2527);
						out_of_line_constraint();
						}
						break;
					case REGULAR_ID:
						{
						setState(2528);
						match(REGULAR_ID);
						setState(2529);
						inline_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2534); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE || _la==COMMA || _la==REGULAR_ID );
				setState(2536);
				match(RIGHT_PAREN);
				}
				}
				setState(2542);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inline_constraintContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(PlSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public Check_constraintContext check_constraint() {
			return getRuleContext(Check_constraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInline_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInline_constraint(this);
		}
	}

	public final Inline_constraintContext inline_constraint() throws RecognitionException {
		Inline_constraintContext _localctx = new Inline_constraintContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_inline_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2543);
				match(CONSTRAINT);
				setState(2544);
				constraint_name();
				}
			}

			setState(2556);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(2548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2547);
					match(NOT);
					}
				}

				setState(2550);
				match(NULL);
				}
				break;
			case UNIQUE:
				{
				setState(2551);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				setState(2552);
				match(PRIMARY);
				setState(2553);
				match(KEY);
				}
				break;
			case REFERENCES:
				{
				setState(2554);
				references_clause();
				}
				break;
			case CHECK:
				{
				setState(2555);
				check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				{
				setState(2558);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_constraintContext extends ParserRuleContext {
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public List<Primary_key_clauseContext> primary_key_clause() {
			return getRuleContexts(Primary_key_clauseContext.class);
		}
		public Primary_key_clauseContext primary_key_clause(int i) {
			return getRuleContext(Primary_key_clauseContext.class,i);
		}
		public List<Foreign_key_clauseContext> foreign_key_clause() {
			return getRuleContexts(Foreign_key_clauseContext.class);
		}
		public Foreign_key_clauseContext foreign_key_clause(int i) {
			return getRuleContext(Foreign_key_clauseContext.class,i);
		}
		public List<Unique_key_clauseContext> unique_key_clause() {
			return getRuleContexts(Unique_key_clauseContext.class);
		}
		public Unique_key_clauseContext unique_key_clause(int i) {
			return getRuleContext(Unique_key_clauseContext.class,i);
		}
		public List<Check_constraintContext> check_constraint() {
			return getRuleContexts(Check_constraintContext.class);
		}
		public Check_constraintContext check_constraint(int i) {
			return getRuleContext(Check_constraintContext.class,i);
		}
		public List<TerminalNode> CONSTRAINT() { return getTokens(PlSqlParser.CONSTRAINT); }
		public TerminalNode CONSTRAINT(int i) {
			return getToken(PlSqlParser.CONSTRAINT, i);
		}
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOut_of_line_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOut_of_line_constraint(this);
		}
	}

	public final Out_of_line_constraintContext out_of_line_constraint() throws RecognitionException {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_out_of_line_constraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2571); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2563);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CONSTRAINT) {
						{
						setState(2561);
						match(CONSTRAINT);
						setState(2562);
						constraint_name();
						}
					}

					setState(2569);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY:
						{
						setState(2565);
						primary_key_clause();
						}
						break;
					case FOREIGN:
						{
						setState(2566);
						foreign_key_clause();
						}
						break;
					case UNIQUE:
						{
						setState(2567);
						unique_key_clause();
						}
						break;
					case CHECK:
						{
						setState(2568);
						check_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2573); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,253,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2575);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_stateContext extends ParserRuleContext {
		public List<TerminalNode> DEFERRABLE() { return getTokens(PlSqlParser.DEFERRABLE); }
		public TerminalNode DEFERRABLE(int i) {
			return getToken(PlSqlParser.DEFERRABLE, i);
		}
		public List<TerminalNode> INITIALLY() { return getTokens(PlSqlParser.INITIALLY); }
		public TerminalNode INITIALLY(int i) {
			return getToken(PlSqlParser.INITIALLY, i);
		}
		public List<TerminalNode> IMMEDIATE() { return getTokens(PlSqlParser.IMMEDIATE); }
		public TerminalNode IMMEDIATE(int i) {
			return getToken(PlSqlParser.IMMEDIATE, i);
		}
		public List<TerminalNode> DEFERRED() { return getTokens(PlSqlParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(PlSqlParser.DEFERRED, i);
		}
		public List<TerminalNode> RELY() { return getTokens(PlSqlParser.RELY); }
		public TerminalNode RELY(int i) {
			return getToken(PlSqlParser.RELY, i);
		}
		public List<TerminalNode> NORELY() { return getTokens(PlSqlParser.NORELY); }
		public TerminalNode NORELY(int i) {
			return getToken(PlSqlParser.NORELY, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(PlSqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(PlSqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(PlSqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(PlSqlParser.DISABLE, i);
		}
		public List<TerminalNode> VALIDATE() { return getTokens(PlSqlParser.VALIDATE); }
		public TerminalNode VALIDATE(int i) {
			return getToken(PlSqlParser.VALIDATE, i);
		}
		public List<TerminalNode> NOVALIDATE() { return getTokens(PlSqlParser.NOVALIDATE); }
		public TerminalNode NOVALIDATE(int i) {
			return getToken(PlSqlParser.NOVALIDATE, i);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstraint_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstraint_state(this);
		}
	}

	public final Constraint_stateContext constraint_state() throws RecognitionException {
		Constraint_stateContext _localctx = new Constraint_stateContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2587); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2587);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						setState(2579);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2578);
							match(NOT);
							}
						}

						setState(2581);
						match(DEFERRABLE);
						}
						break;
					case INITIALLY:
						{
						setState(2582);
						match(INITIALLY);
						setState(2583);
						_la = _input.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NORELY:
					case RELY:
						{
						setState(2584);
						_la = _input.LA(1);
						if ( !(_la==NORELY || _la==RELY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DISABLE:
					case ENABLE:
						{
						setState(2585);
						_la = _input.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NOVALIDATE:
					case VALIDATE:
						{
						setState(2586);
						_la = _input.LA(1);
						if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2589); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tablespaceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Permanent_tablespace_clauseContext permanent_tablespace_clause() {
			return getRuleContext(Permanent_tablespace_clauseContext.class,0);
		}
		public Temporary_tablespace_clauseContext temporary_tablespace_clause() {
			return getRuleContext(Temporary_tablespace_clauseContext.class,0);
		}
		public Undo_tablespace_clauseContext undo_tablespace_clause() {
			return getRuleContext(Undo_tablespace_clauseContext.class,0);
		}
		public TerminalNode BIGFILE() { return getToken(PlSqlParser.BIGFILE, 0); }
		public TerminalNode SMALLFILE() { return getToken(PlSqlParser.SMALLFILE, 0); }
		public Create_tablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_tablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_tablespace(this);
		}
	}

	public final Create_tablespaceContext create_tablespace() throws RecognitionException {
		Create_tablespaceContext _localctx = new Create_tablespaceContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_create_tablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2591);
			match(CREATE);
			setState(2593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BIGFILE || _la==SMALLFILE) {
				{
				setState(2592);
				_la = _input.LA(1);
				if ( !(_la==BIGFILE || _la==SMALLFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2598);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE:
				{
				setState(2595);
				permanent_tablespace_clause();
				}
				break;
			case TEMPORARY:
				{
				setState(2596);
				temporary_tablespace_clause();
				}
				break;
			case UNDO:
				{
				setState(2597);
				undo_tablespace_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2600);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Permanent_tablespace_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Datafile_specificationContext datafile_specification() {
			return getRuleContext(Datafile_specificationContext.class,0);
		}
		public List<TerminalNode> MINIMUM() { return getTokens(PlSqlParser.MINIMUM); }
		public TerminalNode MINIMUM(int i) {
			return getToken(PlSqlParser.MINIMUM, i);
		}
		public List<TerminalNode> EXTENT() { return getTokens(PlSqlParser.EXTENT); }
		public TerminalNode EXTENT(int i) {
			return getToken(PlSqlParser.EXTENT, i);
		}
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(PlSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(PlSqlParser.BLOCKSIZE, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<TerminalNode> FORCE() { return getTokens(PlSqlParser.FORCE); }
		public TerminalNode FORCE(int i) {
			return getToken(PlSqlParser.FORCE, i);
		}
		public List<TerminalNode> LOGGING() { return getTokens(PlSqlParser.LOGGING); }
		public TerminalNode LOGGING(int i) {
			return getToken(PlSqlParser.LOGGING, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(PlSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(PlSqlParser.ENCRYPTION, i);
		}
		public List<Tablespace_encryption_specContext> tablespace_encryption_spec() {
			return getRuleContexts(Tablespace_encryption_specContext.class);
		}
		public Tablespace_encryption_specContext tablespace_encryption_spec(int i) {
			return getRuleContext(Tablespace_encryption_specContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PlSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PlSqlParser.DEFAULT, i);
		}
		public List<Extent_management_clauseContext> extent_management_clause() {
			return getRuleContexts(Extent_management_clauseContext.class);
		}
		public Extent_management_clauseContext extent_management_clause(int i) {
			return getRuleContext(Extent_management_clauseContext.class,i);
		}
		public List<Segment_management_clauseContext> segment_management_clause() {
			return getRuleContexts(Segment_management_clauseContext.class);
		}
		public Segment_management_clauseContext segment_management_clause(int i) {
			return getRuleContext(Segment_management_clauseContext.class,i);
		}
		public List<Flashback_mode_clauseContext> flashback_mode_clause() {
			return getRuleContexts(Flashback_mode_clauseContext.class);
		}
		public Flashback_mode_clauseContext flashback_mode_clause(int i) {
			return getRuleContext(Flashback_mode_clauseContext.class,i);
		}
		public List<TerminalNode> ONLINE() { return getTokens(PlSqlParser.ONLINE); }
		public TerminalNode ONLINE(int i) {
			return getToken(PlSqlParser.ONLINE, i);
		}
		public List<TerminalNode> OFFLINE() { return getTokens(PlSqlParser.OFFLINE); }
		public TerminalNode OFFLINE(int i) {
			return getToken(PlSqlParser.OFFLINE, i);
		}
		public Permanent_tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permanent_tablespace_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPermanent_tablespace_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPermanent_tablespace_clause(this);
		}
	}

	public final Permanent_tablespace_clauseContext permanent_tablespace_clause() throws RecognitionException {
		Permanent_tablespace_clauseContext _localctx = new Permanent_tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_permanent_tablespace_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			match(TABLESPACE);
			setState(2603);
			id_expression();
			setState(2605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATAFILE) {
				{
				setState(2604);
				datafile_specification();
				}
			}

			setState(2624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BLOCKSIZE || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DEFAULT - 128)) | (1L << (ENCRYPTION - 128)) | (1L << (EXTENT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FILESYSTEM_LIKE_LOGGING - 192)) | (1L << (FLASHBACK - 192)) | (1L << (FORCE - 192)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (LOGGING - 284)) | (1L << (MINIMUM - 284)) | (1L << (NOLOGGING - 284)))) != 0) || _la==OFFLINE || _la==ONLINE || _la==SEGMENT) {
				{
				setState(2622);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINIMUM:
					{
					setState(2607);
					match(MINIMUM);
					setState(2608);
					match(EXTENT);
					setState(2609);
					size_clause();
					}
					break;
				case BLOCKSIZE:
					{
					setState(2610);
					match(BLOCKSIZE);
					setState(2611);
					size_clause();
					}
					break;
				case FILESYSTEM_LIKE_LOGGING:
				case LOGGING:
				case NOLOGGING:
					{
					setState(2612);
					logging_clause();
					}
					break;
				case FORCE:
					{
					setState(2613);
					match(FORCE);
					setState(2614);
					match(LOGGING);
					}
					break;
				case OFFLINE:
				case ONLINE:
					{
					setState(2615);
					_la = _input.LA(1);
					if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case ENCRYPTION:
					{
					setState(2616);
					match(ENCRYPTION);
					setState(2617);
					tablespace_encryption_spec();
					}
					break;
				case DEFAULT:
					{
					setState(2618);
					match(DEFAULT);
					}
					break;
				case EXTENT:
					{
					setState(2619);
					extent_management_clause();
					}
					break;
				case SEGMENT:
					{
					setState(2620);
					segment_management_clause();
					}
					break;
				case FLASHBACK:
					{
					setState(2621);
					flashback_mode_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2626);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablespace_encryption_specContext extends ParserRuleContext {
		public Token encrypt_algorithm;
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Tablespace_encryption_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace_encryption_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTablespace_encryption_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTablespace_encryption_spec(this);
		}
	}

	public final Tablespace_encryption_specContext tablespace_encryption_spec() throws RecognitionException {
		Tablespace_encryption_specContext _localctx = new Tablespace_encryption_specContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_tablespace_encryption_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2627);
			match(USING);
			setState(2628);
			((Tablespace_encryption_specContext)_localctx).encrypt_algorithm = match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOGGING() { return getToken(PlSqlParser.LOGGING, 0); }
		public TerminalNode NOLOGGING() { return getToken(PlSqlParser.NOLOGGING, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLogging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLogging_clause(this);
		}
	}

	public final Logging_clauseContext logging_clause() throws RecognitionException {
		Logging_clauseContext _localctx = new Logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			_la = _input.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extent_management_clauseContext extends ParserRuleContext {
		public TerminalNode EXTENT() { return getToken(PlSqlParser.EXTENT, 0); }
		public TerminalNode MANAGEMENT() { return getToken(PlSqlParser.MANAGEMENT, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode AUTOALLOCATE() { return getToken(PlSqlParser.AUTOALLOCATE, 0); }
		public TerminalNode UNIFORM() { return getToken(PlSqlParser.UNIFORM, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public Extent_management_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extent_management_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExtent_management_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExtent_management_clause(this);
		}
	}

	public final Extent_management_clauseContext extent_management_clause() throws RecognitionException {
		Extent_management_clauseContext _localctx = new Extent_management_clauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_extent_management_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2632);
			match(EXTENT);
			setState(2633);
			match(MANAGEMENT);
			setState(2634);
			match(LOCAL);
			setState(2641);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTOALLOCATE:
				{
				setState(2635);
				match(AUTOALLOCATE);
				}
				break;
			case UNIFORM:
				{
				setState(2636);
				match(UNIFORM);
				setState(2639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(2637);
					match(SIZE);
					setState(2638);
					size_clause();
					}
				}

				}
				break;
			case BLOCKSIZE:
			case DEFAULT:
			case ENCRYPTION:
			case EXTENT:
			case FILESYSTEM_LIKE_LOGGING:
			case FLASHBACK:
			case FORCE:
			case LOGGING:
			case MINIMUM:
			case NOLOGGING:
			case OFFLINE:
			case ONLINE:
			case RETENTION:
			case SEGMENT:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_management_clauseContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SPACE_KEYWORD() { return getToken(PlSqlParser.SPACE_KEYWORD, 0); }
		public TerminalNode MANAGEMENT() { return getToken(PlSqlParser.MANAGEMENT, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode MANUAL() { return getToken(PlSqlParser.MANUAL, 0); }
		public Segment_management_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_management_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSegment_management_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSegment_management_clause(this);
		}
	}

	public final Segment_management_clauseContext segment_management_clause() throws RecognitionException {
		Segment_management_clauseContext _localctx = new Segment_management_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_segment_management_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2643);
			match(SEGMENT);
			setState(2644);
			match(SPACE_KEYWORD);
			setState(2645);
			match(MANAGEMENT);
			setState(2646);
			_la = _input.LA(1);
			if ( !(_la==AUTO || _la==MANUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_mode_clauseContext extends ParserRuleContext {
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public Flashback_mode_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_mode_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFlashback_mode_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFlashback_mode_clause(this);
		}
	}

	public final Flashback_mode_clauseContext flashback_mode_clause() throws RecognitionException {
		Flashback_mode_clauseContext _localctx = new Flashback_mode_clauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_flashback_mode_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			match(FLASHBACK);
			setState(2649);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Temporary_tablespace_clauseContext extends ParserRuleContext {
		public Id_expressionContext tablespace_name;
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Tempfile_specificationContext tempfile_specification() {
			return getRuleContext(Tempfile_specificationContext.class,0);
		}
		public Tablespace_group_clauseContext tablespace_group_clause() {
			return getRuleContext(Tablespace_group_clauseContext.class,0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return getRuleContext(Extent_management_clauseContext.class,0);
		}
		public Temporary_tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporary_tablespace_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTemporary_tablespace_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTemporary_tablespace_clause(this);
		}
	}

	public final Temporary_tablespace_clauseContext temporary_tablespace_clause() throws RecognitionException {
		Temporary_tablespace_clauseContext _localctx = new Temporary_tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_temporary_tablespace_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2651);
			match(TEMPORARY);
			setState(2652);
			match(TABLESPACE);
			setState(2653);
			((Temporary_tablespace_clauseContext)_localctx).tablespace_name = id_expression();
			setState(2655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPFILE) {
				{
				setState(2654);
				tempfile_specification();
				}
			}

			setState(2658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2657);
				tablespace_group_clause();
				}
			}

			setState(2661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT) {
				{
				setState(2660);
				extent_management_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablespace_group_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Tablespace_group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace_group_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTablespace_group_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTablespace_group_clause(this);
		}
	}

	public final Tablespace_group_clauseContext tablespace_group_clause() throws RecognitionException {
		Tablespace_group_clauseContext _localctx = new Tablespace_group_clauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_tablespace_group_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2663);
			match(TABLESPACE);
			setState(2664);
			match(GROUP);
			setState(2665);
			_la = _input.LA(1);
			if ( !(_la==CHAR_STRING || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Undo_tablespace_clauseContext extends ParserRuleContext {
		public Id_expressionContext tablespace_name;
		public TerminalNode UNDO() { return getToken(PlSqlParser.UNDO, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Datafile_specificationContext datafile_specification() {
			return getRuleContext(Datafile_specificationContext.class,0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return getRuleContext(Extent_management_clauseContext.class,0);
		}
		public Tablespace_retention_clauseContext tablespace_retention_clause() {
			return getRuleContext(Tablespace_retention_clauseContext.class,0);
		}
		public Undo_tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undo_tablespace_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUndo_tablespace_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUndo_tablespace_clause(this);
		}
	}

	public final Undo_tablespace_clauseContext undo_tablespace_clause() throws RecognitionException {
		Undo_tablespace_clauseContext _localctx = new Undo_tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_undo_tablespace_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2667);
			match(UNDO);
			setState(2668);
			match(TABLESPACE);
			setState(2669);
			((Undo_tablespace_clauseContext)_localctx).tablespace_name = id_expression();
			setState(2671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATAFILE) {
				{
				setState(2670);
				datafile_specification();
				}
			}

			setState(2674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT) {
				{
				setState(2673);
				extent_management_clause();
				}
			}

			setState(2677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETENTION) {
				{
				setState(2676);
				tablespace_retention_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablespace_retention_clauseContext extends ParserRuleContext {
		public TerminalNode RETENTION() { return getToken(PlSqlParser.RETENTION, 0); }
		public TerminalNode GUARANTEE() { return getToken(PlSqlParser.GUARANTEE, 0); }
		public TerminalNode NOGUARANTEE() { return getToken(PlSqlParser.NOGUARANTEE, 0); }
		public Tablespace_retention_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace_retention_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTablespace_retention_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTablespace_retention_clause(this);
		}
	}

	public final Tablespace_retention_clauseContext tablespace_retention_clause() throws RecognitionException {
		Tablespace_retention_clauseContext _localctx = new Tablespace_retention_clauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_tablespace_retention_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			match(RETENTION);
			setState(2680);
			_la = _input.LA(1);
			if ( !(_la==GUARANTEE || _la==NOGUARANTEE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datafile_specificationContext extends ParserRuleContext {
		public TerminalNode DATAFILE() { return getToken(PlSqlParser.DATAFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return getRuleContext(Datafile_tempfile_specContext.class,0);
		}
		public Datafile_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datafile_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDatafile_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDatafile_specification(this);
		}
	}

	public final Datafile_specificationContext datafile_specification() throws RecognitionException {
		Datafile_specificationContext _localctx = new Datafile_specificationContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_datafile_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2682);
			match(DATAFILE);
			{
			setState(2684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2683);
				match(COMMA);
				}
			}

			setState(2686);
			datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tempfile_specificationContext extends ParserRuleContext {
		public TerminalNode TEMPFILE() { return getToken(PlSqlParser.TEMPFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return getRuleContext(Datafile_tempfile_specContext.class,0);
		}
		public Tempfile_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tempfile_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTempfile_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTempfile_specification(this);
		}
	}

	public final Tempfile_specificationContext tempfile_specification() throws RecognitionException {
		Tempfile_specificationContext _localctx = new Tempfile_specificationContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_tempfile_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2688);
			match(TEMPFILE);
			{
			setState(2690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2689);
				match(COMMA);
				}
			}

			setState(2692);
			datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datafile_tempfile_specContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public Autoextend_clauseContext autoextend_clause() {
			return getRuleContext(Autoextend_clauseContext.class,0);
		}
		public Datafile_tempfile_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datafile_tempfile_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDatafile_tempfile_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDatafile_tempfile_spec(this);
		}
	}

	public final Datafile_tempfile_specContext datafile_tempfile_spec() throws RecognitionException {
		Datafile_tempfile_specContext _localctx = new Datafile_tempfile_specContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_datafile_tempfile_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR_STRING) {
				{
				setState(2694);
				match(CHAR_STRING);
				}
			}

			setState(2699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(2697);
				match(SIZE);
				setState(2698);
				size_clause();
				}
			}

			setState(2702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(2701);
				match(REUSE);
				}
			}

			setState(2705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND) {
				{
				setState(2704);
				autoextend_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redo_log_file_specContext extends ParserRuleContext {
		public TerminalNode DATAFILE() { return getToken(PlSqlParser.DATAFILE, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(PlSqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PlSqlParser.CHAR_STRING, i);
		}
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public TerminalNode BLOCKSIZE() { return getToken(PlSqlParser.BLOCKSIZE, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public Redo_log_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redo_log_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRedo_log_file_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRedo_log_file_spec(this);
		}
	}

	public final Redo_log_file_specContext redo_log_file_spec() throws RecognitionException {
		Redo_log_file_specContext _localctx = new Redo_log_file_specContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_redo_log_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2707);
			match(DATAFILE);
			setState(2719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_STRING:
				{
				setState(2708);
				match(CHAR_STRING);
				}
				break;
			case LEFT_PAREN:
				{
				setState(2709);
				match(LEFT_PAREN);
				setState(2714); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2711);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2710);
						match(COMMA);
						}
					}

					setState(2713);
					match(CHAR_STRING);
					}
					}
					setState(2716); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CHAR_STRING || _la==COMMA );
				setState(2718);
				match(RIGHT_PAREN);
				}
				break;
			case EOF:
			case BLOCKSIZE:
			case REUSE:
			case SIZE:
				break;
			default:
				break;
			}
			setState(2723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(2721);
				match(SIZE);
				setState(2722);
				size_clause();
				}
			}

			setState(2727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCKSIZE) {
				{
				setState(2725);
				match(BLOCKSIZE);
				setState(2726);
				size_clause();
				}
			}

			setState(2730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(2729);
				match(REUSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Autoextend_clauseContext extends ParserRuleContext {
		public TerminalNode AUTOEXTEND() { return getToken(PlSqlParser.AUTOEXTEND, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode NEXT() { return getToken(PlSqlParser.NEXT, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public Maxsize_clauseContext maxsize_clause() {
			return getRuleContext(Maxsize_clauseContext.class,0);
		}
		public Autoextend_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_autoextend_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAutoextend_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAutoextend_clause(this);
		}
	}

	public final Autoextend_clauseContext autoextend_clause() throws RecognitionException {
		Autoextend_clauseContext _localctx = new Autoextend_clauseContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_autoextend_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2732);
			match(AUTOEXTEND);
			setState(2742);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(2733);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(2734);
				match(ON);
				setState(2737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NEXT) {
					{
					setState(2735);
					match(NEXT);
					setState(2736);
					size_clause();
					}
				}

				setState(2740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAXSIZE) {
					{
					setState(2739);
					maxsize_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Maxsize_clauseContext extends ParserRuleContext {
		public TerminalNode MAXSIZE() { return getToken(PlSqlParser.MAXSIZE, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public Maxsize_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxsize_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMaxsize_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMaxsize_clause(this);
		}
	}

	public final Maxsize_clauseContext maxsize_clause() throws RecognitionException {
		Maxsize_clauseContext _localctx = new Maxsize_clauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_maxsize_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2744);
			match(MAXSIZE);
			setState(2747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNLIMITED:
				{
				setState(2745);
				match(UNLIMITED);
				}
				break;
			case UNSIGNED_INTEGER:
				{
				setState(2746);
				size_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Build_clauseContext extends ParserRuleContext {
		public TerminalNode BUILD() { return getToken(PlSqlParser.BUILD, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public Build_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_build_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBuild_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBuild_clause(this);
		}
	}

	public final Build_clauseContext build_clause() throws RecognitionException {
		Build_clauseContext _localctx = new Build_clauseContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_build_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			match(BUILD);
			setState(2750);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_clauseContext extends ParserRuleContext {
		public Token parallel_count;
		public TerminalNode NOPARALLEL() { return getToken(PlSqlParser.NOPARALLEL, 0); }
		public TerminalNode PARALLEL() { return getToken(PlSqlParser.PARALLEL, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Parallel_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParallel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParallel_clause(this);
		}
	}

	public final Parallel_clauseContext parallel_clause() throws RecognitionException {
		Parallel_clauseContext _localctx = new Parallel_clauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_parallel_clause);
		try {
			setState(2755);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOPARALLEL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2752);
				match(NOPARALLEL);
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2753);
				match(PARALLEL);
				setState(2754);
				((Parallel_clauseContext)_localctx).parallel_count = match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_materialized_view_logContext extends ParserRuleContext {
		public Id_expressionContext tablespace_name;
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PlSqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PlSqlParser.VIEW, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(PlSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PlSqlParser.WITH, i);
		}
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PlSqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PlSqlParser.TABLESPACE, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Mv_log_purge_clauseContext> mv_log_purge_clause() {
			return getRuleContexts(Mv_log_purge_clauseContext.class);
		}
		public Mv_log_purge_clauseContext mv_log_purge_clause(int i) {
			return getRuleContext(Mv_log_purge_clauseContext.class,i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> CACHE() { return getTokens(PlSqlParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(PlSqlParser.CACHE, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(PlSqlParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(PlSqlParser.NOCACHE, i);
		}
		public List<TerminalNode> OBJECT() { return getTokens(PlSqlParser.OBJECT); }
		public TerminalNode OBJECT(int i) {
			return getToken(PlSqlParser.OBJECT, i);
		}
		public List<TerminalNode> ID() { return getTokens(PlSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(PlSqlParser.ID, i);
		}
		public List<TerminalNode> PRIMARY() { return getTokens(PlSqlParser.PRIMARY); }
		public TerminalNode PRIMARY(int i) {
			return getToken(PlSqlParser.PRIMARY, i);
		}
		public List<TerminalNode> KEY() { return getTokens(PlSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(PlSqlParser.KEY, i);
		}
		public List<TerminalNode> ROWID() { return getTokens(PlSqlParser.ROWID); }
		public TerminalNode ROWID(int i) {
			return getToken(PlSqlParser.ROWID, i);
		}
		public List<TerminalNode> SEQUENCE() { return getTokens(PlSqlParser.SEQUENCE); }
		public TerminalNode SEQUENCE(int i) {
			return getToken(PlSqlParser.SEQUENCE, i);
		}
		public List<TerminalNode> COMMIT() { return getTokens(PlSqlParser.COMMIT); }
		public TerminalNode COMMIT(int i) {
			return getToken(PlSqlParser.COMMIT, i);
		}
		public List<TerminalNode> SCN() { return getTokens(PlSqlParser.SCN); }
		public TerminalNode SCN(int i) {
			return getToken(PlSqlParser.SCN, i);
		}
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public List<New_values_clauseContext> new_values_clause() {
			return getRuleContexts(New_values_clauseContext.class);
		}
		public New_values_clauseContext new_values_clause(int i) {
			return getRuleContext(New_values_clauseContext.class,i);
		}
		public Create_materialized_view_logContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_materialized_view_log; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_materialized_view_log(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_materialized_view_log(this);
		}
	}

	public final Create_materialized_view_logContext create_materialized_view_log() throws RecognitionException {
		Create_materialized_view_logContext _localctx = new Create_materialized_view_logContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_create_materialized_view_log);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2757);
			match(CREATE);
			setState(2758);
			match(MATERIALIZED);
			setState(2759);
			match(VIEW);
			setState(2760);
			match(LOG);
			setState(2761);
			match(ON);
			setState(2762);
			tableview_name();
			setState(2772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (LOGGING - 284)) | (1L << (NOCACHE - 284)) | (1L << (NOLOGGING - 284)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(2768); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2768);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(2763);
						physical_attributes_clause();
						}
						break;
					case TABLESPACE:
						{
						setState(2764);
						match(TABLESPACE);
						setState(2765);
						((Create_materialized_view_logContext)_localctx).tablespace_name = id_expression();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(2766);
						logging_clause();
						}
						break;
					case CACHE:
					case NOCACHE:
						{
						setState(2767);
						_la = _input.LA(1);
						if ( !(_la==CACHE || _la==NOCACHE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2770); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CACHE || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (LOGGING - 284)) | (1L << (NOCACHE - 284)) | (1L << (NOLOGGING - 284)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
				}
			}

			setState(2775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(2774);
				parallel_clause();
				}
			}

			setState(2816);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2777);
					match(WITH);
					setState(2793);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2779);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2778);
								match(COMMA);
								}
							}

							setState(2789);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case OBJECT:
								{
								setState(2781);
								match(OBJECT);
								setState(2782);
								match(ID);
								}
								break;
							case PRIMARY:
								{
								setState(2783);
								match(PRIMARY);
								setState(2784);
								match(KEY);
								}
								break;
							case ROWID:
								{
								setState(2785);
								match(ROWID);
								}
								break;
							case SEQUENCE:
								{
								setState(2786);
								match(SEQUENCE);
								}
								break;
							case COMMIT:
								{
								setState(2787);
								match(COMMIT);
								setState(2788);
								match(SCN);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							} 
						}
						setState(2795);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
					}
					setState(2809);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
					case 1:
						{
						setState(2796);
						match(LEFT_PAREN);
						setState(2801); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(2798);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2797);
								match(COMMA);
								}
							}

							setState(2800);
							regular_id();
							}
							}
							setState(2803); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (COMMA - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
						setState(2805);
						match(RIGHT_PAREN);
						setState(2807);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
						case 1:
							{
							setState(2806);
							new_values_clause();
							}
							break;
						}
						}
						break;
					}
					setState(2812);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PURGE) {
						{
						setState(2811);
						mv_log_purge_clause();
						}
					}

					}
					} 
				}
				setState(2818);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_values_clauseContext extends ParserRuleContext {
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(PlSqlParser.EXCLUDING, 0); }
		public New_values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNew_values_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNew_values_clause(this);
		}
	}

	public final New_values_clauseContext new_values_clause() throws RecognitionException {
		New_values_clauseContext _localctx = new New_values_clauseContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_new_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2820);
			match(NEW);
			setState(2821);
			match(VALUES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mv_log_purge_clauseContext extends ParserRuleContext {
		public TerminalNode PURGE() { return getToken(PlSqlParser.PURGE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode SYNCHRONOUS() { return getToken(PlSqlParser.SYNCHRONOUS, 0); }
		public TerminalNode ASYNCHRONOUS() { return getToken(PlSqlParser.ASYNCHRONOUS, 0); }
		public Mv_log_purge_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mv_log_purge_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMv_log_purge_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMv_log_purge_clause(this);
		}
	}

	public final Mv_log_purge_clauseContext mv_log_purge_clause() throws RecognitionException {
		Mv_log_purge_clauseContext _localctx = new Mv_log_purge_clauseContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_mv_log_purge_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2823);
			match(PURGE);
			{
			setState(2824);
			match(IMMEDIATE);
			setState(2826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASYNCHRONOUS || _la==SYNCHRONOUS) {
				{
				setState(2825);
				_la = _input.LA(1);
				if ( !(_la==ASYNCHRONOUS || _la==SYNCHRONOUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_materialized_viewContext extends ParserRuleContext {
		public Id_expressionContext mv_tablespace;
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PlSqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PlSqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode PREBUILT() { return getToken(PlSqlParser.PREBUILT, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Create_mv_refreshContext create_mv_refresh() {
			return getRuleContext(Create_mv_refreshContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode REWRITE() { return getToken(PlSqlParser.REWRITE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode REDUCED() { return getToken(PlSqlParser.REDUCED, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Build_clauseContext build_clause() {
			return getRuleContext(Build_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PlSqlParser.WITHOUT, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PlSqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PlSqlParser.TABLESPACE, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Create_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_materialized_view(this);
		}
	}

	public final Create_materialized_viewContext create_materialized_view() throws RecognitionException {
		Create_materialized_viewContext _localctx = new Create_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_create_materialized_view);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2828);
			match(CREATE);
			setState(2829);
			match(MATERIALIZED);
			setState(2830);
			match(VIEW);
			setState(2831);
			tableview_name();
			setState(2834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(2832);
				match(OF);
				setState(2833);
				type_name();
				}
			}

			setState(2856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(2836);
				match(ON);
				setState(2837);
				match(PREBUILT);
				setState(2838);
				match(TABLE);
				setState(2842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITHOUT || _la==WITH) {
					{
					setState(2839);
					_la = _input.LA(1);
					if ( !(_la==WITHOUT || _la==WITH) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2840);
					match(REDUCED);
					setState(2841);
					match(PRECISION);
					}
				}

				}
				break;
			case AS:
			case BUILD:
			case CACHE:
			case DISABLE:
			case ENABLE:
			case FILESYSTEM_LIKE_LOGGING:
			case FOR:
			case INITRANS:
			case LOGGING:
			case NEVER:
			case NOCACHE:
			case NOLOGGING:
			case NOPARALLEL:
			case PARALLEL:
			case PCTFREE:
			case PCTUSED:
			case REFRESH:
			case SEGMENT:
			case STORAGE:
			case TABLESPACE:
			case USING:
				{
				setState(2845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (SEGMENT - 480)) | (1L << (STORAGE - 480)) | (1L << (TABLESPACE - 480)))) != 0)) {
					{
					setState(2844);
					physical_properties();
					}
				}

				setState(2848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CACHE || _la==NOCACHE) {
					{
					setState(2847);
					_la = _input.LA(1);
					if ( !(_la==CACHE || _la==NOCACHE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOPARALLEL || _la==PARALLEL) {
					{
					setState(2850);
					parallel_clause();
					}
				}

				setState(2854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BUILD) {
					{
					setState(2853);
					build_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2858);
				match(USING);
				setState(2859);
				match(INDEX);
				setState(2869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INITRANS || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2863); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(2863);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case INITRANS:
							case PCTFREE:
							case PCTUSED:
							case STORAGE:
								{
								setState(2860);
								physical_attributes_clause();
								}
								break;
							case TABLESPACE:
								{
								setState(2861);
								match(TABLESPACE);
								setState(2862);
								((Create_materialized_viewContext)_localctx).mv_tablespace = id_expression();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2865); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(2871);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(2872);
				match(USING);
				setState(2873);
				match(NO);
				setState(2874);
				match(INDEX);
				}
				break;
			}
			setState(2878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NEVER || _la==REFRESH) {
				{
				setState(2877);
				create_mv_refresh();
				}
			}

			setState(2882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2880);
				match(FOR);
				setState(2881);
				match(UPDATE);
				}
			}

			setState(2887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2884);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2885);
				match(QUERY);
				setState(2886);
				match(REWRITE);
				}
			}

			setState(2889);
			match(AS);
			setState(2890);
			subquery();
			setState(2891);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_mv_refreshContext extends ParserRuleContext {
		public Token rb_segment;
		public TerminalNode NEVER() { return getToken(PlSqlParser.NEVER, 0); }
		public TerminalNode REFRESH() { return getToken(PlSqlParser.REFRESH, 0); }
		public List<TerminalNode> ON() { return getTokens(PlSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PlSqlParser.ON, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PlSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PlSqlParser.WITH, i);
		}
		public List<TerminalNode> USING() { return getTokens(PlSqlParser.USING); }
		public TerminalNode USING(int i) {
			return getToken(PlSqlParser.USING, i);
		}
		public List<TerminalNode> CONSTRAINTS() { return getTokens(PlSqlParser.CONSTRAINTS); }
		public TerminalNode CONSTRAINTS(int i) {
			return getToken(PlSqlParser.CONSTRAINTS, i);
		}
		public List<TerminalNode> FAST() { return getTokens(PlSqlParser.FAST); }
		public TerminalNode FAST(int i) {
			return getToken(PlSqlParser.FAST, i);
		}
		public List<TerminalNode> COMPLETE() { return getTokens(PlSqlParser.COMPLETE); }
		public TerminalNode COMPLETE(int i) {
			return getToken(PlSqlParser.COMPLETE, i);
		}
		public List<TerminalNode> FORCE() { return getTokens(PlSqlParser.FORCE); }
		public TerminalNode FORCE(int i) {
			return getToken(PlSqlParser.FORCE, i);
		}
		public List<TerminalNode> DEMAND() { return getTokens(PlSqlParser.DEMAND); }
		public TerminalNode DEMAND(int i) {
			return getToken(PlSqlParser.DEMAND, i);
		}
		public List<TerminalNode> COMMIT() { return getTokens(PlSqlParser.COMMIT); }
		public TerminalNode COMMIT(int i) {
			return getToken(PlSqlParser.COMMIT, i);
		}
		public List<TerminalNode> ENFORCED() { return getTokens(PlSqlParser.ENFORCED); }
		public TerminalNode ENFORCED(int i) {
			return getToken(PlSqlParser.ENFORCED, i);
		}
		public List<TerminalNode> TRUSTED() { return getTokens(PlSqlParser.TRUSTED); }
		public TerminalNode TRUSTED(int i) {
			return getToken(PlSqlParser.TRUSTED, i);
		}
		public List<TerminalNode> START() { return getTokens(PlSqlParser.START); }
		public TerminalNode START(int i) {
			return getToken(PlSqlParser.START, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(PlSqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(PlSqlParser.NEXT, i);
		}
		public List<TerminalNode> PRIMARY() { return getTokens(PlSqlParser.PRIMARY); }
		public TerminalNode PRIMARY(int i) {
			return getToken(PlSqlParser.PRIMARY, i);
		}
		public List<TerminalNode> KEY() { return getTokens(PlSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(PlSqlParser.KEY, i);
		}
		public List<TerminalNode> ROWID() { return getTokens(PlSqlParser.ROWID); }
		public TerminalNode ROWID(int i) {
			return getToken(PlSqlParser.ROWID, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PlSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PlSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> ROLLBACK() { return getTokens(PlSqlParser.ROLLBACK); }
		public TerminalNode ROLLBACK(int i) {
			return getToken(PlSqlParser.ROLLBACK, i);
		}
		public List<TerminalNode> SEGMENT() { return getTokens(PlSqlParser.SEGMENT); }
		public TerminalNode SEGMENT(int i) {
			return getToken(PlSqlParser.SEGMENT, i);
		}
		public List<TerminalNode> REGULAR_ID() { return getTokens(PlSqlParser.REGULAR_ID); }
		public TerminalNode REGULAR_ID(int i) {
			return getToken(PlSqlParser.REGULAR_ID, i);
		}
		public List<TerminalNode> MASTER() { return getTokens(PlSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(PlSqlParser.MASTER, i);
		}
		public List<TerminalNode> LOCAL() { return getTokens(PlSqlParser.LOCAL); }
		public TerminalNode LOCAL(int i) {
			return getToken(PlSqlParser.LOCAL, i);
		}
		public Create_mv_refreshContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mv_refresh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_mv_refresh(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_mv_refresh(this);
		}
	}

	public final Create_mv_refreshContext create_mv_refresh() throws RecognitionException {
		Create_mv_refreshContext _localctx = new Create_mv_refreshContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_create_mv_refresh);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2932);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEVER:
				{
				setState(2893);
				match(NEVER);
				setState(2894);
				match(REFRESH);
				}
				break;
			case REFRESH:
				{
				setState(2895);
				match(REFRESH);
				setState(2928); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2928);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
					case 1:
						{
						setState(2896);
						_la = _input.LA(1);
						if ( !(_la==COMPLETE || _la==FAST || _la==FORCE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(2897);
						match(ON);
						setState(2898);
						_la = _input.LA(1);
						if ( !(_la==COMMIT || _la==DEMAND) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 3:
						{
						setState(2902);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case START:
							{
							setState(2899);
							match(START);
							setState(2900);
							match(WITH);
							}
							break;
						case NEXT:
							{
							setState(2901);
							match(NEXT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						setState(2904);
						match(WITH);
						setState(2908);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PRIMARY:
							{
							setState(2905);
							match(PRIMARY);
							setState(2906);
							match(KEY);
							}
							break;
						case ROWID:
							{
							setState(2907);
							match(ROWID);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 5:
						{
						setState(2910);
						match(USING);
						setState(2923);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DEFAULT:
							{
							setState(2911);
							match(DEFAULT);
							setState(2913);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==LOCAL || _la==MASTER) {
								{
								setState(2912);
								_la = _input.LA(1);
								if ( !(_la==LOCAL || _la==MASTER) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
							}

							setState(2915);
							match(ROLLBACK);
							setState(2916);
							match(SEGMENT);
							}
							break;
						case LOCAL:
						case MASTER:
						case ROLLBACK:
							{
							setState(2918);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==LOCAL || _la==MASTER) {
								{
								setState(2917);
								_la = _input.LA(1);
								if ( !(_la==LOCAL || _la==MASTER) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
							}

							setState(2920);
							match(ROLLBACK);
							setState(2921);
							match(SEGMENT);
							setState(2922);
							((Create_mv_refreshContext)_localctx).rb_segment = match(REGULAR_ID);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 6:
						{
						setState(2925);
						match(USING);
						setState(2926);
						_la = _input.LA(1);
						if ( !(_la==ENFORCED || _la==TRUSTED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2927);
						match(CONSTRAINTS);
						}
						break;
					}
					}
					setState(2930); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMPLETE || _la==FAST || _la==FORCE || _la==NEXT || _la==ON || _la==START || _la==USING || _la==WITH );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Table_range_partition_by_clauseContext table_range_partition_by_clause() {
			return getRuleContext(Table_range_partition_by_clauseContext.class,0);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return getRuleContext(Row_movement_clauseContext.class,0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return getRuleContext(Flashback_archive_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(PlSqlParser.PRESERVE, 0); }
		public List<Datatype_null_enableContext> datatype_null_enable() {
			return getRuleContexts(Datatype_null_enableContext.class);
		}
		public Datatype_null_enableContext datatype_null_enable(int i) {
			return getRuleContext(Datatype_null_enableContext.class,i);
		}
		public List<Primary_key_clauseContext> primary_key_clause() {
			return getRuleContexts(Primary_key_clauseContext.class);
		}
		public Primary_key_clauseContext primary_key_clause(int i) {
			return getRuleContext(Primary_key_clauseContext.class,i);
		}
		public List<Foreign_key_clauseContext> foreign_key_clause() {
			return getRuleContexts(Foreign_key_clauseContext.class);
		}
		public Foreign_key_clauseContext foreign_key_clause(int i) {
			return getRuleContext(Foreign_key_clauseContext.class,i);
		}
		public List<Unique_key_clauseContext> unique_key_clause() {
			return getRuleContexts(Unique_key_clauseContext.class);
		}
		public Unique_key_clauseContext unique_key_clause(int i) {
			return getRuleContext(Unique_key_clauseContext.class,i);
		}
		public List<Check_constraintContext> check_constraint() {
			return getRuleContexts(Check_constraintContext.class);
		}
		public Check_constraintContext check_constraint(int i) {
			return getRuleContext(Check_constraintContext.class,i);
		}
		public List<TerminalNode> CONSTRAINT() { return getTokens(PlSqlParser.CONSTRAINT); }
		public TerminalNode CONSTRAINT(int i) {
			return getToken(PlSqlParser.CONSTRAINT, i);
		}
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_table(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2934);
			match(CREATE);
			setState(2937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL) {
				{
				setState(2935);
				match(GLOBAL);
				setState(2936);
				match(TEMPORARY);
				}
			}

			setState(2939);
			match(TABLE);
			setState(2940);
			tableview_name();
			setState(2968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2941);
				match(LEFT_PAREN);
				setState(2946); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2943);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2942);
							match(COMMA);
							}
						}

						setState(2945);
						datatype_null_enable();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2948); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,326,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2950);
					match(COMMA);
					setState(2953);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CONSTRAINT) {
						{
						setState(2951);
						match(CONSTRAINT);
						setState(2952);
						constraint_name();
						}
					}

					setState(2959);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY:
						{
						setState(2955);
						primary_key_clause();
						}
						break;
					case FOREIGN:
						{
						setState(2956);
						foreign_key_clause();
						}
						break;
					case UNIQUE:
						{
						setState(2957);
						unique_key_clause();
						}
						break;
					case CHECK:
						{
						setState(2958);
						check_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2965);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2966);
				match(RIGHT_PAREN);
				}
			}

			setState(2974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2970);
				match(ON);
				setState(2971);
				match(COMMIT);
				setState(2972);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2973);
				match(ROWS);
				}
			}

			setState(2977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (SEGMENT - 480)) | (1L << (STORAGE - 480)) | (1L << (TABLESPACE - 480)))) != 0)) {
				{
				setState(2976);
				physical_properties();
				}
			}

			setState(2980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==NOCOMPRESS) {
				{
				setState(2979);
				table_compression();
				}
			}

			setState(2983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2982);
				table_range_partition_by_clause();
				}
			}

			setState(2986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE || _la==ROW) {
				{
				setState(2985);
				row_movement_clause();
				}
			}

			setState(2989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FLASHBACK || _la==NO) {
				{
				setState(2988);
				flashback_archive_clause();
				}
			}

			setState(2993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2991);
				match(AS);
				setState(2992);
				subquery();
				}
			}

			setState(2995);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_range_partition_by_clauseContext extends ParserRuleContext {
		public Token tablespace_name;
		public Token partition_name;
		public Id_expressionContext partition_tablespace;
		public List<TerminalNode> PARTITION() { return getTokens(PlSqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PlSqlParser.PARTITION, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> VALUES() { return getTokens(PlSqlParser.VALUES); }
		public TerminalNode VALUES(int i) {
			return getToken(PlSqlParser.VALUES, i);
		}
		public List<TerminalNode> LESS() { return getTokens(PlSqlParser.LESS); }
		public TerminalNode LESS(int i) {
			return getToken(PlSqlParser.LESS, i);
		}
		public List<TerminalNode> THAN() { return getTokens(PlSqlParser.THAN); }
		public TerminalNode THAN(int i) {
			return getToken(PlSqlParser.THAN, i);
		}
		public List<TerminalNode> REGULAR_ID() { return getTokens(PlSqlParser.REGULAR_ID); }
		public TerminalNode REGULAR_ID(int i) {
			return getToken(PlSqlParser.REGULAR_ID, i);
		}
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<TerminalNode> CHAR_STRING() { return getTokens(PlSqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PlSqlParser.CHAR_STRING, i);
		}
		public List<String_functionContext> string_function() {
			return getRuleContexts(String_functionContext.class);
		}
		public String_functionContext string_function(int i) {
			return getRuleContext(String_functionContext.class,i);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> MAXVALUE() { return getTokens(PlSqlParser.MAXVALUE); }
		public TerminalNode MAXVALUE(int i) {
			return getToken(PlSqlParser.MAXVALUE, i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PlSqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PlSqlParser.TABLESPACE, i);
		}
		public List<TerminalNode> ON() { return getTokens(PlSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PlSqlParser.ON, i);
		}
		public List<TerminalNode> COMMIT() { return getTokens(PlSqlParser.COMMIT); }
		public TerminalNode COMMIT(int i) {
			return getToken(PlSqlParser.COMMIT, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(PlSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(PlSqlParser.ROWS, i);
		}
		public List<Deferred_segment_creationContext> deferred_segment_creation() {
			return getRuleContexts(Deferred_segment_creationContext.class);
		}
		public Deferred_segment_creationContext deferred_segment_creation(int i) {
			return getRuleContext(Deferred_segment_creationContext.class,i);
		}
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(PlSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(PlSqlParser.DELETE, i);
		}
		public List<TerminalNode> PRESERVE() { return getTokens(PlSqlParser.PRESERVE); }
		public TerminalNode PRESERVE(int i) {
			return getToken(PlSqlParser.PRESERVE, i);
		}
		public Table_range_partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_range_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_range_partition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_range_partition_by_clause(this);
		}
	}

	public final Table_range_partition_by_clauseContext table_range_partition_by_clause() throws RecognitionException {
		Table_range_partition_by_clauseContext _localctx = new Table_range_partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_table_range_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997);
			match(PARTITION);
			setState(2998);
			match(BY);
			setState(2999);
			match(RANGE);
			setState(3000);
			paren_column_list();
			setState(3019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTERVAL) {
				{
				setState(3001);
				match(INTERVAL);
				setState(3002);
				match(LEFT_PAREN);
				setState(3003);
				expression();
				setState(3004);
				match(RIGHT_PAREN);
				setState(3017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(3005);
					match(STORE);
					setState(3006);
					match(IN);
					setState(3007);
					match(LEFT_PAREN);
					setState(3012); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3009);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3008);
							match(COMMA);
							}
						}

						setState(3011);
						((Table_range_partition_by_clauseContext)_localctx).tablespace_name = match(REGULAR_ID);
						}
						}
						setState(3014); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMMA || _la==REGULAR_ID );
					setState(3016);
					match(RIGHT_PAREN);
					}
				}

				}
			}

			setState(3021);
			match(LEFT_PAREN);
			setState(3068); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3022);
					match(COMMA);
					}
				}

				setState(3025);
				match(PARTITION);
				setState(3026);
				((Table_range_partition_by_clauseContext)_localctx).partition_name = match(REGULAR_ID);
				setState(3027);
				match(VALUES);
				setState(3028);
				match(LESS);
				setState(3029);
				match(THAN);
				setState(3030);
				match(LEFT_PAREN);
				setState(3047); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3047);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
					case 1:
						{
						setState(3032);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3031);
							match(COMMA);
							}
						}

						setState(3034);
						match(CHAR_STRING);
						}
						break;
					case 2:
						{
						setState(3036);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3035);
							match(COMMA);
							}
						}

						setState(3038);
						string_function();
						}
						break;
					case 3:
						{
						setState(3040);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3039);
							match(COMMA);
							}
						}

						setState(3042);
						numeric();
						}
						break;
					case 4:
						{
						setState(3044);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3043);
							match(COMMA);
							}
						}

						setState(3046);
						match(MAXVALUE);
						}
						break;
					}
					}
					setState(3049); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CHR || _la==MAXVALUE || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (DECODE - 643)) | (1L << (NVL - 643)) | (1L << (SUBSTR - 643)) | (1L << (TO_CHAR - 643)) | (1L << (TRIM - 643)) | (1L << (TO_DATE - 643)) | (1L << (UNSIGNED_INTEGER - 643)) | (1L << (APPROXIMATE_NUM_LIT - 643)) | (1L << (CHAR_STRING - 643)) | (1L << (COMMA - 643)))) != 0) );
				setState(3051);
				match(RIGHT_PAREN);
				setState(3054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(3052);
					match(TABLESPACE);
					setState(3053);
					((Table_range_partition_by_clauseContext)_localctx).partition_tablespace = id_expression();
					}
				}

				setState(3060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3056);
					match(ON);
					setState(3057);
					match(COMMIT);
					setState(3058);
					_la = _input.LA(1);
					if ( !(_la==DELETE || _la==PRESERVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3059);
					match(ROWS);
					}
				}

				setState(3063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEGMENT) {
					{
					setState(3062);
					deferred_segment_creation();
					}
				}

				setState(3066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INITRANS || _la==PCTFREE || _la==PCTUSED || _la==STORAGE) {
					{
					setState(3065);
					physical_attributes_clause();
					}
				}

				}
				}
				setState(3070); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(3072);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datatype_null_enableContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode SORT() { return getToken(PlSqlParser.SORT, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ENCRYPT() { return getToken(PlSqlParser.ENCRYPT, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(PlSqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PlSqlParser.CHAR_STRING, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(PlSqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode SALT() { return getToken(PlSqlParser.SALT, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Datatype_null_enableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype_null_enable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDatatype_null_enable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDatatype_null_enable(this);
		}
	}

	public final Datatype_null_enableContext datatype_null_enable() throws RecognitionException {
		Datatype_null_enableContext _localctx = new Datatype_null_enableContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_datatype_null_enable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074);
			column_name();
			setState(3075);
			datatype();
			setState(3077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORT) {
				{
				setState(3076);
				match(SORT);
				}
			}

			setState(3081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(3079);
				match(DEFAULT);
				setState(3080);
				expression();
				}
			}

			setState(3102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPT) {
				{
				setState(3083);
				match(ENCRYPT);
				setState(3086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3084);
					match(USING);
					setState(3085);
					match(CHAR_STRING);
					}
				}

				setState(3091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IDENTIFIED) {
					{
					setState(3088);
					match(IDENTIFIED);
					setState(3089);
					match(BY);
					setState(3090);
					match(REGULAR_ID);
					}
				}

				setState(3094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR_STRING) {
					{
					setState(3093);
					match(CHAR_STRING);
					}
				}

				setState(3100);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(3097);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(3096);
						match(NO);
						}
					}

					setState(3099);
					match(SALT);
					}
					break;
				}
				}
			}

			setState(3106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3104);
				match(NOT);
				setState(3105);
				match(NULL);
				}
			}

			setState(3109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(3108);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Size_clauseContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public Size_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_size_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSize_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSize_clause(this);
		}
	}

	public final Size_clauseContext size_clause() throws RecognitionException {
		Size_clauseContext _localctx = new Size_clauseContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_size_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3111);
			match(UNSIGNED_INTEGER);
			setState(3113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGULAR_ID) {
				{
				setState(3112);
				match(REGULAR_ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(PlSqlParser.COMPRESS, 0); }
		public TerminalNode BASIC() { return getToken(PlSqlParser.BASIC, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode OLTP() { return getToken(PlSqlParser.OLTP, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode LOW() { return getToken(PlSqlParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(PlSqlParser.HIGH, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(PlSqlParser.NOCOMPRESS, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_compression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_compression(this);
		}
	}

	public final Table_compressionContext table_compression() throws RecognitionException {
		Table_compressionContext _localctx = new Table_compressionContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_table_compression);
		int _la;
		try {
			setState(3128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3115);
				match(COMPRESS);
				setState(3125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3116);
					match(BASIC);
					}
					break;
				case 2:
					{
					setState(3117);
					match(FOR);
					setState(3123);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OLTP:
						{
						setState(3118);
						match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						setState(3119);
						_la = _input.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3121);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							setState(3120);
							_la = _input.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3127);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_attributes_clauseContext extends ParserRuleContext {
		public Token pctfree;
		public Token pctused;
		public Token inittrans;
		public List<TerminalNode> PCTFREE() { return getTokens(PlSqlParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(PlSqlParser.PCTFREE, i);
		}
		public List<TerminalNode> PCTUSED() { return getTokens(PlSqlParser.PCTUSED); }
		public TerminalNode PCTUSED(int i) {
			return getToken(PlSqlParser.PCTUSED, i);
		}
		public List<TerminalNode> INITRANS() { return getTokens(PlSqlParser.INITRANS); }
		public TerminalNode INITRANS(int i) {
			return getToken(PlSqlParser.INITRANS, i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public Physical_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPhysical_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPhysical_attributes_clause(this);
		}
	}

	public final Physical_attributes_clauseContext physical_attributes_clause() throws RecognitionException {
		Physical_attributes_clauseContext _localctx = new Physical_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_physical_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3137); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3137);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PCTFREE:
						{
						setState(3130);
						match(PCTFREE);
						setState(3131);
						((Physical_attributes_clauseContext)_localctx).pctfree = match(UNSIGNED_INTEGER);
						}
						break;
					case PCTUSED:
						{
						setState(3132);
						match(PCTUSED);
						setState(3133);
						((Physical_attributes_clauseContext)_localctx).pctused = match(UNSIGNED_INTEGER);
						}
						break;
					case INITRANS:
						{
						setState(3134);
						match(INITRANS);
						setState(3135);
						((Physical_attributes_clauseContext)_localctx).inittrans = match(UNSIGNED_INTEGER);
						}
						break;
					case STORAGE:
						{
						setState(3136);
						storage_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3139); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_clauseContext extends ParserRuleContext {
		public Size_clauseContext initial_size;
		public Size_clauseContext next_size;
		public Token minextents;
		public Token pctincrease;
		public Token freelists;
		public Token freelist_groups;
		public TerminalNode STORAGE() { return getToken(PlSqlParser.STORAGE, 0); }
		public List<TerminalNode> INITIAL() { return getTokens(PlSqlParser.INITIAL); }
		public TerminalNode INITIAL(int i) {
			return getToken(PlSqlParser.INITIAL, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(PlSqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(PlSqlParser.NEXT, i);
		}
		public List<TerminalNode> MINEXTENTS() { return getTokens(PlSqlParser.MINEXTENTS); }
		public TerminalNode MINEXTENTS(int i) {
			return getToken(PlSqlParser.MINEXTENTS, i);
		}
		public List<TerminalNode> PCTINCREASE() { return getTokens(PlSqlParser.PCTINCREASE); }
		public TerminalNode PCTINCREASE(int i) {
			return getToken(PlSqlParser.PCTINCREASE, i);
		}
		public List<TerminalNode> FREELISTS() { return getTokens(PlSqlParser.FREELISTS); }
		public TerminalNode FREELISTS(int i) {
			return getToken(PlSqlParser.FREELISTS, i);
		}
		public List<TerminalNode> FREELIST() { return getTokens(PlSqlParser.FREELIST); }
		public TerminalNode FREELIST(int i) {
			return getToken(PlSqlParser.FREELIST, i);
		}
		public List<TerminalNode> GROUPS() { return getTokens(PlSqlParser.GROUPS); }
		public TerminalNode GROUPS(int i) {
			return getToken(PlSqlParser.GROUPS, i);
		}
		public List<TerminalNode> OPTIMAL() { return getTokens(PlSqlParser.OPTIMAL); }
		public TerminalNode OPTIMAL(int i) {
			return getToken(PlSqlParser.OPTIMAL, i);
		}
		public List<TerminalNode> BUFFER_POOL() { return getTokens(PlSqlParser.BUFFER_POOL); }
		public TerminalNode BUFFER_POOL(int i) {
			return getToken(PlSqlParser.BUFFER_POOL, i);
		}
		public List<TerminalNode> FLASH_CACHE() { return getTokens(PlSqlParser.FLASH_CACHE); }
		public TerminalNode FLASH_CACHE(int i) {
			return getToken(PlSqlParser.FLASH_CACHE, i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(PlSqlParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(PlSqlParser.ENCRYPT, i);
		}
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> KEEP() { return getTokens(PlSqlParser.KEEP); }
		public TerminalNode KEEP(int i) {
			return getToken(PlSqlParser.KEEP, i);
		}
		public List<TerminalNode> RECYCLE() { return getTokens(PlSqlParser.RECYCLE); }
		public TerminalNode RECYCLE(int i) {
			return getToken(PlSqlParser.RECYCLE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PlSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PlSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> NONE() { return getTokens(PlSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(PlSqlParser.NONE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(PlSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(PlSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStorage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStorage_clause(this);
		}
	}

	public final Storage_clauseContext storage_clause() throws RecognitionException {
		Storage_clauseContext _localctx = new Storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3141);
			match(STORAGE);
			setState(3142);
			match(LEFT_PAREN);
			setState(3166); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3166);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INITIAL:
					{
					setState(3143);
					match(INITIAL);
					setState(3144);
					((Storage_clauseContext)_localctx).initial_size = size_clause();
					}
					break;
				case NEXT:
					{
					setState(3145);
					match(NEXT);
					setState(3146);
					((Storage_clauseContext)_localctx).next_size = size_clause();
					}
					break;
				case MINEXTENTS:
					{
					setState(3147);
					match(MINEXTENTS);
					setState(3148);
					((Storage_clauseContext)_localctx).minextents = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
						((Storage_clauseContext)_localctx).minextents = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					setState(3149);
					match(PCTINCREASE);
					setState(3150);
					((Storage_clauseContext)_localctx).pctincrease = match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					setState(3151);
					match(FREELISTS);
					setState(3152);
					((Storage_clauseContext)_localctx).freelists = match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					setState(3153);
					match(FREELIST);
					setState(3154);
					match(GROUPS);
					setState(3155);
					((Storage_clauseContext)_localctx).freelist_groups = match(UNSIGNED_INTEGER);
					}
					break;
				case OPTIMAL:
					{
					setState(3156);
					match(OPTIMAL);
					setState(3159);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(3157);
						size_clause();
						}
						break;
					case NULL:
						{
						setState(3158);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case BUFFER_POOL:
					{
					setState(3161);
					match(BUFFER_POOL);
					setState(3162);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					setState(3163);
					match(FLASH_CACHE);
					setState(3164);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case ENCRYPT:
					{
					setState(3165);
					match(ENCRYPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3168); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFER_POOL || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (ENCRYPT - 161)) | (1L << (FLASH_CACHE - 161)) | (1L << (FREELIST - 161)) | (1L << (FREELISTS - 161)))) != 0) || _la==INITIAL || _la==MINEXTENTS || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (NEXT - 330)) | (1L << (OPTIMAL - 330)) | (1L << (PCTINCREASE - 330)))) != 0) );
			setState(3170);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deferred_segment_creationContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode CREATION() { return getToken(PlSqlParser.CREATION, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public Deferred_segment_creationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deferred_segment_creation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDeferred_segment_creation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDeferred_segment_creation(this);
		}
	}

	public final Deferred_segment_creationContext deferred_segment_creation() throws RecognitionException {
		Deferred_segment_creationContext _localctx = new Deferred_segment_creationContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_deferred_segment_creation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3172);
			match(SEGMENT);
			setState(3173);
			match(CREATION);
			setState(3174);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_attributes_clauseContext extends ParserRuleContext {
		public Id_expressionContext tablespace_name;
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PlSqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PlSqlParser.TABLESPACE, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Segment_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSegment_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSegment_attributes_clause(this);
		}
	}

	public final Segment_attributes_clauseContext segment_attributes_clause() throws RecognitionException {
		Segment_attributes_clauseContext _localctx = new Segment_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_segment_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3180);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INITRANS:
				case PCTFREE:
				case PCTUSED:
				case STORAGE:
					{
					setState(3176);
					physical_attributes_clause();
					}
					break;
				case TABLESPACE:
					{
					setState(3177);
					match(TABLESPACE);
					setState(3178);
					((Segment_attributes_clauseContext)_localctx).tablespace_name = id_expression();
					}
					break;
				case FILESYSTEM_LIKE_LOGGING:
				case LOGGING:
				case NOLOGGING:
					{
					setState(3179);
					logging_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3182); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_propertiesContext extends ParserRuleContext {
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Physical_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPhysical_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPhysical_properties(this);
		}
	}

	public final Physical_propertiesContext physical_properties() throws RecognitionException {
		Physical_propertiesContext _localctx = new Physical_propertiesContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_physical_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(3184);
				deferred_segment_creation();
				}
			}

			setState(3187);
			segment_attributes_clause();
			setState(3189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(3188);
				table_compression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_movement_clauseContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode MOVEMENT() { return getToken(PlSqlParser.MOVEMENT, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Row_movement_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_movement_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRow_movement_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRow_movement_clause(this);
		}
	}

	public final Row_movement_clauseContext row_movement_clause() throws RecognitionException {
		Row_movement_clauseContext _localctx = new Row_movement_clauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_row_movement_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(3191);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3194);
			match(ROW);
			setState(3195);
			match(MOVEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_archive_clauseContext extends ParserRuleContext {
		public Token flashback_archive;
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public Flashback_archive_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_archive_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFlashback_archive_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFlashback_archive_clause(this);
		}
	}

	public final Flashback_archive_clauseContext flashback_archive_clause() throws RecognitionException {
		Flashback_archive_clauseContext _localctx = new Flashback_archive_clauseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_flashback_archive_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3203);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLASHBACK:
				{
				setState(3197);
				match(FLASHBACK);
				setState(3198);
				match(ARCHIVE);
				setState(3199);
				((Flashback_archive_clauseContext)_localctx).flashback_archive = match(REGULAR_ID);
				}
				break;
			case NO:
				{
				setState(3200);
				match(NO);
				setState(3201);
				match(FLASHBACK);
				setState(3202);
				match(ARCHIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_table(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_drop_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3205);
			match(DROP);
			setState(3206);
			match(TABLE);
			setState(3207);
			tableview_name();
			setState(3208);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_columnContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Comment_on_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterComment_on_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitComment_on_column(this);
		}
	}

	public final Comment_on_columnContext comment_on_column() throws RecognitionException {
		Comment_on_columnContext _localctx = new Comment_on_columnContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_comment_on_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3210);
			match(COMMENT);
			setState(3211);
			match(ON);
			setState(3212);
			match(COLUMN);
			setState(3213);
			tableview_name();
			setState(3214);
			match(PERIOD);
			setState(3215);
			column_name();
			setState(3216);
			match(IS);
			setState(3217);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PUBLIC() { return getToken(PlSqlParser.PUBLIC, 0); }
		public TerminalNode SYNONYM() { return getToken(PlSqlParser.SYNONYM, 0); }
		public Synonym_nameContext synonym_name() {
			return getRuleContext(Synonym_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_synonym(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_create_synonym);
		int _la;
		try {
			setState(3261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3219);
				match(CREATE);
				setState(3222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(3220);
					match(OR);
					setState(3221);
					match(REPLACE);
					}
				}

				setState(3224);
				match(PUBLIC);
				setState(3225);
				match(SYNONYM);
				setState(3226);
				synonym_name();
				setState(3227);
				match(FOR);
				setState(3231);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					setState(3228);
					schema_name();
					setState(3229);
					match(PERIOD);
					}
					break;
				}
				setState(3233);
				schema_object_name();
				setState(3236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(3234);
					match(AT_SIGN);
					setState(3235);
					link_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3238);
				match(CREATE);
				setState(3241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(3239);
					match(OR);
					setState(3240);
					match(REPLACE);
					}
				}

				setState(3243);
				match(SYNONYM);
				setState(3247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(3244);
					schema_name();
					setState(3245);
					match(PERIOD);
					}
					break;
				}
				setState(3249);
				synonym_name();
				setState(3250);
				match(FOR);
				setState(3254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(3251);
					schema_name();
					setState(3252);
					match(PERIOD);
					}
					break;
				}
				setState(3256);
				schema_object_name();
				setState(3259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(3257);
					match(AT_SIGN);
					setState(3258);
					link_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_tableContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Comment_on_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterComment_on_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitComment_on_table(this);
		}
	}

	public final Comment_on_tableContext comment_on_table() throws RecognitionException {
		Comment_on_tableContext _localctx = new Comment_on_tableContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_comment_on_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263);
			match(COMMENT);
			setState(3264);
			match(ON);
			setState(3265);
			match(TABLE);
			setState(3266);
			tableview_name();
			setState(3267);
			match(IS);
			setState(3268);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Add_constraintContext add_constraint() {
			return getRuleContext(Add_constraintContext.class,0);
		}
		public Drop_constraintContext drop_constraint() {
			return getRuleContext(Drop_constraintContext.class,0);
		}
		public Enable_constraintContext enable_constraint() {
			return getRuleContext(Enable_constraintContext.class,0);
		}
		public Disable_constraintContext disable_constraint() {
			return getRuleContext(Disable_constraintContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_table(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3270);
			match(ALTER);
			setState(3271);
			match(TABLE);
			setState(3272);
			tableview_name();
			setState(3277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(3273);
				add_constraint();
				}
				break;
			case DROP:
				{
				setState(3274);
				drop_constraint();
				}
				break;
			case ENABLE:
				{
				setState(3275);
				enable_constraint();
				}
				break;
			case DISABLE:
				{
				setState(3276);
				disable_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_constraintContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public Primary_key_clauseContext primary_key_clause() {
			return getRuleContext(Primary_key_clauseContext.class,0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return getRuleContext(Foreign_key_clauseContext.class,0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return getRuleContext(Unique_key_clauseContext.class,0);
		}
		public Check_constraintContext check_constraint() {
			return getRuleContext(Check_constraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Add_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAdd_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAdd_constraint(this);
		}
	}

	public final Add_constraintContext add_constraint() throws RecognitionException {
		Add_constraintContext _localctx = new Add_constraintContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_add_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3279);
			match(ADD);
			setState(3282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3280);
				match(CONSTRAINT);
				setState(3281);
				constraint_name();
				}
			}

			setState(3288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				setState(3284);
				primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				setState(3285);
				foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				setState(3286);
				unique_key_clause();
				}
				break;
			case CHECK:
				{
				setState(3287);
				check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_constraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCheck_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCheck_constraint(this);
		}
	}

	public final Check_constraintContext check_constraint() throws RecognitionException {
		Check_constraintContext _localctx = new Check_constraintContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_check_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3290);
			match(CHECK);
			setState(3291);
			match(LEFT_PAREN);
			setState(3292);
			condition();
			setState(3293);
			match(RIGHT_PAREN);
			setState(3295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3294);
				match(DISABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_constraintContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_constraint(this);
		}
	}

	public final Drop_constraintContext drop_constraint() throws RecognitionException {
		Drop_constraintContext _localctx = new Drop_constraintContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_drop_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3297);
			match(DROP);
			setState(3298);
			match(CONSTRAINT);
			setState(3299);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_constraintContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Enable_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterEnable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitEnable_constraint(this);
		}
	}

	public final Enable_constraintContext enable_constraint() throws RecognitionException {
		Enable_constraintContext _localctx = new Enable_constraintContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_enable_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3301);
			match(ENABLE);
			setState(3302);
			match(CONSTRAINT);
			setState(3303);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disable_constraintContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Disable_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDisable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDisable_constraint(this);
		}
	}

	public final Disable_constraintContext disable_constraint() throws RecognitionException {
		Disable_constraintContext _localctx = new Disable_constraintContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_disable_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3305);
			match(DISABLE);
			setState(3306);
			match(CONSTRAINT);
			setState(3307);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_key_clauseContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(PlSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public On_delete_clauseContext on_delete_clause() {
			return getRuleContext(On_delete_clauseContext.class,0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterForeign_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitForeign_key_clause(this);
		}
	}

	public final Foreign_key_clauseContext foreign_key_clause() throws RecognitionException {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_foreign_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3309);
			match(FOREIGN);
			setState(3310);
			match(KEY);
			setState(3311);
			paren_column_list();
			setState(3312);
			references_clause();
			setState(3314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3313);
				on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(PlSqlParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferences_clause(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_references_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3316);
			match(REFERENCES);
			setState(3317);
			tableview_name();
			setState(3318);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_delete_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOn_delete_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOn_delete_clause(this);
		}
	}

	public final On_delete_clauseContext on_delete_clause() throws RecognitionException {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_on_delete_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3320);
			match(ON);
			setState(3321);
			match(DELETE);
			setState(3325);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				{
				setState(3322);
				match(CASCADE);
				}
				break;
			case SET:
				{
				setState(3323);
				match(SET);
				setState(3324);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_key_clauseContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Unique_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnique_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnique_key_clause(this);
		}
	}

	public final Unique_key_clauseContext unique_key_clause() throws RecognitionException {
		Unique_key_clauseContext _localctx = new Unique_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_unique_key_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3327);
			match(UNIQUE);
			setState(3328);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_key_clauseContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(PlSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Primary_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPrimary_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPrimary_key_clause(this);
		}
	}

	public final Primary_key_clauseContext primary_key_clause() throws RecognitionException {
		Primary_key_clauseContext _localctx = new Primary_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_primary_key_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3330);
			match(PRIMARY);
			setState(3331);
			match(KEY);
			setState(3332);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_blockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAnonymous_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAnonymous_block(this);
		}
	}

	public final Anonymous_blockContext anonymous_block() throws RecognitionException {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_anonymous_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(3334);
				match(DECLARE);
				setState(3335);
				seq_of_declare_specs();
				}
			}

			setState(3338);
			match(BEGIN);
			setState(3339);
			seq_of_statements();
			setState(3346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(3340);
				match(EXCEPTION);
				setState(3342); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3341);
					exception_handler();
					}
					}
					setState(3344); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(3348);
			match(END);
			setState(3349);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInvoker_rights_clause(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3351);
			match(AUTHID);
			setState(3352);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompiler_parameters_clause(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3354);
			identifier();
			setState(3355);
			match(EQUALS_OP);
			setState(3356);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCall_spec(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			match(LANGUAGE);
			setState(3361);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(3359);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(3360);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJava_spec(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3363);
			match(JAVA);
			setState(3364);
			match(NAME);
			setState(3365);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_spec(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3367);
			match(C_LETTER);
			setState(3370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(3368);
				match(NAME);
				setState(3369);
				match(CHAR_STRING);
				}
			}

			setState(3372);
			match(LIBRARY);
			setState(3373);
			identifier();
			setState(3375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(3374);
				c_agent_in_clause();
				}
			}

			setState(3379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3377);
				match(WITH);
				setState(3378);
				match(CONTEXT);
				}
			}

			setState(3382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(3381);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_agent_in_clause(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_c_agent_in_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3384);
			match(AGENT);
			setState(3385);
			match(IN);
			setState(3386);
			match(LEFT_PAREN);
			setState(3387);
			expressions();
			setState(3388);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_parameters_clause(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_c_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3390);
			match(PARAMETERS);
			setState(3391);
			match(LEFT_PAREN);
			setState(3396);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3392);
				expressions();
				}
				break;
			case PERIOD:
				{
				setState(3393);
				match(PERIOD);
				setState(3394);
				match(PERIOD);
				setState(3395);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3398);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PlSqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(PlSqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(PlSqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(PlSqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(PlSqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(PlSqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(PlSqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3400);
			parameter_name();
			setState(3404);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3401);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(3406);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
			}
			setState(3408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(3407);
				type_spec();
				}
				break;
			}
			setState(3411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(3410);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDefault_value_part(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3413);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3414);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_declare_specsContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Seq_of_declare_specsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_declare_specs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeq_of_declare_specs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeq_of_declare_specs(this);
		}
	}

	public final Seq_of_declare_specsContext seq_of_declare_specs() throws RecognitionException {
		Seq_of_declare_specsContext _localctx = new Seq_of_declare_specsContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_seq_of_declare_specs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3417); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3416);
					declare_spec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3419); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,406,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDeclare_spec(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_declare_spec);
		try {
			setState(3431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3421);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3422);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3423);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3424);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3425);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3426);
				type_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3427);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3428);
				function_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3429);
				procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3430);
				function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVariable_declaration(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3433);
			identifier();
			setState(3435);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3434);
				match(CONSTANT);
				}
				break;
			}
			setState(3437);
			type_spec();
			setState(3440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3438);
				match(NOT);
				setState(3439);
				match(NULL);
				}
			}

			setState(3443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(3442);
				default_value_part();
				}
			}

			setState(3445);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubtype_declaration(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3447);
			match(SUBTYPE);
			setState(3448);
			identifier();
			setState(3449);
			match(IS);
			setState(3450);
			type_spec();
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(3451);
				match(RANGE);
				setState(3452);
				expression();
				setState(3453);
				match(DOUBLE_PERIOD);
				setState(3454);
				expression();
				}
			}

			setState(3460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3458);
				match(NOT);
				setState(3459);
				match(NULL);
				}
			}

			setState(3462);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_declaration(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3464);
			match(CURSOR);
			setState(3465);
			identifier();
			setState(3477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3466);
				match(LEFT_PAREN);
				setState(3471); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3468);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3467);
						match(COMMA);
						}
					}

					setState(3470);
					parameter_spec();
					}
					}
					setState(3473); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				setState(3475);
				match(RIGHT_PAREN);
				}
			}

			setState(3481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3479);
				match(RETURN);
				setState(3480);
				type_spec();
				}
			}

			setState(3485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(3483);
				match(IS);
				setState(3484);
				select_statement();
				}
			}

			setState(3487);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter_spec(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3489);
			parameter_name();
			setState(3494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(3491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(3490);
					match(IN);
					}
				}

				setState(3493);
				type_spec();
				}
				break;
			}
			setState(3497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(3496);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_declaration(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3499);
			identifier();
			setState(3500);
			match(EXCEPTION);
			setState(3501);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdentifierContext id1;
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_declaration(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3503);
			match(PRAGMA);
			setState(3534);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(3504);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(3505);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(3506);
				match(EXCEPTION_INIT);
				setState(3507);
				match(LEFT_PAREN);
				setState(3508);
				exception_name();
				setState(3509);
				match(COMMA);
				setState(3510);
				numeric_negative();
				setState(3511);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(3513);
				match(INLINE);
				setState(3514);
				match(LEFT_PAREN);
				setState(3515);
				((Pragma_declarationContext)_localctx).id1 = identifier();
				setState(3516);
				match(COMMA);
				setState(3517);
				expression();
				setState(3518);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(3520);
				match(RESTRICT_REFERENCES);
				setState(3521);
				match(LEFT_PAREN);
				setState(3524);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(3522);
					identifier();
					}
					break;
				case DEFAULT:
					{
					setState(3523);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3528); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3526);
					match(COMMA);
					setState(3527);
					identifier();
					}
					}
					setState(3530); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3532);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3536);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_defContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public Record_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRecord_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRecord_type_def(this);
		}
	}

	public final Record_type_defContext record_type_def() throws RecognitionException {
		Record_type_defContext _localctx = new Record_type_defContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_record_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3538);
			match(RECORD);
			setState(3539);
			match(LEFT_PAREN);
			setState(3544); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3540);
					match(COMMA);
					}
				}

				setState(3543);
				field_spec();
				}
				}
				setState(3546); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(3548);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitField_spec(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3550);
			column_name();
			setState(3552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3551);
				type_spec();
				}
				break;
			}
			setState(3556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3554);
				match(NOT);
				setState(3555);
				match(NULL);
				}
			}

			setState(3559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(3558);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ref_cursor_type_defContext extends ParserRuleContext {
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Ref_cursor_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ref_cursor_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRef_cursor_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRef_cursor_type_def(this);
		}
	}

	public final Ref_cursor_type_defContext ref_cursor_type_def() throws RecognitionException {
		Ref_cursor_type_defContext _localctx = new Ref_cursor_type_defContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_ref_cursor_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561);
			match(REF);
			setState(3562);
			match(CURSOR);
			setState(3565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3563);
				match(RETURN);
				setState(3564);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_declarationContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Table_type_defContext table_type_def() {
			return getRuleContext(Table_type_defContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Record_type_defContext record_type_def() {
			return getRuleContext(Record_type_defContext.class,0);
		}
		public Ref_cursor_type_defContext ref_cursor_type_def() {
			return getRuleContext(Ref_cursor_type_defContext.class,0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_declaration(this);
		}
	}

	public final Type_declarationContext type_declaration() throws RecognitionException {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_type_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3567);
			match(TYPE);
			setState(3568);
			identifier();
			setState(3569);
			match(IS);
			setState(3574);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(3570);
				table_type_def();
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(3571);
				varray_type_def();
				}
				break;
			case RECORD:
				{
				setState(3572);
				record_type_def();
				}
				break;
			case REF:
				{
				setState(3573);
				ref_cursor_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3576);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_type_def(this);
		}
	}

	public final Table_type_defContext table_type_def() throws RecognitionException {
		Table_type_defContext _localctx = new Table_type_defContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_table_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3578);
			match(TABLE);
			setState(3579);
			match(OF);
			setState(3580);
			type_spec();
			setState(3582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXED || _la==INDEX) {
				{
				setState(3581);
				table_indexed_by_part();
				}
			}

			setState(3586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3584);
				match(NOT);
				setState(3585);
				match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_indexed_by_part(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(3588);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(3589);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3592);
			match(BY);
			setState(3593);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVarray_type_def(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3598);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(3595);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(3596);
				match(VARYING);
				setState(3597);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3600);
			match(LEFT_PAREN);
			setState(3601);
			expression();
			setState(3602);
			match(RIGHT_PAREN);
			setState(3603);
			match(OF);
			setState(3604);
			type_spec();
			setState(3607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3605);
				match(NOT);
				setState(3606);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(PlSqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(PlSqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeq_of_statements(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3613); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3613);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
					case 1:
						{
						setState(3609);
						statement();
						setState(3610);
						_la = _input.LA(1);
						if ( !(_la==EOF || _la==SEMICOLON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(3612);
						label_declaration();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3615); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,437,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLabel_declaration(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3617);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(3618);
			match(LESS_THAN_OP);
			setState(3619);
			label_name();
			setState(3620);
			match(GREATER_THAN_OP);
			setState(3621);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Pipe_row_statementContext pipe_row_statement() {
			return getRuleContext(Pipe_row_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_statement);
		try {
			setState(3643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3623);
				match(CREATE);
				setState(3624);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3625);
				match(TRUNCATE);
				setState(3626);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3627);
				body();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3628);
				block();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3629);
				assignment_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3630);
				continue_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3631);
				exit_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3632);
				goto_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3633);
				if_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3634);
				loop_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3635);
				forall_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3636);
				null_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3637);
				raise_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3638);
				return_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3639);
				case_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3640);
				sql_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3641);
				function_call();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3642);
				pipe_row_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSwallow_to_semi(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3646); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3645);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(3648); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ACCOUNT) | (1L << ADD) | (1L << ADMIN) | (1L << ADMINISTER) | (1L << ADVISOR) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << ASYNCHRONOUS) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHENTICATED) | (1L << AUTHENTICATION) | (1L << AUTHID) | (1L << AUTOALLOCATE) | (1L << AUTO) | (1L << AUTOEXTEND) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BACKUP) | (1L << BASIC) | (1L << BATCH) | (1L << BECOME) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BIGFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BUILD) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CERTIFICATE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (CLASS - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPLETE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (COMPUTE - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONNECT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINER - 64)) | (1L << (CONTAINER_DATA - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATAFILE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DBA_RECYCLEBIN - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRABLE - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINE - 128)) | (1L << (DEFINER - 128)) | (1L << (DELEGATE - 128)) | (1L << (DELETE - 128)) | (1L << (DEMAND - 128)) | (1L << (DEPTH - 128)) | (1L << (DESC - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DIMENSION - 128)) | (1L << (DIRECTORY - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DISTINGUISHED - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (EDITION - 128)) | (1L << (EDITIONING - 128)) | (1L << (EDITIONS - 128)) | (1L << (ELEMENT - 128)) | (1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPT - 128)) | (1L << (ENCRYPTION - 128)) | (1L << (END - 128)) | (1L << (ENFORCED - 128)) | (1L << (ENTERPRISE - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPT - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUDING - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXEMPT - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPIRE - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTENT - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTERNALLY - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FAST - 128)) | (1L << (FETCH - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FILESYSTEM_LIKE_LOGGING - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FIRST_VALUE - 192)) | (1L << (FLASHBACK - 192)) | (1L << (FLASH_CACHE - 192)) | (1L << (FLOAT - 192)) | (1L << (FOLDER - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FOLLOWS - 192)) | (1L << (FORALL - 192)) | (1L << (FORCE - 192)) | (1L << (FOREIGN - 192)) | (1L << (FOR - 192)) | (1L << (FREELIST - 192)) | (1L << (FREELISTS - 192)) | (1L << (FROM - 192)) | (1L << (FULL - 192)) | (1L << (FUNCTION - 192)) | (1L << (GLOBAL - 192)) | (1L << (GLOBALLY - 192)) | (1L << (GOTO - 192)) | (1L << (GRANT - 192)) | (1L << (GROUP - 192)) | (1L << (GROUPING - 192)) | (1L << (GROUPS - 192)) | (1L << (GUARANTEE - 192)) | (1L << (HASH - 192)) | (1L << (HAVING - 192)) | (1L << (HIDE - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HIGH - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTIFIED - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (ID - 192)) | (1L << (IF - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (INCLUDE - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDENT - 192)) | (1L << (INDEXED - 192)) | (1L << (INDEX - 192)) | (1L << (INDEXTYPE - 192)) | (1L << (INDICATOR - 192)) | (1L << (INDICES - 192)) | (1L << (INFINITE - 192)) | (1L << (INHERIT - 192)) | (1L << (IN - 192)) | (1L << (INITIAL - 192)) | (1L << (INITIALLY - 192)) | (1L << (INITRANS - 192)) | (1L << (INLINE - 192)) | (1L << (INNER - 192)) | (1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INTO - 256)) | (1L << (INVALIDATE - 256)) | (1L << (IS - 256)) | (1L << (ISOLATION - 256)) | (1L << (ITERATE - 256)) | (1L << (JAVA - 256)) | (1L << (JOB - 256)) | (1L << (JOIN - 256)) | (1L << (KEEP - 256)) | (1L << (KEY - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LAST - 256)) | (1L << (LAST_VALUE - 256)) | (1L << (LEADING - 256)) | (1L << (LEFT - 256)) | (1L << (LESS - 256)) | (1L << (LEVEL - 256)) | (1L << (LIBRARY - 256)) | (1L << (LIKE2 - 256)) | (1L << (LIKE4 - 256)) | (1L << (LIKEC - 256)) | (1L << (LIKE - 256)) | (1L << (LIMIT - 256)) | (1L << (LINK - 256)) | (1L << (LIST - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCKED - 256)) | (1L << (LOCK - 256)) | (1L << (LOGGING - 256)) | (1L << (LOG - 256)) | (1L << (LOGMINING - 256)) | (1L << (LOGOFF - 256)) | (1L << (LOGON - 256)) | (1L << (LONG - 256)) | (1L << (LOOP - 256)) | (1L << (LOW - 256)) | (1L << (MAIN - 256)) | (1L << (MANAGE - 256)) | (1L << (MANAGEMENT - 256)) | (1L << (MANUAL - 256)) | (1L << (MAP - 256)) | (1L << (MASTER - 256)) | (1L << (MATCHED - 256)) | (1L << (MATERIALIZED - 256)) | (1L << (MAXSIZE - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEASURE - 256)) | (1L << (MEASURES - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MINEXTENTS - 256)) | (1L << (MINIMUM - 256)) | (1L << (MINING - 256)) | (1L << (MINUS - 256)) | (1L << (MINUTE - 256)) | (1L << (MINVALUE - 256)) | (1L << (MLSLABEL - 256)) | (1L << (MODEL - 256)) | (1L << (MODE - 256)) | (1L << (MODIFY - 256)) | (1L << (MONTH - 256)) | (1L << (MOVEMENT - 256)) | (1L << (MULTISET - 256)) | (1L << (NAME - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NAN - 320)) | (1L << (NATURAL - 320)) | (1L << (NATURALN - 320)) | (1L << (NAV - 320)) | (1L << (NCHAR_CS - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTED - 320)) | (1L << (NEVER - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NOAUDIT - 320)) | (1L << (NOCACHE - 320)) | (1L << (NOCOMPRESS - 320)) | (1L << (NOCOPY - 320)) | (1L << (NOCYCLE - 320)) | (1L << (NOENTITYESCAPING - 320)) | (1L << (NOGUARANTEE - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOMAXVALUE - 320)) | (1L << (NOMINVALUE - 320)) | (1L << (NONE - 320)) | (1L << (NO - 320)) | (1L << (NOORDER - 320)) | (1L << (NOPARALLEL - 320)) | (1L << (NORELY - 320)) | (1L << (NOSCHEMACHECK - 320)) | (1L << (NOTIFICATION - 320)) | (1L << (NOT - 320)) | (1L << (NOVALIDATE - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULL - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (NVARCHAR2 - 320)) | (1L << (OBJECT - 320)) | (1L << (OFFLINE - 320)) | (1L << (OFF - 320)) | (1L << (OF - 320)) | (1L << (OID - 320)) | (1L << (OLD - 320)) | (1L << (OLTP - 320)) | (1L << (ONLINE - 320)) | (1L << (ONLY - 320)) | (1L << (ON - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTIMAL - 320)) | (1L << (OPTION - 320)) | (1L << (ORADATA - 320)) | (1L << (ORDER - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OR - 320)) | (1L << (OSERROR - 320)) | (1L << (OUTER - 320)) | (1L << (OUTLINE - 320)) | (1L << (OUT - 320)) | (1L << (OVER - 320)) | (1L << (OVERRIDING - 320)) | (1L << (PACKAGE - 320)) | (1L << (PARALLEL_ENABLE - 320)) | (1L << (PARALLEL - 320)) | (1L << (PARAMETERS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (PARENT - 384)) | (1L << (PARTITION - 384)) | (1L << (PASSING - 384)) | (1L << (PASSWORD - 384)) | (1L << (PATH - 384)) | (1L << (PCTFREE - 384)) | (1L << (PCTINCREASE - 384)) | (1L << (PCTUSED - 384)) | (1L << (PERCENT_FOUND - 384)) | (1L << (PERCENT_ISOPEN - 384)) | (1L << (PERCENT_NOTFOUND - 384)) | (1L << (PERCENT_ROWCOUNT - 384)) | (1L << (PERCENT_ROWTYPE - 384)) | (1L << (PERCENT_TYPE - 384)) | (1L << (PIPELINED - 384)) | (1L << (PIPE - 384)) | (1L << (PIVOT - 384)) | (1L << (PLAN - 384)) | (1L << (PLS_INTEGER - 384)) | (1L << (PLUGGABLE - 384)) | (1L << (POLICY - 384)) | (1L << (POSITIVEN - 384)) | (1L << (POSITIVE - 384)) | (1L << (PRAGMA - 384)) | (1L << (PREBUILT - 384)) | (1L << (PRECEDING - 384)) | (1L << (PRECISION - 384)) | (1L << (PRESENT - 384)) | (1L << (PRESERVE - 384)) | (1L << (PRIMARY - 384)) | (1L << (PRIOR - 384)) | (1L << (PRIVILEGE - 384)) | (1L << (PRIVILEGES - 384)) | (1L << (PROCEDURE - 384)) | (1L << (PROCESS - 384)) | (1L << (PROFILE - 384)) | (1L << (PROGRAM - 384)) | (1L << (PUBLIC - 384)) | (1L << (PURGE - 384)) | (1L << (QUERY - 384)) | (1L << (QUOTA - 384)) | (1L << (RAISE - 384)) | (1L << (RANGE - 384)) | (1L << (RAW - 384)) | (1L << (READ - 384)) | (1L << (REAL - 384)) | (1L << (RECORD - 384)) | (1L << (RECYCLE - 384)) | (1L << (REDACTION - 384)) | (1L << (REDUCED - 384)) | (1L << (REFERENCE - 384)) | (1L << (REFERENCES - 384)) | (1L << (REFERENCING - 384)) | (1L << (REF - 384)) | (1L << (REFRESH - 384)) | (1L << (REJECT - 384)) | (1L << (RELIES_ON - 384)) | (1L << (RELY - 384)) | (1L << (REMOVE - 384)) | (1L << (RENAME - 384)) | (1L << (REPLACE - 384)) | (1L << (REQUIRED - 384)) | (1L << (RESOURCE - 384)) | (1L << (RESPECT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (RESTRICTED - 448)) | (1L << (RESTRICT_REFERENCES - 448)) | (1L << (RESULT_CACHE - 448)) | (1L << (RESULT - 448)) | (1L << (RESUMABLE - 448)) | (1L << (RETENTION - 448)) | (1L << (RETURNING - 448)) | (1L << (RETURN - 448)) | (1L << (REUSE - 448)) | (1L << (REVERSE - 448)) | (1L << (REVOKE - 448)) | (1L << (REWRITE - 448)) | (1L << (RIGHT - 448)) | (1L << (ROLE - 448)) | (1L << (ROLES - 448)) | (1L << (ROLLBACK - 448)) | (1L << (ROLLUP - 448)) | (1L << (ROWID - 448)) | (1L << (ROW - 448)) | (1L << (ROWS - 448)) | (1L << (RULES - 448)) | (1L << (SALT - 448)) | (1L << (SAMPLE - 448)) | (1L << (SAVEPOINT - 448)) | (1L << (SAVE - 448)) | (1L << (SCHEDULER - 448)) | (1L << (SCHEMACHECK - 448)) | (1L << (SCHEMA - 448)) | (1L << (SCN - 448)) | (1L << (SEARCH - 448)) | (1L << (SECOND - 448)) | (1L << (SEED - 448)) | (1L << (SEGMENT - 448)) | (1L << (SELECT - 448)) | (1L << (SELF - 448)) | (1L << (SEQUENCE - 448)) | (1L << (SEQUENTIAL - 448)) | (1L << (SERIALIZABLE - 448)) | (1L << (SERIALLY_REUSABLE - 448)) | (1L << (SERVERERROR - 448)) | (1L << (SESSION - 448)) | (1L << (SESSIONTIMEZONE - 448)) | (1L << (SET - 448)) | (1L << (SETS - 448)) | (1L << (SETTINGS - 448)) | (1L << (SHARE - 448)) | (1L << (SHOW - 448)) | (1L << (SHUTDOWN - 448)) | (1L << (SIBLINGS - 448)) | (1L << (SIGNTYPE - 448)) | (1L << (SIMPLE_INTEGER - 448)) | (1L << (SINGLE - 448)) | (1L << (SIZE - 448)) | (1L << (SKIP_ - 448)) | (1L << (SMALLFILE - 448)) | (1L << (SMALLINT - 448)) | (1L << (SNAPSHOT - 448)) | (1L << (SOME - 448)) | (1L << (SORT - 448)) | (1L << (SOURCE - 448)) | (1L << (SPACE_KEYWORD - 448)) | (1L << (SPECIFICATION - 448)) | (1L << (SQLDATA - 448)) | (1L << (SQLERROR - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (SQL - 512)) | (1L << (STANDALONE - 512)) | (1L << (START - 512)) | (1L << (STARTUP - 512)) | (1L << (STATEMENT_ID - 512)) | (1L << (STATEMENT - 512)) | (1L << (STATIC - 512)) | (1L << (STATISTICS - 512)) | (1L << (STORAGE - 512)) | (1L << (STORE - 512)) | (1L << (STRING - 512)) | (1L << (SUBMULTISET - 512)) | (1L << (SUBPARTITION - 512)) | (1L << (SUBSTITUTABLE - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUCCESS - 512)) | (1L << (SUSPEND - 512)) | (1L << (SYNCHRONOUS - 512)) | (1L << (SYNONYM - 512)) | (1L << (SYSBACKUP - 512)) | (1L << (SYSDATE - 512)) | (1L << (SYSDBA - 512)) | (1L << (SYSDG - 512)) | (1L << (SYSGUID - 512)) | (1L << (SYSKM - 512)) | (1L << (SYSOPER - 512)) | (1L << (TABLESPACE - 512)) | (1L << (TABLE - 512)) | (1L << (TEMPFILE - 512)) | (1L << (TEMPORARY - 512)) | (1L << (THAN - 512)) | (1L << (THEN - 512)) | (1L << (THE - 512)) | (1L << (THROUGH - 512)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 512)) | (1L << (TIMESTAMP_UNCONSTRAINED - 512)) | (1L << (TIME - 512)) | (1L << (TIMEZONE_ABBR - 512)) | (1L << (TIMEZONE_HOUR - 512)) | (1L << (TIMEZONE_MINUTE - 512)) | (1L << (TIMEZONE_REGION - 512)) | (1L << (TO - 512)) | (1L << (TRAILING - 512)) | (1L << (TRANSACTION - 512)) | (1L << (TRANSLATE - 512)) | (1L << (TRANSLATION - 512)) | (1L << (TREAT - 512)) | (1L << (TRIGGER - 512)) | (1L << (TRUE - 512)) | (1L << (TRUNCATE - 512)) | (1L << (TRUSTED - 512)) | (1L << (TUNING - 512)) | (1L << (TYPE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (UNDER - 512)) | (1L << (UNDO - 512)) | (1L << (UNIFORM - 512)) | (1L << (UNION - 512)) | (1L << (UNIQUE - 512)) | (1L << (UNLIMITED - 512)) | (1L << (UNLOCK - 512)) | (1L << (UNPIVOT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (UNTIL - 576)) | (1L << (UPDATED - 576)) | (1L << (UPDATE - 576)) | (1L << (UPSERT - 576)) | (1L << (UROWID - 576)) | (1L << (USERS - 576)) | (1L << (USER - 576)) | (1L << (USE - 576)) | (1L << (USING - 576)) | (1L << (VALIDATE - 576)) | (1L << (VALUES - 576)) | (1L << (VALUE - 576)) | (1L << (VARCHAR2 - 576)) | (1L << (VARCHAR - 576)) | (1L << (VARIABLE - 576)) | (1L << (VARRAY - 576)) | (1L << (VARYING - 576)) | (1L << (VERSIONS - 576)) | (1L << (VERSION - 576)) | (1L << (VIEW - 576)) | (1L << (WAIT - 576)) | (1L << (WARNING - 576)) | (1L << (WELLFORMED - 576)) | (1L << (WHENEVER - 576)) | (1L << (WHEN - 576)) | (1L << (WHERE - 576)) | (1L << (WHILE - 576)) | (1L << (WITHIN - 576)) | (1L << (WITHOUT - 576)) | (1L << (WITH - 576)) | (1L << (WORK - 576)) | (1L << (WRITE - 576)) | (1L << (XMLAGG - 576)) | (1L << (XMLATTRIBUTES - 576)) | (1L << (XMLCAST - 576)) | (1L << (XMLCOLATTVAL - 576)) | (1L << (XMLELEMENT - 576)) | (1L << (XMLEXISTS - 576)) | (1L << (XMLFOREST - 576)) | (1L << (XMLNAMESPACES - 576)) | (1L << (XMLPARSE - 576)) | (1L << (XMLPI - 576)) | (1L << (XMLQUERY - 576)) | (1L << (XMLROOT - 576)) | (1L << (XMLSERIALIZE - 576)) | (1L << (XMLTABLE - 576)) | (1L << (XML - 576)) | (1L << (YEAR - 576)) | (1L << (YES - 576)) | (1L << (YMINTERVAL_UNCONSTRAINED - 576)) | (1L << (ZONE - 576)) | (1L << (PREDICTION - 576)) | (1L << (PREDICTION_BOUNDS - 576)) | (1L << (PREDICTION_COST - 576)) | (1L << (PREDICTION_DETAILS - 576)) | (1L << (PREDICTION_PROBABILITY - 576)) | (1L << (PREDICTION_SET - 576)) | (1L << (CUME_DIST - 576)) | (1L << (DENSE_RANK - 576)) | (1L << (LISTAGG - 576)) | (1L << (PERCENT_RANK - 576)) | (1L << (PERCENTILE_CONT - 576)) | (1L << (PERCENTILE_DISC - 576)) | (1L << (RANK - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (AVG - 640)) | (1L << (CORR - 640)) | (1L << (COVAR_ - 640)) | (1L << (DECODE - 640)) | (1L << (LAG - 640)) | (1L << (LEAD - 640)) | (1L << (MAX - 640)) | (1L << (MEDIAN - 640)) | (1L << (MIN - 640)) | (1L << (NTILE - 640)) | (1L << (NVL - 640)) | (1L << (RATIO_TO_REPORT - 640)) | (1L << (REGR_ - 640)) | (1L << (ROUND - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (SUBSTR - 640)) | (1L << (TO_CHAR - 640)) | (1L << (TRIM - 640)) | (1L << (SUM - 640)) | (1L << (STDDEV - 640)) | (1L << (VAR_ - 640)) | (1L << (VARIANCE - 640)) | (1L << (LEAST - 640)) | (1L << (GREATEST - 640)) | (1L << (TO_DATE - 640)) | (1L << (NATIONAL_CHAR_STRING_LIT - 640)) | (1L << (BIT_STRING_LIT - 640)) | (1L << (HEX_STRING_LIT - 640)) | (1L << (DOUBLE_PERIOD - 640)) | (1L << (PERIOD - 640)) | (1L << (UNSIGNED_INTEGER - 640)) | (1L << (APPROXIMATE_NUM_LIT - 640)) | (1L << (CHAR_STRING - 640)) | (1L << (DELIMITED_ID - 640)) | (1L << (PERCENT - 640)) | (1L << (AMPERSAND - 640)) | (1L << (LEFT_PAREN - 640)) | (1L << (RIGHT_PAREN - 640)) | (1L << (DOUBLE_ASTERISK - 640)) | (1L << (ASTERISK - 640)) | (1L << (PLUS_SIGN - 640)) | (1L << (MINUS_SIGN - 640)) | (1L << (COMMA - 640)) | (1L << (SOLIDUS - 640)) | (1L << (AT_SIGN - 640)) | (1L << (ASSIGN_OP - 640)) | (1L << (BINDVAR - 640)) | (1L << (NOT_EQUAL_OP - 640)) | (1L << (CARRET_OPERATOR_PART - 640)) | (1L << (TILDE_OPERATOR_PART - 640)) | (1L << (EXCLAMATION_OPERATOR_PART - 640)) | (1L << (GREATER_THAN_OP - 640)) | (1L << (LESS_THAN_OP - 640)) | (1L << (COLON - 640)) | (1L << (BAR - 640)) | (1L << (EQUALS_OP - 640)) | (1L << (LEFT_BRACKET - 640)) | (1L << (RIGHT_BRACKET - 640)) | (1L << (INTRODUCER - 640)) | (1L << (SPACES - 640)) | (1L << (SINGLE_LINE_COMMENT - 640)) | (1L << (MULTI_LINE_COMMENT - 640)) | (1L << (PROMPT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (START_CMD - 704)) | (1L << (REGULAR_ID - 704)) | (1L << (ZV - 704)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAssignment_statement(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3652);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3650);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(3651);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3654);
			match(ASSIGN_OP);
			setState(3655);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3657);
			match(CONTINUE);
			setState(3659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(3658);
				label_name();
				}
			}

			setState(3663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(3661);
				match(WHEN);
				setState(3662);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExit_statement(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3665);
			match(EXIT);
			setState(3667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(3666);
				label_name();
				}
			}

			setState(3671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(3669);
				match(WHEN);
				setState(3670);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGoto_statement(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3673);
			match(GOTO);
			setState(3674);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PlSqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIf_statement(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3676);
			match(IF);
			setState(3677);
			condition();
			setState(3678);
			match(THEN);
			setState(3679);
			seq_of_statements();
			setState(3683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(3680);
				elsif_part();
				}
				}
				setState(3685);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3686);
				else_part();
				}
			}

			setState(3689);
			match(END);
			setState(3690);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElsif_part(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3692);
			match(ELSIF);
			setState(3693);
			condition();
			setState(3694);
			match(THEN);
			setState(3695);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElse_part(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3697);
			match(ELSE);
			setState(3698);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PlSqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Label_declarationContext label_declaration() {
			return getRuleContext(Label_declarationContext.class,0);
		}
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLoop_statement(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LESS_THAN_OP) {
				{
				setState(3700);
				label_declaration();
				}
			}

			setState(3707);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(3703);
				match(WHILE);
				setState(3704);
				condition();
				}
				break;
			case FOR:
				{
				setState(3705);
				match(FOR);
				setState(3706);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(3709);
			match(LOOP);
			setState(3710);
			seq_of_statements();
			setState(3711);
			match(END);
			setState(3712);
			match(LOOP);
			setState(3714);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(3713);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Token range_separator;
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_loop_param(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_cursor_loop_param);
		int _la;
		try {
			setState(3741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3716);
				index_name();
				setState(3717);
				match(IN);
				setState(3719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(3718);
					match(REVERSE);
					}
					break;
				}
				setState(3721);
				lower_bound();
				setState(3722);
				((Cursor_loop_paramContext)_localctx).range_separator = match(DOUBLE_PERIOD);
				setState(3723);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3725);
				record_name();
				setState(3726);
				match(IN);
				setState(3739);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(3727);
					cursor_name();
					setState(3733);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(3728);
						match(LEFT_PAREN);
						setState(3730);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
							{
							setState(3729);
							expressions();
							}
						}

						setState(3732);
						match(RIGHT_PAREN);
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(3735);
					match(LEFT_PAREN);
					setState(3736);
					select_statement();
					setState(3737);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitForall_statement(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3743);
			match(FORALL);
			setState(3744);
			index_name();
			setState(3745);
			match(IN);
			setState(3746);
			bounds_clause();
			setState(3747);
			sql_statement();
			setState(3750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(3748);
				match(SAVE);
				setState(3749);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBounds_clause(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_bounds_clause);
		int _la;
		try {
			setState(3765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3752);
				lower_bound();
				setState(3753);
				match(DOUBLE_PERIOD);
				setState(3754);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3756);
				match(INDICES);
				setState(3757);
				match(OF);
				setState(3758);
				collection_name();
				setState(3760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(3759);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3762);
				match(VALUES);
				setState(3763);
				match(OF);
				setState(3764);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBetween_bound(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3767);
			match(BETWEEN);
			setState(3768);
			lower_bound();
			setState(3769);
			match(AND);
			setState(3770);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLower_bound(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3772);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpper_bound(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3774);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNull_statement(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3776);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRaise_statement(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3778);
			match(RAISE);
			setState(3780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(3779);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3782);
			match(RETURN);
			setState(3784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(3783);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_call(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				setState(3786);
				match(CALL);
				}
				break;
			}
			setState(3789);
			routine_name();
			setState(3791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3790);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pipe_row_statementContext extends ParserRuleContext {
		public TerminalNode PIPE() { return getToken(PlSqlParser.PIPE, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Pipe_row_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pipe_row_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPipe_row_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPipe_row_statement(this);
		}
	}

	public final Pipe_row_statementContext pipe_row_statement() throws RecognitionException {
		Pipe_row_statementContext _localctx = new Pipe_row_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_pipe_row_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3793);
			match(PIPE);
			setState(3794);
			match(ROW);
			setState(3795);
			match(LEFT_PAREN);
			setState(3796);
			expression();
			setState(3797);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBody(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			match(BEGIN);
			setState(3800);
			seq_of_statements();
			setState(3807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(3801);
				match(EXCEPTION);
				setState(3803); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3802);
					exception_handler();
					}
					}
					setState(3805); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(3809);
			match(END);
			setState(3811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				{
				setState(3810);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_handler(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3813);
			match(WHEN);
			setState(3814);
			exception_name();
			setState(3819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(3815);
				match(OR);
				setState(3816);
				exception_name();
				}
				}
				setState(3821);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3822);
			match(THEN);
			setState(3823);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_block(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECLARE - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(3826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(3825);
					match(DECLARE);
					}
				}

				setState(3829); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3828);
					declare_spec();
					}
					}
					setState(3831); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				}
			}

			setState(3835);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBlock(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(3837);
				match(DECLARE);
				}
			}

			setState(3841); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3840);
				declare_spec();
				}
				}
				setState(3843); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROCEDURE - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(3845);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_statement(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_sql_statement);
		try {
			setState(3851);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3847);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3848);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3849);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3850);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExecute_immediate(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3853);
			match(EXECUTE);
			setState(3854);
			match(IMMEDIATE);
			setState(3855);
			expression();
			setState(3865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(3856);
				into_clause();
				setState(3858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3857);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(3860);
				using_clause();
				setState(3862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					setState(3861);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURNING:
			case RETURN:
				{
				setState(3864);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDynamic_returning_clause(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3867);
			_la = _input.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3868);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitData_manipulation_language_statements(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_data_manipulation_language_statements);
		try {
			setState(3877);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3870);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3871);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3872);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3873);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3874);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3875);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(3876);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_manipulation_statements(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_cursor_manipulation_statements);
		try {
			setState(3883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3879);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3880);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3881);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3882);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitClose_statement(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3885);
			match(CLOSE);
			setState(3886);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOpen_statement(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3888);
			match(OPEN);
			setState(3889);
			cursor_name();
			setState(3895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3890);
				match(LEFT_PAREN);
				setState(3892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(3891);
					expressions();
					}
				}

				setState(3894);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFetch_statement(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_fetch_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3897);
			match(FETCH);
			setState(3898);
			cursor_name();
			setState(3919);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3899);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(3904); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3901);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3900);
							match(COMMA);
							}
						}

						setState(3903);
						variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3906); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,480,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case BULK:
				{
				setState(3908);
				match(BULK);
				setState(3909);
				match(COLLECT);
				setState(3910);
				match(INTO);
				setState(3915); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3912);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3911);
							match(COMMA);
							}
						}

						setState(3914);
						variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3917); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOpen_for_statement(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3921);
			match(OPEN);
			setState(3922);
			variable_name();
			setState(3923);
			match(FOR);
			setState(3926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(3924);
				select_statement();
				}
				break;
			case 2:
				{
				setState(3925);
				expression();
				}
				break;
			}
			setState(3929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3928);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTransaction_control_statements(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_transaction_control_statements);
		try {
			setState(3936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3931);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3932);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3933);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3934);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3935);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_transaction_command(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938);
			match(SET);
			setState(3939);
			match(TRANSACTION);
			setState(3953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(3940);
				match(READ);
				setState(3941);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				setState(3942);
				match(ISOLATION);
				setState(3943);
				match(LEVEL);
				setState(3947);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(3944);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(3945);
					match(READ);
					setState(3946);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(3949);
				match(USE);
				setState(3950);
				match(ROLLBACK);
				setState(3951);
				match(SEGMENT);
				setState(3952);
				rollback_segment_name();
				}
				break;
			}
			setState(3957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(3955);
				match(NAME);
				setState(3956);
				quoted_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_constraint_command(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_set_constraint_command);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3959);
			match(SET);
			setState(3960);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3970);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(3961);
				match(ALL);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3966); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3963);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3962);
							match(COMMA);
							}
						}

						setState(3965);
						constraint_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3968); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,491,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3972);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCommit_statement(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_commit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3974);
			match(COMMIT);
			setState(3976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(3975);
				match(WORK);
				}
				break;
			}
			setState(3991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(3978);
				match(COMMENT);
				setState(3979);
				expression();
				}
				break;
			case 2:
				{
				setState(3980);
				match(FORCE);
				setState(3989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
				case 1:
					{
					setState(3981);
					match(CORRUPT_XID);
					setState(3982);
					expression();
					}
					break;
				case 2:
					{
					setState(3983);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(3984);
					expression();
					setState(3987);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
					case 1:
						{
						setState(3985);
						match(COMMA);
						setState(3986);
						expression();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			setState(3994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(3993);
				write_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWrite_clause(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3996);
			match(WRITE);
			setState(3998);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(3997);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4000);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollback_statement(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_rollback_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4003);
			match(ROLLBACK);
			setState(4005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				setState(4004);
				match(WORK);
				}
				break;
			}
			setState(4014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(4007);
				match(TO);
				setState(4009);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					setState(4008);
					match(SAVEPOINT);
					}
					break;
				}
				setState(4011);
				savepoint_name();
				}
				break;
			case 2:
				{
				setState(4012);
				match(FORCE);
				setState(4013);
				quoted_string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSavepoint_statement(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4016);
			match(SAVEPOINT);
			setState(4017);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExplain_statement(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4019);
			match(EXPLAIN);
			setState(4020);
			match(PLAN);
			setState(4025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(4021);
				match(SET);
				setState(4022);
				match(STATEMENT_ID);
				setState(4023);
				match(EQUALS_OP);
				setState(4024);
				quoted_string();
				}
			}

			setState(4029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(4027);
				match(INTO);
				setState(4028);
				tableview_name();
				}
			}

			setState(4031);
			match(FOR);
			setState(4037);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(4032);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(4033);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(4034);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(4035);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(4036);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4039);
				subquery_factoring_clause();
				}
			}

			setState(4042);
			subquery();
			setState(4047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(4045);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(4043);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(4044);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4049);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_factoring_clause(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			match(WITH);
			setState(4055); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4051);
					match(COMMA);
					}
				}

				setState(4054);
				factoring_element();
				}
				}
				setState(4057); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFactoring_element(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4059);
			query_name();
			setState(4061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4060);
				paren_column_list();
				}
			}

			setState(4063);
			match(AS);
			setState(4064);
			match(LEFT_PAREN);
			setState(4065);
			subquery();
			setState(4067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4066);
				order_by_clause();
				}
			}

			setState(4069);
			match(RIGHT_PAREN);
			setState(4071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(4070);
				search_clause();
				}
			}

			setState(4074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(4073);
				cycle_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(PlSqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PlSqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(PlSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PlSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PlSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PlSqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(PlSqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PlSqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PlSqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PlSqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearch_clause(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4076);
			match(SEARCH);
			setState(4077);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4078);
			match(FIRST);
			setState(4079);
			match(BY);
			setState(4080);
			column_name();
			setState(4082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(4081);
				match(ASC);
				}
			}

			setState(4085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(4084);
				match(DESC);
				}
			}

			setState(4089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				setState(4087);
				match(NULLS);
				setState(4088);
				match(FIRST);
				}
				break;
			}
			setState(4093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(4091);
				match(NULLS);
				setState(4092);
				match(LAST);
				}
			}

			setState(4113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4095);
				match(COMMA);
				setState(4096);
				column_name();
				setState(4098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(4097);
					match(ASC);
					}
				}

				setState(4101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(4100);
					match(DESC);
					}
				}

				setState(4105);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(4103);
					match(NULLS);
					setState(4104);
					match(FIRST);
					}
					break;
				}
				setState(4109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(4107);
					match(NULLS);
					setState(4108);
					match(LAST);
					}
				}

				}
				}
				setState(4115);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4116);
			match(SET);
			setState(4117);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCycle_clause(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_cycle_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4119);
			match(CYCLE);
			setState(4120);
			column_list();
			setState(4121);
			match(SET);
			setState(4122);
			column_name();
			setState(4123);
			match(TO);
			setState(4124);
			expression();
			setState(4125);
			match(DEFAULT);
			setState(4126);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4128);
			subquery_basic_elements();
			setState(4132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(4129);
				subquery_operation_part();
				}
				}
				setState(4134);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_basic_elements(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_subquery_basic_elements);
		try {
			setState(4140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4135);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4136);
				match(LEFT_PAREN);
				setState(4137);
				subquery();
				setState(4138);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_operation_part(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(4142);
				match(UNION);
				setState(4144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(4143);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(4146);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(4147);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4150);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_block(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_query_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4152);
			match(SELECT);
			setState(4154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(4153);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4165);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(4156);
				match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4161); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4158);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4157);
							match(COMMA);
							}
						}

						setState(4160);
						selected_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4163); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,530,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(4167);
				into_clause();
				}
			}

			setState(4170);
			from_clause();
			setState(4172);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				setState(4171);
				where_clause();
				}
				break;
			}
			setState(4175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4174);
				hierarchical_query_clause();
				}
				break;
			}
			setState(4178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(4177);
				group_by_clause();
				}
				break;
			}
			setState(4181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				{
				setState(4180);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelected_element(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4183);
			select_list_elements();
			setState(4185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				setState(4184);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			match(FROM);
			setState(4188);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_list_elements(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_select_list_elements);
		try {
			setState(4200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4190);
				tableview_name();
				setState(4191);
				match(PERIOD);
				setState(4192);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(4194);
					regular_id();
					setState(4195);
					match(PERIOD);
					}
					break;
				}
				setState(4199);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_list(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_table_ref_list);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4206); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4203);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4202);
						match(COMMA);
						}
					}

					setState(4205);
					table_ref();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4208); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,541,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4210);
			table_ref_aux();
			setState(4214);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4211);
					join_clause();
					}
					} 
				}
				setState(4216);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
			}
			setState(4219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				setState(4217);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(4218);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Table_ref_aux_internalContext table_ref_aux_internal() {
			return getRuleContext(Table_ref_aux_internalContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_table_ref_aux);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4221);
			table_ref_aux_internal();
			setState(4225);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4222);
					flashback_query_clause();
					}
					} 
				}
				setState(4227);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
			}
			setState(4229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				setState(4228);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_aux_internalContext extends ParserRuleContext {
		public Table_ref_aux_internalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux_internal; }
	 
		public Table_ref_aux_internalContext() { }
		public void copyFrom(Table_ref_aux_internalContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Table_ref_aux_internal_threeContext extends Table_ref_aux_internalContext {
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_three(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_three(this);
		}
	}
	public static class Table_ref_aux_internal_oneContext extends Table_ref_aux_internalContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_one(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_one(this);
		}
	}
	public static class Table_ref_aux_internal_twoContext extends Table_ref_aux_internalContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_two(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_two(this);
		}
	}

	public final Table_ref_aux_internalContext table_ref_aux_internal() throws RecognitionException {
		Table_ref_aux_internalContext _localctx = new Table_ref_aux_internalContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_table_ref_aux_internal);
		int _la;
		try {
			setState(4254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				_localctx = new Table_ref_aux_internal_oneContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4231);
				dml_table_expression_clause();
				setState(4234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					setState(4232);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(4233);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_ref_aux_internal_twoContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4236);
				match(LEFT_PAREN);
				setState(4237);
				table_ref();
				setState(4241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(4238);
					subquery_operation_part();
					}
					}
					setState(4243);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4244);
				match(RIGHT_PAREN);
				setState(4247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
				case 1:
					{
					setState(4245);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(4246);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_ref_aux_internal_threeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4249);
				match(ONLY);
				setState(4250);
				match(LEFT_PAREN);
				setState(4251);
				dml_table_expression_clause();
				setState(4252);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_clause(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4256);
				query_partition_clause();
				}
			}

			setState(4260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(4259);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4264);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(4262);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(4263);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(4266);
			match(JOIN);
			setState(4267);
			table_ref_aux();
			setState(4269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				setState(4268);
				query_partition_clause();
				}
				break;
			}
			setState(4275);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,555,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4273);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(4271);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(4272);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(4277);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,555,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_on_part(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4278);
			match(ON);
			setState(4279);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_using_part(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_join_using_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4281);
			match(USING);
			setState(4282);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4284);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(4285);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_partition_clause(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_query_partition_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4288);
			match(PARTITION);
			setState(4289);
			match(BY);
			setState(4297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				{
				setState(4290);
				match(LEFT_PAREN);
				setState(4293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(4291);
					subquery();
					}
					break;
				case 2:
					{
					setState(4292);
					expressions();
					}
					break;
				}
				setState(4295);
				match(RIGHT_PAREN);
				}
				}
				break;
			case 2:
				{
				setState(4296);
				expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFlashback_query_clause(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_flashback_query_clause);
		int _la;
		try {
			setState(4307);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4299);
				match(VERSIONS);
				setState(4300);
				match(BETWEEN);
				setState(4301);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4302);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4303);
				match(AS);
				setState(4304);
				match(OF);
				setState(4305);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==SNAPSHOT || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4306);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			match(PIVOT);
			setState(4311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(4310);
				match(XML);
				}
			}

			setState(4313);
			match(LEFT_PAREN);
			setState(4318); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4314);
					match(COMMA);
					}
				}

				setState(4317);
				pivot_element();
				}
				}
				setState(4320); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(4322);
			pivot_for_clause();
			setState(4323);
			pivot_in_clause();
			setState(4324);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_element(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_pivot_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4326);
			aggregate_function_name();
			setState(4327);
			match(LEFT_PAREN);
			setState(4328);
			expression();
			setState(4329);
			match(RIGHT_PAREN);
			setState(4331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				{
				setState(4330);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_for_clause(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_pivot_for_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4333);
			match(FOR);
			setState(4336);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4334);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4335);
				paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4338);
			match(IN);
			setState(4339);
			match(LEFT_PAREN);
			setState(4357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				{
				setState(4340);
				subquery();
				}
				break;
			case 2:
				{
				setState(4345); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4342);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4341);
						match(COMMA);
						}
					}

					setState(4344);
					match(ANY);
					}
					}
					setState(4347); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ANY || _la==COMMA );
				}
				break;
			case 3:
				{
				setState(4353); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4350);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4349);
						match(COMMA);
						}
					}

					setState(4352);
					pivot_in_clause_element();
					}
					}
					setState(4355); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				}
				break;
			}
			setState(4359);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause_element(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_pivot_in_clause_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4361);
			pivot_in_clause_elements();
			setState(4363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				{
				setState(4362);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause_elements(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_pivot_in_clause_elements);
		int _la;
		try {
			setState(4371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4365);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4366);
				match(LEFT_PAREN);
				setState(4368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(4367);
					expressions();
					}
				}

				setState(4370);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4373);
			match(UNPIVOT);
			setState(4376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(4374);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4375);
				match(NULLS);
				}
			}

			setState(4378);
			match(LEFT_PAREN);
			setState(4381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4379);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4380);
				paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4383);
			pivot_for_clause();
			setState(4384);
			unpivot_in_clause();
			setState(4385);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_in_clause(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4387);
			match(IN);
			setState(4388);
			match(LEFT_PAREN);
			setState(4393); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4389);
					match(COMMA);
					}
				}

				setState(4392);
				unpivot_in_elements();
				}
				}
				setState(4395); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (COMMA - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(4397);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_in_elements(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4399);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4400);
				paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4403);
				match(AS);
				setState(4416);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(4404);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(4405);
					match(LEFT_PAREN);
					setState(4410); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4407);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4406);
							match(COMMA);
							}
						}

						setState(4409);
						constant();
						}
						}
						setState(4412); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (DATE - 116)) | (1L << (DBTIMEZONE - 116)) | (1L << (DEFAULT - 116)))) != 0) || _la==FALSE || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (INTERVAL - 254)) | (1L << (MAXVALUE - 254)) | (1L << (MINVALUE - 254)))) != 0) || _la==NULL || _la==SESSIONTIMEZONE || _la==TIMESTAMP || _la==TRUE || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (NATIONAL_CHAR_STRING_LIT - 665)) | (1L << (UNSIGNED_INTEGER - 665)) | (1L << (APPROXIMATE_NUM_LIT - 665)) | (1L << (CHAR_STRING - 665)) | (1L << (COMMA - 665)))) != 0) );
					setState(4414);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitHierarchical_query_clause(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_hierarchical_query_clause);
		try {
			setState(4437);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4420);
				match(CONNECT);
				setState(4421);
				match(BY);
				setState(4423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4422);
					match(NOCYCLE);
					}
					break;
				}
				setState(4425);
				condition();
				setState(4427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(4426);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(4429);
				start_part();
				setState(4430);
				match(CONNECT);
				setState(4431);
				match(BY);
				setState(4433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					setState(4432);
					match(NOCYCLE);
					}
					break;
				}
				setState(4435);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStart_part(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4439);
			match(START);
			setState(4440);
			match(WITH);
			setState(4441);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGroup_by_clause(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_group_by_clause);
		int _la;
		try {
			int _alt;
			setState(4469);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4443);
				match(GROUP);
				setState(4444);
				match(BY);
				setState(4449); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4446);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4445);
							match(COMMA);
							}
						}

						setState(4448);
						group_by_elements();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4451); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,587,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(4454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(4453);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4456);
				having_clause();
				setState(4467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					setState(4457);
					match(GROUP);
					setState(4458);
					match(BY);
					setState(4463); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(4460);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4459);
								match(COMMA);
								}
							}

							setState(4462);
							group_by_elements();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4465); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGroup_by_elements(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_group_by_elements);
		try {
			setState(4474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4471);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4472);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4473);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollup_cube_clause(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4476);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4477);
			match(LEFT_PAREN);
			setState(4482); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4478);
					match(COMMA);
					}
				}

				setState(4481);
				grouping_sets_elements();
				}
				}
				setState(4484); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(4486);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrouping_sets_clause(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4488);
			match(GROUPING);
			setState(4489);
			match(SETS);
			setState(4490);
			match(LEFT_PAREN);
			setState(4495); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4491);
					match(COMMA);
					}
				}

				setState(4494);
				grouping_sets_elements();
				}
				}
				setState(4497); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(4499);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrouping_sets_elements(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_grouping_sets_elements);
		int _la;
		try {
			setState(4508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4501);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4502);
				match(LEFT_PAREN);
				setState(4504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(4503);
					expressions();
					}
				}

				setState(4506);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4507);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4510);
			match(HAVING);
			setState(4511);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_clause(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4513);
			match(MODEL);
			setState(4517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(4514);
				cell_reference_options();
				}
				}
				setState(4519);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(4520);
				return_rows_clause();
				}
			}

			setState(4526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(4523);
				reference_model();
				}
				}
				setState(4528);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4529);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCell_reference_options(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_cell_reference_options);
		int _la;
		try {
			setState(4539);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4531);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4532);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4533);
				match(UNIQUE);
				setState(4537);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(4534);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(4535);
					match(SINGLE);
					setState(4536);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReturn_rows_clause(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4541);
			match(RETURN);
			setState(4542);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4543);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReference_model(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4545);
			match(REFERENCE);
			setState(4546);
			reference_model_name();
			setState(4547);
			match(ON);
			setState(4548);
			match(LEFT_PAREN);
			setState(4549);
			subquery();
			setState(4550);
			match(RIGHT_PAREN);
			setState(4551);
			model_column_clauses();
			setState(4555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(4552);
				cell_reference_options();
				}
				}
				setState(4557);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMain_model(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(4558);
				match(MAIN);
				setState(4559);
				main_model_name();
				}
			}

			setState(4562);
			model_column_clauses();
			setState(4566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(4563);
				cell_reference_options();
				}
				}
				setState(4568);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4569);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_clauses(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4571);
				model_column_partition_part();
				}
			}

			setState(4574);
			match(DIMENSION);
			setState(4575);
			match(BY);
			setState(4576);
			model_column_list();
			setState(4577);
			match(MEASURES);
			setState(4578);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_partition_part(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4580);
			match(PARTITION);
			setState(4581);
			match(BY);
			setState(4582);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_list(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4584);
			match(LEFT_PAREN);
			setState(4589); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4585);
					match(COMMA);
					}
				}

				setState(4588);
				model_column();
				}
				}
				setState(4591); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELECT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(4593);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_model_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4595);
				expression();
				}
				break;
			case SELECT:
				{
				setState(4596);
				query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				{
				setState(4599);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_clause(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(4602);
				model_rules_part();
				}
			}

			setState(4605);
			match(LEFT_PAREN);
			setState(4612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPDATE - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				{
				setState(4607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4606);
					match(COMMA);
					}
				}

				setState(4609);
				model_rules_element();
				}
				}
				setState(4614);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4615);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_part(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4617);
			match(RULES);
			setState(4623);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(4618);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(4619);
				match(UPSERT);
				setState(4621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(4620);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(4627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(4625);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4626);
				match(ORDER);
				}
			}

			setState(4630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(4629);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_element(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				{
				setState(4632);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(4633);
				match(UPSERT);
				setState(4635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
				case 1:
					{
					setState(4634);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(4639);
			cell_assignment();
			setState(4641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4640);
				order_by_clause();
				}
			}

			setState(4643);
			match(EQUALS_OP);
			setState(4644);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCell_assignment(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4646);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_iterate_clause(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4648);
			match(ITERATE);
			setState(4649);
			match(LEFT_PAREN);
			setState(4650);
			expression();
			setState(4651);
			match(RIGHT_PAREN);
			setState(4653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(4652);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUntil_part(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4655);
			match(UNTIL);
			setState(4656);
			match(LEFT_PAREN);
			setState(4657);
			condition();
			setState(4658);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4660);
			match(ORDER);
			setState(4662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(4661);
				match(SIBLINGS);
				}
			}

			setState(4664);
			match(BY);
			setState(4669); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4666);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4665);
						match(COMMA);
						}
					}

					setState(4668);
					order_by_elements();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4671); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,626,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOrder_by_elements(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4673);
			expression();
			setState(4675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(4674);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				setState(4677);
				match(NULLS);
				setState(4678);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_clause(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4681);
			match(FOR);
			setState(4682);
			match(UPDATE);
			setState(4684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(4683);
				for_update_of_part();
				}
			}

			setState(4687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4686);
				for_update_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_of_part(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_for_update_of_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4689);
			match(OF);
			setState(4690);
			column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_options(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_for_update_options);
		try {
			setState(4697);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4692);
				match(SKIP_);
				setState(4693);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4694);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4695);
				match(WAIT);
				setState(4696);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4699);
			match(UPDATE);
			setState(4700);
			general_table_ref();
			setState(4701);
			update_set_clause();
			setState(4703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4702);
				where_clause();
				}
			}

			setState(4706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				{
				setState(4705);
				static_returning_clause();
				}
				break;
			}
			setState(4709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				setState(4708);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpdate_set_clause(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_update_set_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4711);
			match(SET);
			setState(4727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(4716); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4713);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4712);
							match(COMMA);
							}
						}

						setState(4715);
						column_based_update_set_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4718); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,636,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(4720);
				match(VALUE);
				setState(4721);
				match(LEFT_PAREN);
				setState(4722);
				identifier();
				setState(4723);
				match(RIGHT_PAREN);
				setState(4724);
				match(EQUALS_OP);
				setState(4725);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_based_update_set_clause(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_column_based_update_set_clause);
		try {
			setState(4737);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4729);
				column_name();
				setState(4730);
				match(EQUALS_OP);
				setState(4731);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4733);
				paren_column_list();
				setState(4734);
				match(EQUALS_OP);
				setState(4735);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4739);
			match(DELETE);
			setState(4741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4740);
				match(FROM);
				}
			}

			setState(4743);
			general_table_ref();
			setState(4745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4744);
				where_clause();
				}
			}

			setState(4748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				{
				setState(4747);
				static_returning_clause();
				}
				break;
			}
			setState(4751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				{
				setState(4750);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4753);
			match(INSERT);
			setState(4756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(4754);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(4755);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSingle_table_insert(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_single_table_insert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4758);
			insert_into_clause();
			setState(4764);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(4759);
				values_clause();
				setState(4761);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
				case 1:
					{
					setState(4760);
					static_returning_clause();
					}
					break;
				}
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(4763);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				setState(4766);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_table_insert(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(4769);
				match(ALL);
				setState(4771); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4770);
					multi_table_element();
					}
					}
					setState(4773); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(4775);
				conditional_insert_clause();
				}
				break;
			}
			setState(4778);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_table_element(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4780);
			insert_into_clause();
			setState(4782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(4781);
				values_clause();
				}
			}

			setState(4785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4784);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_clause(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(4787);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4791); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4790);
				conditional_insert_when_part();
				}
				}
				setState(4793); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4795);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_when_part(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4798);
			match(WHEN);
			setState(4799);
			condition();
			setState(4800);
			match(THEN);
			setState(4802); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4801);
				multi_table_element();
				}
				}
				setState(4804); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_else_part(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4806);
			match(ELSE);
			setState(4808); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4807);
				multi_table_element();
				}
				}
				setState(4810); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInsert_into_clause(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_insert_into_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4812);
			match(INTO);
			setState(4813);
			general_table_ref();
			setState(4815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(4814);
				paren_column_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitValues_clause(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4817);
			match(VALUES);
			setState(4818);
			match(LEFT_PAREN);
			setState(4820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(4819);
				expressions();
				}
			}

			setState(4822);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4824);
			match(MERGE);
			setState(4825);
			match(INTO);
			setState(4826);
			tableview_name();
			setState(4828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(4827);
				table_alias();
				}
			}

			setState(4830);
			match(USING);
			setState(4831);
			selected_tableview();
			setState(4832);
			match(ON);
			setState(4833);
			match(LEFT_PAREN);
			setState(4834);
			condition();
			setState(4835);
			match(RIGHT_PAREN);
			setState(4844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(4836);
				merge_update_clause();
				setState(4838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4837);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(4840);
				merge_insert_clause();
				setState(4842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4841);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(4847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				{
				setState(4846);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_update_clause(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_merge_update_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4849);
			match(WHEN);
			setState(4850);
			match(MATCHED);
			setState(4851);
			match(THEN);
			setState(4852);
			match(UPDATE);
			setState(4853);
			match(SET);
			setState(4854);
			merge_element();
			setState(4859);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4855);
					match(COMMA);
					setState(4856);
					merge_element();
					}
					} 
				}
				setState(4861);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
			}
			setState(4863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4862);
				where_clause();
				}
			}

			setState(4866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(4865);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_element(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4868);
			column_name();
			setState(4869);
			match(EQUALS_OP);
			setState(4870);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_update_delete_part(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4872);
			match(DELETE);
			setState(4873);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_insert_clause(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4875);
			match(WHEN);
			setState(4876);
			match(NOT);
			setState(4877);
			match(MATCHED);
			setState(4878);
			match(THEN);
			setState(4879);
			match(INSERT);
			setState(4881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4880);
				paren_column_list();
				}
			}

			setState(4883);
			match(VALUES);
			setState(4884);
			match(LEFT_PAREN);
			setState(4886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(4885);
				expressions();
				}
			}

			setState(4888);
			match(RIGHT_PAREN);
			setState(4890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4889);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelected_tableview(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4897);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4892);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4893);
				match(LEFT_PAREN);
				setState(4894);
				select_statement();
				setState(4895);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(4899);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_table_statement(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4902);
			match(LOCK);
			setState(4903);
			match(TABLE);
			setState(4904);
			lock_table_element();
			setState(4909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4905);
				match(COMMA);
				setState(4906);
				lock_table_element();
				}
				}
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4912);
			match(IN);
			setState(4913);
			lock_mode();
			setState(4914);
			match(MODE);
			setState(4916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				{
				setState(4915);
				wait_nowait_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWait_nowait_part(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_wait_nowait_part);
		try {
			setState(4921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4918);
				match(WAIT);
				setState(4919);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4920);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_table_element(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4923);
			tableview_name();
			setState(4925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(4924);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_mode(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_lock_mode);
		int _la;
		try {
			setState(4939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4927);
				match(ROW);
				setState(4928);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4929);
				match(ROW);
				setState(4930);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4931);
				match(SHARE);
				setState(4933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(4932);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4935);
				match(SHARE);
				setState(4936);
				match(ROW);
				setState(4937);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4938);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_table_ref(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(4941);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(4942);
				match(ONLY);
				setState(4943);
				match(LEFT_PAREN);
				setState(4944);
				dml_table_expression_clause();
				setState(4945);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(4949);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStatic_returning_clause(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4952);
			_la = _input.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4953);
			expressions();
			setState(4954);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_clause(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_error_logging_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4956);
			match(LOG);
			setState(4957);
			match(ERRORS);
			setState(4959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
			case 1:
				{
				setState(4958);
				error_logging_into_part();
				}
				break;
			}
			setState(4962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				{
				setState(4961);
				expression();
				}
				break;
			}
			setState(4965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(4964);
				error_logging_reject_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_into_part(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4967);
			match(INTO);
			setState(4968);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_reject_part(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4970);
			match(REJECT);
			setState(4971);
			match(LIMIT);
			setState(4974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				{
				setState(4972);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(4973);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_table_expression_clause(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(4988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4976);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4977);
				match(LEFT_PAREN);
				setState(4978);
				select_statement();
				setState(4980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4979);
					subquery_restriction_clause();
					}
				}

				setState(4982);
				match(RIGHT_PAREN);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4984);
				tableview_name();
				setState(4986);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(4985);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_collection_expression(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4990);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(4991);
				match(LEFT_PAREN);
				setState(4992);
				subquery();
				setState(4993);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4995);
				match(LEFT_PAREN);
				setState(4996);
				expression();
				setState(4997);
				match(RIGHT_PAREN);
				setState(5001);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
				case 1:
					{
					setState(4998);
					match(LEFT_PAREN);
					setState(4999);
					match(PLUS_SIGN);
					setState(5000);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_restriction_clause(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_subquery_restriction_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5005);
			match(WITH);
			setState(5014);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(5006);
				match(READ);
				setState(5007);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(5008);
				match(CHECK);
				setState(5009);
				match(OPTION);
				setState(5012);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
				case 1:
					{
					setState(5010);
					match(CONSTRAINT);
					setState(5011);
					constraint_name();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSample_clause(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5016);
			match(SAMPLE);
			setState(5018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(5017);
				match(BLOCK);
				}
			}

			setState(5020);
			match(LEFT_PAREN);
			setState(5021);
			expression();
			setState(5024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5022);
				match(COMMA);
				setState(5023);
				expression();
				}
			}

			setState(5026);
			match(RIGHT_PAREN);
			setState(5028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
			case 1:
				{
				setState(5027);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeed_part(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5030);
			match(SEED);
			setState(5031);
			match(LEFT_PAREN);
			setState(5032);
			expression();
			setState(5033);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCondition(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5035);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpressions(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_expressions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5037);
			expression();
			setState(5042);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,693,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5038);
					match(COMMA);
					setState(5039);
					expression();
					}
					} 
				}
				setState(5044);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,693,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Logical_expressionContext logical_expression() {
			return getRuleContext(Logical_expressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_expression);
		try {
			setState(5047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5045);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5046);
				logical_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_expression(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5049);
			match(CURSOR);
			setState(5050);
			match(LEFT_PAREN);
			setState(5051);
			subquery();
			setState(5052);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(PlSqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(PlSqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(PlSqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(PlSqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(PlSqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(PlSqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(PlSqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(PlSqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(PlSqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(PlSqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(PlSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PlSqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(PlSqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(PlSqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(PlSqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(PlSqlParser.OF, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(PlSqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(PlSqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(PlSqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(PlSqlParser.ONLY, i);
		}
		public List<Logical_expressionContext> logical_expression() {
			return getRuleContexts(Logical_expressionContext.class);
		}
		public Logical_expressionContext logical_expression(int i) {
			return getRuleContext(Logical_expressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLogical_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLogical_expression(this);
		}
	}

	public final Logical_expressionContext logical_expression() throws RecognitionException {
		return logical_expression(0);
	}

	private Logical_expressionContext logical_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_expressionContext _localctx = new Logical_expressionContext(_ctx, _parentState);
		Logical_expressionContext _prevctx = _localctx;
		int _startState = 670;
		enterRecursionRule(_localctx, 670, RULE_logical_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5055);
				multiset_expression();
				setState(5089);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5056);
						match(IS);
						setState(5058);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5057);
							match(NOT);
							}
						}

						setState(5085);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NULL:
							{
							setState(5060);
							match(NULL);
							}
							break;
						case NAN:
							{
							setState(5061);
							match(NAN);
							}
							break;
						case PRESENT:
							{
							setState(5062);
							match(PRESENT);
							}
							break;
						case INFINITE:
							{
							setState(5063);
							match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							setState(5064);
							match(A_LETTER);
							setState(5065);
							match(SET);
							}
							break;
						case EMPTY:
							{
							setState(5066);
							match(EMPTY);
							}
							break;
						case OF:
							{
							setState(5067);
							match(OF);
							setState(5069);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==TYPE) {
								{
								setState(5068);
								match(TYPE);
								}
							}

							setState(5071);
							match(LEFT_PAREN);
							setState(5073);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
							case 1:
								{
								setState(5072);
								match(ONLY);
								}
								break;
							}
							setState(5075);
							type_spec();
							setState(5080);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(5076);
								match(COMMA);
								setState(5077);
								type_spec();
								}
								}
								setState(5082);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(5083);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(5091);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
				}
				}
				break;
			case NOT:
				{
				setState(5092);
				match(NOT);
				setState(5093);
				logical_expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(5104);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,703,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5102);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
					case 1:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						setState(5096);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5097);
						match(AND);
						setState(5098);
						logical_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						setState(5099);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5100);
						match(OR);
						setState(5101);
						logical_expression(2);
						}
						break;
					}
					} 
				}
				setState(5106);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,703,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Token multiset_type;
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMultiset_expression(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5107);
			relational_expression(0);
			setState(5113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(5108);
				((Multiset_expressionContext)_localctx).multiset_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
					((Multiset_expressionContext)_localctx).multiset_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(5109);
					match(OF);
					}
				}

				setState(5112);
				concatenation(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public Compound_expressionContext compound_expression() {
			return getRuleContext(Compound_expressionContext.class,0);
		}
		public List<Relational_expressionContext> relational_expression() {
			return getRuleContexts(Relational_expressionContext.class);
		}
		public Relational_expressionContext relational_expression(int i) {
			return getRuleContext(Relational_expressionContext.class,i);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_expression(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 674;
		enterRecursionRule(_localctx, 674, RULE_relational_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5116);
			compound_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(5124);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,706,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					setState(5118);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5119);
					relational_operator();
					setState(5120);
					relational_expression(3);
					}
					} 
				}
				setState(5126);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,706,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public Token like_type;
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_expression(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5127);
			concatenation(0);
			setState(5143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
			case 1:
				{
				setState(5129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5128);
					match(NOT);
					}
				}

				setState(5141);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(5131);
					match(IN);
					setState(5132);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(5133);
					match(BETWEEN);
					setState(5134);
					between_elements();
					}
					break;
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE:
					{
					setState(5135);
					((Compound_expressionContext)_localctx).like_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (LIKE2 - 274)) | (1L << (LIKE4 - 274)) | (1L << (LIKEC - 274)) | (1L << (LIKE - 274)))) != 0)) ) {
						((Compound_expressionContext)_localctx).like_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5136);
					concatenation(0);
					setState(5139);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
					case 1:
						{
						setState(5137);
						match(ESCAPE);
						setState(5138);
						concatenation(0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_operatorContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_operator(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_relational_operator);
		int _la;
		try {
			setState(5159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5145);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5153);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT_EQUAL_OP:
					{
					setState(5146);
					match(NOT_EQUAL_OP);
					}
					break;
				case LESS_THAN_OP:
					{
					setState(5147);
					match(LESS_THAN_OP);
					setState(5148);
					match(GREATER_THAN_OP);
					}
					break;
				case EXCLAMATION_OPERATOR_PART:
					{
					setState(5149);
					match(EXCLAMATION_OPERATOR_PART);
					setState(5150);
					match(EQUALS_OP);
					}
					break;
				case CARRET_OPERATOR_PART:
					{
					setState(5151);
					match(CARRET_OPERATOR_PART);
					setState(5152);
					match(EQUALS_OP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5155);
				_la = _input.LA(1);
				if ( !(_la==GREATER_THAN_OP || _la==LESS_THAN_OP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(5156);
					match(EQUALS_OP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIn_elements(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_in_elements);
		int _la;
		try {
			setState(5179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5161);
				match(LEFT_PAREN);
				setState(5162);
				subquery();
				setState(5163);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5165);
				match(LEFT_PAREN);
				setState(5166);
				concatenation(0);
				setState(5171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5167);
					match(COMMA);
					setState(5168);
					concatenation(0);
					}
					}
					setState(5173);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5174);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5176);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5177);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5178);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBetween_elements(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5181);
			concatenation(0);
			setState(5182);
			match(AND);
			setState(5183);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public Token op;
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(PlSqlParser.SOLIDUS, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public List<TerminalNode> BAR() { return getTokens(PlSqlParser.BAR); }
		public TerminalNode BAR(int i) {
			return getToken(PlSqlParser.BAR, i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConcatenation(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		return concatenation(0);
	}

	private ConcatenationContext concatenation(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, _parentState);
		ConcatenationContext _prevctx = _localctx;
		int _startState = 684;
		enterRecursionRule(_localctx, 684, RULE_concatenation, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5186);
			model_expression();
			setState(5195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
			case 1:
				{
				setState(5187);
				match(AT);
				setState(5192);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(5188);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(5189);
					match(TIME);
					setState(5190);
					match(ZONE);
					setState(5191);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(5194);
				interval_expression();
				}
				break;
			}
			}
			_ctx.stop = _input.LT(-1);
			setState(5209);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,719,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5207);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
					case 1:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(5197);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5198);
						((ConcatenationContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							((ConcatenationContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5199);
						concatenation(4);
						}
						break;
					case 2:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(5200);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5201);
						((ConcatenationContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							((ConcatenationContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5202);
						concatenation(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(5203);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5204);
						match(BAR);
						setState(5205);
						match(BAR);
						setState(5206);
						concatenation(2);
						}
						break;
					}
					} 
				}
				setState(5211);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,719,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInterval_expression(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_interval_expression);
		int _la;
		try {
			setState(5236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5212);
				match(DAY);
				setState(5217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5213);
					match(LEFT_PAREN);
					setState(5214);
					concatenation(0);
					setState(5215);
					match(RIGHT_PAREN);
					}
				}

				setState(5219);
				match(TO);
				setState(5220);
				match(SECOND);
				setState(5225);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5221);
					match(LEFT_PAREN);
					setState(5222);
					concatenation(0);
					setState(5223);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5227);
				match(YEAR);
				setState(5232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5228);
					match(LEFT_PAREN);
					setState(5229);
					concatenation(0);
					setState(5230);
					match(RIGHT_PAREN);
					}
				}

				setState(5234);
				match(TO);
				setState(5235);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_expression(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5238);
			unary_expression();
			setState(5243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				setState(5239);
				match(LEFT_BRACKET);
				setState(5240);
				model_expression_element();
				setState(5241);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_expression_element(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_model_expression_element);
		int _la;
		try {
			setState(5268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(5245);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(5246);
					expression();
					}
					break;
				}
				setState(5256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5249);
					match(COMMA);
					setState(5252);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
					case 1:
						{
						setState(5250);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(5251);
						expression();
						}
						break;
					}
					}
					}
					setState(5258);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5259);
				single_column_for_loop();
				setState(5264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5260);
					match(COMMA);
					setState(5261);
					single_column_for_loop();
					}
					}
					setState(5266);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5267);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext fromExpr;
		public ExpressionContext toExpr;
		public Token action_type;
		public ExpressionContext action_expr;
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSingle_column_for_loop(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5270);
			match(FOR);
			setState(5271);
			column_name();
			setState(5289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(5272);
				match(IN);
				setState(5273);
				match(LEFT_PAREN);
				setState(5275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(5274);
					expressions();
					}
				}

				setState(5277);
				match(RIGHT_PAREN);
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(5280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(5278);
					match(LIKE);
					setState(5279);
					expression();
					}
				}

				setState(5282);
				match(FROM);
				setState(5283);
				((Single_column_for_loopContext)_localctx).fromExpr = expression();
				setState(5284);
				match(TO);
				setState(5285);
				((Single_column_for_loopContext)_localctx).toExpr = expression();
				setState(5286);
				((Single_column_for_loopContext)_localctx).action_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DECREMENT || _la==INCREMENT) ) {
					((Single_column_for_loopContext)_localctx).action_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5287);
				((Single_column_for_loopContext)_localctx).action_expr = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_column_for_loop(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5291);
			match(FOR);
			setState(5292);
			paren_column_list();
			setState(5293);
			match(IN);
			setState(5294);
			match(LEFT_PAREN);
			setState(5301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
			case 1:
				{
				setState(5295);
				subquery();
				}
				break;
			case 2:
				{
				setState(5296);
				match(LEFT_PAREN);
				setState(5298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(5297);
					expressions();
					}
				}

				setState(5300);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(5303);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnary_expression(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_unary_expression);
		int _la;
		try {
			setState(5321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5305);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5306);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5307);
				match(PRIOR);
				setState(5308);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5309);
				match(CONNECT_BY_ROOT);
				setState(5310);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5311);
				match(NEW);
				setState(5312);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5313);
				match(DISTINCT);
				setState(5314);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5315);
				match(ALL);
				setState(5316);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5317);
				case_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5318);
				quantified_expression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5319);
				standard_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5320);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCase_statement(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_case_statement);
		try {
			setState(5325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5323);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5324);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_case_statement(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(5327);
				label_name();
				}
			}

			setState(5330);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(5331);
			expression();
			setState(5333); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5332);
				simple_case_when_part();
				}
				}
				setState(5335); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(5338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(5337);
				case_else_part();
				}
			}

			setState(5340);
			match(END);
			setState(5342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				{
				setState(5341);
				match(CASE);
				}
				break;
			}
			setState(5345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				{
				setState(5344);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_case_when_part(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5347);
			match(WHEN);
			setState(5348);
			expression();
			setState(5349);
			match(THEN);
			setState(5352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				setState(5350);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(5351);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearched_case_statement(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(5354);
				label_name();
				}
			}

			setState(5357);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(5359); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5358);
				searched_case_when_part();
				}
				}
				setState(5361); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(5364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(5363);
				case_else_part();
				}
			}

			setState(5366);
			match(END);
			setState(5368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				setState(5367);
				match(CASE);
				}
				break;
			}
			setState(5371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				setState(5370);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearched_case_when_part(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5373);
			match(WHEN);
			setState(5374);
			expression();
			setState(5375);
			match(THEN);
			setState(5378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				{
				setState(5376);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(5377);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCase_else_part(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5380);
			match(ELSE);
			setState(5383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
			case 1:
				{
				setState(5381);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(5382);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAtom(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_atom);
		try {
			int _alt;
			setState(5404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5385);
				table_element();
				setState(5386);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5388);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5389);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5390);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5391);
				match(LEFT_PAREN);
				setState(5392);
				subquery();
				setState(5393);
				match(RIGHT_PAREN);
				setState(5397);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,750,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5394);
						subquery_operation_part();
						}
						} 
					}
					setState(5399);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,750,_ctx);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5400);
				match(LEFT_PAREN);
				setState(5401);
				expressions();
				setState(5402);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuantified_expression(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5406);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
			case 1:
				{
				setState(5407);
				match(LEFT_PAREN);
				setState(5408);
				subquery();
				setState(5409);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(5411);
				match(LEFT_PAREN);
				setState(5412);
				expression();
				setState(5413);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_functionContext extends ParserRuleContext {
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode TO_DATE() { return getToken(PlSqlParser.TO_DATE, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterString_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitString_function(this);
		}
	}

	public final String_functionContext string_function() throws RecognitionException {
		String_functionContext _localctx = new String_functionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_string_function);
		int _la;
		try {
			setState(5487);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUBSTR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5417);
				match(SUBSTR);
				setState(5418);
				match(LEFT_PAREN);
				setState(5419);
				expression();
				setState(5420);
				match(COMMA);
				setState(5421);
				expression();
				setState(5424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5422);
					match(COMMA);
					setState(5423);
					expression();
					}
				}

				setState(5426);
				match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5428);
				match(TO_CHAR);
				setState(5429);
				match(LEFT_PAREN);
				setState(5433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
				case 1:
					{
					setState(5430);
					table_element();
					}
					break;
				case 2:
					{
					setState(5431);
					standard_function();
					}
					break;
				case 3:
					{
					setState(5432);
					expression();
					}
					break;
				}
				setState(5437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
				case 1:
					{
					setState(5435);
					match(COMMA);
					setState(5436);
					quoted_string();
					}
					break;
				}
				setState(5441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5439);
					match(COMMA);
					setState(5440);
					quoted_string();
					}
				}

				setState(5443);
				match(RIGHT_PAREN);
				}
				break;
			case DECODE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5445);
				match(DECODE);
				setState(5446);
				match(LEFT_PAREN);
				setState(5447);
				expressions();
				setState(5448);
				match(RIGHT_PAREN);
				}
				break;
			case CHR:
				enterOuterAlt(_localctx, 4);
				{
				setState(5450);
				match(CHR);
				setState(5451);
				match(LEFT_PAREN);
				setState(5452);
				concatenation(0);
				setState(5453);
				match(USING);
				setState(5454);
				match(NCHAR_CS);
				setState(5455);
				match(RIGHT_PAREN);
				}
				break;
			case NVL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5457);
				match(NVL);
				setState(5458);
				match(LEFT_PAREN);
				setState(5459);
				expression();
				setState(5460);
				match(COMMA);
				setState(5461);
				expression();
				setState(5462);
				match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 6);
				{
				setState(5464);
				match(TRIM);
				setState(5465);
				match(LEFT_PAREN);
				setState(5473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
				case 1:
					{
					setState(5467);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(5466);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5470);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(5469);
						quoted_string();
						}
					}

					setState(5472);
					match(FROM);
					}
					break;
				}
				setState(5475);
				concatenation(0);
				setState(5476);
				match(RIGHT_PAREN);
				}
				break;
			case TO_DATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5478);
				match(TO_DATE);
				setState(5479);
				match(LEFT_PAREN);
				setState(5480);
				expression();
				setState(5483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5481);
					match(COMMA);
					setState(5482);
					quoted_string();
					}
				}

				setState(5485);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public String_functionContext string_function() {
			return getRuleContext(String_functionContext.class,0);
		}
		public Numeric_function_wrapperContext numeric_function_wrapper() {
			return getRuleContext(Numeric_function_wrapperContext.class,0);
		}
		public Other_functionContext other_function() {
			return getRuleContext(Other_functionContext.class,0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStandard_function(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_standard_function);
		try {
			setState(5492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5489);
				string_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5490);
				numeric_function_wrapper();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5491);
				other_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_wrapperContext extends ParserRuleContext {
		public Numeric_functionContext numeric_function() {
			return getRuleContext(Numeric_functionContext.class,0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return getRuleContext(Single_column_for_loopContext.class,0);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Numeric_function_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function_wrapper(this);
		}
	}

	public final Numeric_function_wrapperContext numeric_function_wrapper() throws RecognitionException {
		Numeric_function_wrapperContext _localctx = new Numeric_function_wrapperContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_numeric_function_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5494);
			numeric_function();
			setState(5497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				setState(5495);
				single_column_for_loop();
				}
				break;
			case 2:
				{
				setState(5496);
				multi_column_for_loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_functionContext extends ParserRuleContext {
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode LEAST() { return getToken(PlSqlParser.LEAST, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PlSqlParser.GREATEST, 0); }
		public Numeric_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function(this);
		}
	}

	public final Numeric_functionContext numeric_function() throws RecognitionException {
		Numeric_functionContext _localctx = new Numeric_functionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_numeric_function);
		int _la;
		try {
			setState(5557);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(5499);
				match(SUM);
				setState(5500);
				match(LEFT_PAREN);
				setState(5502);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
				case 1:
					{
					setState(5501);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5504);
				expression();
				setState(5505);
				match(RIGHT_PAREN);
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5507);
				match(COUNT);
				setState(5508);
				match(LEFT_PAREN);
				setState(5516);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(5509);
					match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5514);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNIQUE - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
						{
						setState(5511);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
						case 1:
							{
							setState(5510);
							_la = _input.LA(1);
							if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						setState(5513);
						concatenation(0);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5518);
				match(RIGHT_PAREN);
				setState(5520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(5519);
					over_clause();
					}
					break;
				}
				}
				break;
			case ROUND:
				enterOuterAlt(_localctx, 3);
				{
				setState(5522);
				match(ROUND);
				setState(5523);
				match(LEFT_PAREN);
				setState(5524);
				expression();
				setState(5527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5525);
					match(COMMA);
					setState(5526);
					match(UNSIGNED_INTEGER);
					}
				}

				setState(5529);
				match(RIGHT_PAREN);
				}
				break;
			case AVG:
				enterOuterAlt(_localctx, 4);
				{
				setState(5531);
				match(AVG);
				setState(5532);
				match(LEFT_PAREN);
				setState(5534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(5533);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5536);
				expression();
				setState(5537);
				match(RIGHT_PAREN);
				}
				break;
			case MAX:
				enterOuterAlt(_localctx, 5);
				{
				setState(5539);
				match(MAX);
				setState(5540);
				match(LEFT_PAREN);
				setState(5542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(5541);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5544);
				expression();
				setState(5545);
				match(RIGHT_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 6);
				{
				setState(5547);
				match(LEAST);
				setState(5548);
				match(LEFT_PAREN);
				setState(5549);
				expressions();
				setState(5550);
				match(RIGHT_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 7);
				{
				setState(5552);
				match(GREATEST);
				setState(5553);
				match(LEFT_PAREN);
				setState(5554);
				expressions();
				setState(5555);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PlSqlParser.COALESCE, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode PERCENT_ISOPEN() { return getToken(PlSqlParser.PERCENT_ISOPEN, 0); }
		public TerminalNode PERCENT_FOUND() { return getToken(PlSqlParser.PERCENT_FOUND, 0); }
		public TerminalNode PERCENT_NOTFOUND() { return getToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
		public TerminalNode PERCENT_ROWCOUNT() { return getToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Other_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOther_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOther_function(this);
		}
	}

	public final Other_functionContext other_function() throws RecognitionException {
		Other_functionContext _localctx = new Other_functionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_other_function);
		int _la;
		try {
			int _alt;
			setState(5874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5559);
				over_clause_keyword();
				setState(5560);
				function_argument_analytic();
				setState(5562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
				case 1:
					{
					setState(5561);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5564);
				regular_id();
				setState(5565);
				function_argument_modeling();
				setState(5567);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
				case 1:
					{
					setState(5566);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5569);
				match(COUNT);
				setState(5570);
				match(LEFT_PAREN);
				setState(5576);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(5571);
					match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5573);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
					case 1:
						{
						setState(5572);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(5575);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5578);
				match(RIGHT_PAREN);
				setState(5580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					setState(5579);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5582);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5583);
				match(LEFT_PAREN);
				setState(5590);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
				case 1:
					{
					setState(5584);
					match(MULTISET);
					setState(5585);
					match(LEFT_PAREN);
					setState(5586);
					subquery();
					setState(5587);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(5589);
					concatenation(0);
					}
					break;
				}
				setState(5592);
				match(AS);
				setState(5593);
				type_spec();
				setState(5594);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5596);
				match(COALESCE);
				setState(5597);
				match(LEFT_PAREN);
				setState(5598);
				table_element();
				setState(5604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5599);
					match(COMMA);
					setState(5602);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5600);
						numeric();
						}
						break;
					case NATIONAL_CHAR_STRING_LIT:
					case CHAR_STRING:
						{
						setState(5601);
						quoted_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(5606);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5608);
				match(COLLECT);
				setState(5609);
				match(LEFT_PAREN);
				setState(5611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
				case 1:
					{
					setState(5610);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5613);
				concatenation(0);
				setState(5615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5614);
					collect_order_by_part();
					}
				}

				setState(5617);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5619);
				within_or_over_clause_keyword();
				setState(5620);
				function_argument();
				setState(5622); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5621);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5624); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,783,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5626);
				cursor_name();
				setState(5627);
				_la = _input.LA(1);
				if ( !(((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (PERCENT_FOUND - 392)) | (1L << (PERCENT_ISOPEN - 392)) | (1L << (PERCENT_NOTFOUND - 392)) | (1L << (PERCENT_ROWCOUNT - 392)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5629);
				match(DECOMPOSE);
				setState(5630);
				match(LEFT_PAREN);
				setState(5631);
				concatenation(0);
				setState(5633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(5632);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5635);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5637);
				match(EXTRACT);
				setState(5638);
				match(LEFT_PAREN);
				setState(5639);
				regular_id();
				setState(5640);
				match(FROM);
				setState(5641);
				concatenation(0);
				setState(5642);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5644);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5645);
				function_argument_analytic();
				setState(5647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5646);
					respect_or_ignore_nulls();
					}
				}

				setState(5649);
				over_clause();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5651);
				standard_prediction_function_keyword();
				setState(5652);
				match(LEFT_PAREN);
				setState(5653);
				expressions();
				setState(5655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(5654);
					cost_matrix_clause();
					}
				}

				setState(5658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5657);
					using_clause();
					}
				}

				setState(5660);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5662);
				match(TRANSLATE);
				setState(5663);
				match(LEFT_PAREN);
				setState(5664);
				expression();
				setState(5667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5665);
					match(USING);
					setState(5666);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5669);
					match(COMMA);
					setState(5670);
					expression();
					}
					}
					setState(5675);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5676);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5678);
				match(TREAT);
				setState(5679);
				match(LEFT_PAREN);
				setState(5680);
				expression();
				setState(5681);
				match(AS);
				setState(5683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
				case 1:
					{
					setState(5682);
					match(REF);
					}
					break;
				}
				setState(5685);
				type_spec();
				setState(5686);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5688);
				match(TRIM);
				setState(5689);
				match(LEFT_PAREN);
				setState(5697);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
				case 1:
					{
					setState(5691);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(5690);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5694);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(5693);
						quoted_string();
						}
					}

					setState(5696);
					match(FROM);
					}
					break;
				}
				setState(5699);
				concatenation(0);
				setState(5700);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5702);
				match(XMLAGG);
				setState(5703);
				match(LEFT_PAREN);
				setState(5704);
				expression();
				setState(5706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5705);
					order_by_clause();
					}
				}

				setState(5708);
				match(RIGHT_PAREN);
				setState(5711);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
				case 1:
					{
					setState(5709);
					match(PERIOD);
					setState(5710);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5713);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5714);
				match(LEFT_PAREN);
				setState(5719); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5716);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5715);
						match(COMMA);
						}
					}

					setState(5718);
					xml_multiuse_expression_element();
					}
					}
					setState(5721); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				setState(5723);
				match(RIGHT_PAREN);
				setState(5726);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(5724);
					match(PERIOD);
					setState(5725);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5728);
				match(XMLELEMENT);
				setState(5729);
				match(LEFT_PAREN);
				setState(5731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
				case 1:
					{
					setState(5730);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5734);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
				case 1:
					{
					setState(5733);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5736);
				expression();
				setState(5739);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
				case 1:
					{
					setState(5737);
					match(COMMA);
					setState(5738);
					xml_attributes_clause();
					}
					break;
				}
				setState(5748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5741);
					match(COMMA);
					setState(5742);
					expression();
					setState(5744);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (AS - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
						{
						setState(5743);
						column_alias();
						}
					}

					}
					}
					setState(5750);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5751);
				match(RIGHT_PAREN);
				setState(5754);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
				case 1:
					{
					setState(5752);
					match(PERIOD);
					setState(5753);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5756);
				match(XMLEXISTS);
				setState(5757);
				match(LEFT_PAREN);
				setState(5758);
				expression();
				setState(5760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(5759);
					xml_passing_clause();
					}
				}

				setState(5762);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5764);
				match(XMLPARSE);
				setState(5765);
				match(LEFT_PAREN);
				setState(5766);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5767);
				concatenation(0);
				setState(5769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(5768);
					match(WELLFORMED);
					}
				}

				setState(5771);
				match(RIGHT_PAREN);
				setState(5774);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(5772);
					match(PERIOD);
					setState(5773);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5776);
				match(XMLPI);
				setState(5777);
				match(LEFT_PAREN);
				setState(5782);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(5778);
					match(NAME);
					setState(5779);
					identifier();
					}
					break;
				case EVALNAME:
					{
					setState(5780);
					match(EVALNAME);
					setState(5781);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5784);
					match(COMMA);
					setState(5785);
					concatenation(0);
					}
				}

				setState(5788);
				match(RIGHT_PAREN);
				setState(5791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(5789);
					match(PERIOD);
					setState(5790);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5793);
				match(XMLQUERY);
				setState(5794);
				match(LEFT_PAREN);
				setState(5795);
				concatenation(0);
				setState(5797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(5796);
					xml_passing_clause();
					}
				}

				setState(5799);
				match(RETURNING);
				setState(5800);
				match(CONTENT);
				setState(5804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(5801);
					match(NULL);
					setState(5802);
					match(ON);
					setState(5803);
					match(EMPTY);
					}
				}

				setState(5806);
				match(RIGHT_PAREN);
				setState(5809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(5807);
					match(PERIOD);
					setState(5808);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5811);
				match(XMLROOT);
				setState(5812);
				match(LEFT_PAREN);
				setState(5813);
				concatenation(0);
				setState(5816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(5814);
					match(COMMA);
					setState(5815);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(5820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5818);
					match(COMMA);
					setState(5819);
					xmlroot_param_standalone_part();
					}
				}

				setState(5822);
				match(RIGHT_PAREN);
				setState(5825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(5823);
					match(PERIOD);
					setState(5824);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5827);
				match(XMLSERIALIZE);
				setState(5828);
				match(LEFT_PAREN);
				setState(5829);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5830);
				concatenation(0);
				setState(5833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5831);
					match(AS);
					setState(5832);
					type_spec();
					}
				}

				setState(5836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(5835);
					xmlserialize_param_enconding_part();
					}
				}

				setState(5839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(5838);
					xmlserialize_param_version_part();
					}
				}

				setState(5842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(5841);
					xmlserialize_param_ident_part();
					}
				}

				setState(5846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(5844);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5845);
					match(DEFAULTS);
					}
				}

				setState(5848);
				match(RIGHT_PAREN);
				setState(5851);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
				case 1:
					{
					setState(5849);
					match(PERIOD);
					setState(5850);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5853);
				match(XMLTABLE);
				setState(5854);
				match(LEFT_PAREN);
				setState(5856);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
				case 1:
					{
					setState(5855);
					xml_namespaces_clause();
					}
					break;
				}
				setState(5858);
				concatenation(0);
				setState(5860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(5859);
					xml_passing_clause();
					}
				}

				setState(5867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(5862);
					match(COLUMNS);
					setState(5863);
					xml_table_column();
					{
					setState(5864);
					match(COMMA);
					setState(5865);
					xml_table_column();
					}
					}
				}

				setState(5869);
				match(RIGHT_PAREN);
				setState(5872);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
				case 1:
					{
					setState(5870);
					match(PERIOD);
					setState(5871);
					general_element_part();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOver_clause_keyword(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5876);
			_la = _input.LA(1);
			if ( !(((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (AVG - 640)) | (1L << (CORR - 640)) | (1L << (COVAR_ - 640)) | (1L << (LAG - 640)) | (1L << (LEAD - 640)) | (1L << (MAX - 640)) | (1L << (MEDIAN - 640)) | (1L << (MIN - 640)) | (1L << (NTILE - 640)) | (1L << (RATIO_TO_REPORT - 640)) | (1L << (REGR_ - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (SUM - 640)) | (1L << (STDDEV - 640)) | (1L << (VAR_ - 640)) | (1L << (VARIANCE - 640)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWithin_or_over_clause_keyword(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5878);
			_la = _input.LA(1);
			if ( !(((((_la - 633)) & ~0x3f) == 0 && ((1L << (_la - 633)) & ((1L << (CUME_DIST - 633)) | (1L << (DENSE_RANK - 633)) | (1L << (LISTAGG - 633)) | (1L << (PERCENT_RANK - 633)) | (1L << (PERCENTILE_CONT - 633)) | (1L << (PERCENTILE_DISC - 633)) | (1L << (RANK - 633)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStandard_prediction_function_keyword(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5880);
			_la = _input.LA(1);
			if ( !(((((_la - 627)) & ~0x3f) == 0 && ((1L << (_la - 627)) & ((1L << (PREDICTION - 627)) | (1L << (PREDICTION_BOUNDS - 627)) | (1L << (PREDICTION_COST - 627)) | (1L << (PREDICTION_DETAILS - 627)) | (1L << (PREDICTION_PROBABILITY - 627)) | (1L << (PREDICTION_SET - 627)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5882);
			match(OVER);
			setState(5883);
			match(LEFT_PAREN);
			setState(5885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5884);
				query_partition_clause();
				}
			}

			setState(5891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(5887);
				order_by_clause();
				setState(5889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(5888);
					windowing_clause();
					}
				}

				}
			}

			setState(5893);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_clause(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5895);
			windowing_type();
			setState(5902);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(5896);
				match(BETWEEN);
				setState(5897);
				windowing_elements();
				setState(5898);
				match(AND);
				setState(5899);
				windowing_elements();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5901);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_type(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5904);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_elements(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_windowing_elements);
		int _la;
		try {
			setState(5913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5906);
				match(UNBOUNDED);
				setState(5907);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5908);
				match(CURRENT);
				setState(5909);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5910);
				concatenation(0);
				setState(5911);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUsing_clause(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_using_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5915);
			match(USING);
			setState(5925);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(5916);
				match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case IN:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5921); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5918);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5917);
							match(COMMA);
							}
						}

						setState(5920);
						using_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5923); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,834,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUsing_element(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
			case 1:
				{
				setState(5927);
				match(IN);
				setState(5929);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
				case 1:
					{
					setState(5928);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5931);
				match(OUT);
				}
				break;
			}
			setState(5934);
			select_list_elements();
			setState(5936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
			case 1:
				{
				setState(5935);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCollect_order_by_part(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5938);
			match(ORDER);
			setState(5939);
			match(BY);
			setState(5940);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWithin_or_over_part(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_within_or_over_part);
		try {
			setState(5949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5942);
				match(WITHIN);
				setState(5943);
				match(GROUP);
				setState(5944);
				match(LEFT_PAREN);
				setState(5945);
				order_by_clause();
				setState(5946);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5948);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCost_matrix_clause(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5951);
			match(COST);
			setState(5973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(5952);
				match(MODEL);
				setState(5954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(5953);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(5956);
				match(LEFT_PAREN);
				setState(5961); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5958);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5957);
						match(COMMA);
						}
					}

					setState(5960);
					cost_class_name();
					}
					}
					setState(5963); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				setState(5965);
				match(RIGHT_PAREN);
				setState(5966);
				match(VALUES);
				setState(5967);
				match(LEFT_PAREN);
				setState(5969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
					{
					setState(5968);
					expressions();
					}
				}

				setState(5971);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_passing_clause(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5975);
			match(PASSING);
			setState(5978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(5976);
				match(BY);
				setState(5977);
				match(VALUE);
				}
			}

			setState(5980);
			expression();
			setState(5982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (AS - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(5981);
				column_alias();
				}
			}

			{
			setState(5984);
			match(COMMA);
			setState(5985);
			expression();
			setState(5987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
			case 1:
				{
				setState(5986);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_attributes_clause(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5989);
			match(XMLATTRIBUTES);
			setState(5990);
			match(LEFT_PAREN);
			setState(5992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(5991);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(5994);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6001); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5997);
					match(COMMA);
					}
				}

				setState(6000);
				xml_multiuse_expression_element();
				}
				}
				setState(6003); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
			setState(6005);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_namespaces_clause(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6007);
			match(XMLNAMESPACES);
			setState(6008);
			match(LEFT_PAREN);
			setState(6012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				setState(6009);
				concatenation(0);
				setState(6010);
				column_alias();
				}
				break;
			}
			setState(6020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6014);
				match(COMMA);
				setState(6015);
				concatenation(0);
				setState(6016);
				column_alias();
				}
				}
				setState(6022);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(6023);
				xml_general_default_part();
				}
			}

			setState(6026);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_table_column(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6028);
			xml_column_name();
			setState(6039);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(6029);
				match(FOR);
				setState(6030);
				match(ORDINALITY);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6031);
				type_spec();
				setState(6034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(6032);
					match(PATH);
					setState(6033);
					concatenation(0);
					}
				}

				setState(6037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(6036);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_general_default_part(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6041);
			match(DEFAULT);
			setState(6042);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_multiuse_expression_element(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6044);
			expression();
			setState(6051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6045);
				match(AS);
				setState(6049);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(6046);
					id_expression();
					}
					break;
				case 2:
					{
					setState(6047);
					match(EVALNAME);
					setState(6048);
					concatenation(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlroot_param_version_part(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6053);
			match(VERSION);
			setState(6057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				setState(6054);
				match(NO);
				setState(6055);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(6056);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlroot_param_standalone_part(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6059);
			match(STANDALONE);
			setState(6065);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(6060);
				match(YES);
				}
				break;
			case NO:
				{
				setState(6061);
				match(NO);
				setState(6063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(6062);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_enconding_part(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6067);
			match(ENCODING);
			setState(6068);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_version_part(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6070);
			match(VERSION);
			setState(6071);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_ident_part(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(6081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(6073);
				match(NO);
				setState(6074);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6075);
				match(INDENT);
				setState(6079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(6076);
					match(SIZE);
					setState(6077);
					match(EQUALS_OP);
					setState(6078);
					concatenation(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode PROMPT() { return getToken(PlSqlParser.PROMPT, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode START_CMD() { return getToken(PlSqlParser.START_CMD, 0); }
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_plus_command(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_sql_plus_command);
		int _la;
		try {
			setState(6091);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6083);
				match(SOLIDUS);
				}
				break;
			case EXIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6084);
				match(EXIT);
				}
				break;
			case PROMPT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6085);
				match(PROMPT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(6086);
				match(SHOW);
				setState(6087);
				_la = _input.LA(1);
				if ( !(_la==ERR || _la==ERRORS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case START_CMD:
				enterOuterAlt(_localctx, 5);
				{
				setState(6088);
				match(START_CMD);
				}
				break;
			case WHENEVER:
				enterOuterAlt(_localctx, 6);
				{
				setState(6089);
				whenever_command();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 7);
				{
				setState(6090);
				set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWhenever_command(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6093);
			match(WHENEVER);
			setState(6094);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(6095);
				match(EXIT);
				setState(6096);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6097);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(6098);
				match(CONTINUE);
				setState(6099);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_command(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6102);
			match(SET);
			setState(6103);
			regular_id();
			setState(6109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
			case 1:
				{
				setState(6104);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(6105);
				match(ON);
				}
				break;
			case 3:
				{
				setState(6106);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(6107);
				numeric();
				}
				break;
			case 5:
				{
				setState(6108);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPartition_extension_clause(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6112);
				match(FOR);
				}
			}

			setState(6115);
			match(LEFT_PAREN);
			setState(6117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				setState(6116);
				expressions();
				}
			}

			setState(6119);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_column_alias);
		int _la;
		try {
			setState(6129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6121);
					match(AS);
					}
				}

				setState(6126);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(6124);
					identifier();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(6125);
					quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6128);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_alias(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_table_alias);
		try {
			setState(6133);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6131);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6132);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6135);
			match(WHERE);
			setState(6140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(6136);
				match(CURRENT);
				setState(6137);
				match(OF);
				setState(6138);
				cursor_name();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(6139);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInto_clause(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_into_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK) {
				{
				setState(6142);
				match(BULK);
				setState(6143);
				match(COLLECT);
				}
			}

			setState(6146);
			match(INTO);
			setState(6151); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6148);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6147);
						match(COMMA);
						}
					}

					setState(6150);
					variable_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6153); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_column_name(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_xml_column_name);
		try {
			setState(6157);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6155);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6156);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCost_class_name(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6159);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAttribute_name(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6161);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSavepoint_name(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6163);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollback_segment_name(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6165);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_var_name(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6167);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSchema_name(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6169);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRoutine_name(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6171);
			identifier();
			setState(6176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6172);
				match(PERIOD);
				setState(6173);
				id_expression();
				}
				}
				setState(6178);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(6179);
				match(AT_SIGN);
				setState(6180);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_name(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6183);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitImplementation_type_name(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6185);
			identifier();
			setState(6188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(6186);
				match(PERIOD);
				setState(6187);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter_name(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6190);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReference_model_name(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6192);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMain_model_name(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6194);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Container_tableview_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Container_tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_container_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterContainer_tableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitContainer_tableview_name(this);
		}
	}

	public final Container_tableview_nameContext container_tableview_name() throws RecognitionException {
		Container_tableview_nameContext _localctx = new Container_tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_container_tableview_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6196);
			identifier();
			setState(6199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(6197);
				match(PERIOD);
				setState(6198);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAggregate_function_name(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6201);
			identifier();
			setState(6206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6202);
				match(PERIOD);
				setState(6203);
				id_expression();
				}
				}
				setState(6208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_name(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6209);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Identified_byContext identified_by() {
			return getRuleContext(Identified_byContext.class,0);
		}
		public Grantee_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrantee_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrantee_name(this);
		}
	}

	public final Grantee_nameContext grantee_name() throws RecognitionException {
		Grantee_nameContext _localctx = new Grantee_nameContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_grantee_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6211);
			id_expression();
			setState(6213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIED) {
				{
				setState(6212);
				identified_by();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRole_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRole_name(this);
		}
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_role_name);
		try {
			setState(6217);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6215);
				id_expression();
				}
				break;
			case CONNECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6216);
				match(CONNECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstraint_name(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6219);
			identifier();
			setState(6224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6220);
				match(PERIOD);
				setState(6221);
				id_expression();
				}
				}
				setState(6226);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(6227);
				match(AT_SIGN);
				setState(6228);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLabel_name(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6231);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_name(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6233);
			id_expression();
			setState(6238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6234);
				match(PERIOD);
				setState(6235);
				id_expression();
				}
				}
				setState(6240);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_name(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6241);
			id_expression();
			setState(6246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6242);
				match(PERIOD);
				setState(6243);
				id_expression();
				}
				}
				setState(6248);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_name(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6249);
			identifier();
			setState(6254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6250);
				match(PERIOD);
				setState(6251);
				id_expression();
				}
				}
				setState(6256);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6257);
			identifier();
			setState(6260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(6258);
				match(PERIOD);
				setState(6259);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_name(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6262);
			identifier();
			setState(6265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(6263);
				match(PERIOD);
				setState(6264);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_name(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6267);
			identifier();
			setState(6270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(6268);
				match(PERIOD);
				setState(6269);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVariable_name(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_variable_name);
		int _la;
		try {
			setState(6282);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(6272);
					match(INTRODUCER);
					setState(6273);
					char_set_name();
					}
				}

				setState(6276);
				id_expression();
				setState(6279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(6277);
					match(PERIOD);
					setState(6278);
					id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(6281);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIndex_name(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_index_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6284);
			identifier();
			setState(6287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(6285);
				match(PERIOD);
				setState(6286);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_name(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_cursor_name);
		try {
			setState(6291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6289);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(6290);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRecord_name(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_record_name);
		try {
			setState(6295);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6293);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(6294);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCollection_name(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6297);
			identifier();
			setState(6300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(6298);
				match(PERIOD);
				setState(6299);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLink_name(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6302);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6304);
			identifier();
			setState(6309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6305);
				match(PERIOD);
				setState(6306);
				id_expression();
				}
				}
				setState(6311);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTableview_name(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6312);
			identifier();
			setState(6315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
			case 1:
				{
				setState(6313);
				match(PERIOD);
				setState(6314);
				id_expression();
				}
				break;
			}
			setState(6320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				setState(6317);
				match(AT_SIGN);
				setState(6318);
				link_name();
				}
				break;
			case 2:
				{
				setState(6319);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitChar_set_name(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6322);
			id_expression();
			setState(6327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6323);
				match(PERIOD);
				setState(6324);
				id_expression();
				}
				}
				setState(6329);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Synonym_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Synonym_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_synonym_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSynonym_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSynonym_name(this);
		}
	}

	public final Synonym_nameContext synonym_name() throws RecognitionException {
		Synonym_nameContext _localctx = new Synonym_nameContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_synonym_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6330);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSchema_object_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSchema_object_name(this);
		}
	}

	public final Schema_object_nameContext schema_object_name() throws RecognitionException {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_schema_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6332);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dir_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Dir_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dir_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDir_object_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDir_object_name(this);
		}
	}

	public final Dir_object_nameContext dir_object_name() throws RecognitionException {
		Dir_object_nameContext _localctx = new Dir_object_nameContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_dir_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6334);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public User_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUser_object_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUser_object_name(this);
		}
	}

	public final User_object_nameContext user_object_name() throws RecognitionException {
		User_object_nameContext _localctx = new User_object_nameContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_user_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6336);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_object_nameContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public List<User_object_nameContext> user_object_name() {
			return getRuleContexts(User_object_nameContext.class);
		}
		public User_object_nameContext user_object_name(int i) {
			return getRuleContext(User_object_nameContext.class,i);
		}
		public TerminalNode DIRECTORY() { return getToken(PlSqlParser.DIRECTORY, 0); }
		public Dir_object_nameContext dir_object_name() {
			return getRuleContext(Dir_object_nameContext.class,0);
		}
		public TerminalNode EDITION() { return getToken(PlSqlParser.EDITION, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public TerminalNode MINING() { return getToken(PlSqlParser.MINING, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode SOURCE() { return getToken(PlSqlParser.SOURCE, 0); }
		public TerminalNode RESOURCE() { return getToken(PlSqlParser.RESOURCE, 0); }
		public TerminalNode SQL() { return getToken(PlSqlParser.SQL, 0); }
		public TerminalNode TRANSLATION() { return getToken(PlSqlParser.TRANSLATION, 0); }
		public TerminalNode PROFILE() { return getToken(PlSqlParser.PROFILE, 0); }
		public Grant_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrant_object_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrant_object_name(this);
		}
	}

	public final Grant_object_nameContext grant_object_name() throws RecognitionException {
		Grant_object_nameContext _localctx = new Grant_object_nameContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_grant_object_name);
		int _la;
		try {
			setState(6362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6338);
				tableview_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6339);
				match(USER);
				setState(6344); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6341);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6340);
						match(COMMA);
						}
					}

					setState(6343);
					user_object_name();
					}
					}
					setState(6346); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6348);
				match(DIRECTORY);
				setState(6349);
				dir_object_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6350);
				match(EDITION);
				setState(6351);
				schema_object_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6352);
				match(MINING);
				setState(6353);
				match(MODEL);
				setState(6354);
				schema_object_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6355);
				match(JAVA);
				setState(6356);
				_la = _input.LA(1);
				if ( !(_la==RESOURCE || _la==SOURCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6357);
				schema_object_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6358);
				match(SQL);
				setState(6359);
				match(TRANSLATION);
				setState(6360);
				match(PROFILE);
				setState(6361);
				schema_object_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_list(this);
		}
	}

	public final Column_listContext column_list() throws RecognitionException {
		Column_listContext _localctx = new Column_listContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_column_list);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6368); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6365);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6364);
						match(COMMA);
						}
					}

					setState(6367);
					column_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6370); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,909,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Paren_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paren_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParen_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParen_column_list(this);
		}
	}

	public final Paren_column_listContext paren_column_list() throws RecognitionException {
		Paren_column_listContext _localctx = new Paren_column_listContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_paren_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6372);
			match(LEFT_PAREN);
			setState(6373);
			column_list();
			setState(6374);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitKeep_clause(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6376);
			match(KEEP);
			setState(6377);
			match(LEFT_PAREN);
			setState(6378);
			match(DENSE_RANK);
			setState(6379);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6380);
			order_by_clause();
			setState(6381);
			match(RIGHT_PAREN);
			setState(6383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
			case 1:
				{
				setState(6382);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6385);
			match(LEFT_PAREN);
			setState(6392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				{
				setState(6387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6386);
					match(COMMA);
					}
				}

				setState(6389);
				argument();
				}
				}
				setState(6394);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6395);
			match(RIGHT_PAREN);
			setState(6397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
			case 1:
				{
				setState(6396);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument_analytic(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6399);
			match(LEFT_PAREN);
			setState(6409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) {
				{
				{
				setState(6401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6400);
					match(COMMA);
					}
				}

				setState(6403);
				argument();
				setState(6405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
				case 1:
					{
					setState(6404);
					respect_or_ignore_nulls();
					}
					break;
				}
				}
				}
				setState(6411);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6412);
			match(RIGHT_PAREN);
			setState(6414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
			case 1:
				{
				setState(6413);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument_modeling(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6416);
			match(LEFT_PAREN);
			setState(6417);
			column_name();
			setState(6430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6418);
				match(COMMA);
				setState(6421);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(6419);
					numeric();
					}
					break;
				case NULL:
					{
					setState(6420);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6423);
					match(COMMA);
					setState(6426);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(6424);
						numeric();
						}
						break;
					case NULL:
						{
						setState(6425);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(6432);
			match(USING);
			setState(6449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
			case 1:
				{
				setState(6433);
				tableview_name();
				setState(6434);
				match(PERIOD);
				setState(6435);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(6437);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(6445); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6439);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6438);
						match(COMMA);
						}
					}

					setState(6441);
					expression();
					setState(6443);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
					case 1:
						{
						setState(6442);
						column_alias();
						}
						break;
					}
					}
					}
					setState(6447); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ALL - 3)) | (1L << (ANALYZE - 3)) | (1L << (ANY - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CASE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COALESCE - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONNECT_BY_ROOT - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DATE - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DISTINCT - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXISTS - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FALSE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NOT - 323)) | (1L << (NULL - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PRIOR - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUE - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (DECODE - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (COMMA - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)) | (1L << (INTRODUCER - 646)) | (1L << (REGULAR_ID - 646)))) != 0) );
				}
				break;
			}
			setState(6451);
			match(RIGHT_PAREN);
			setState(6453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
			case 1:
				{
				setState(6452);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRespect_or_ignore_nulls(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6455);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6456);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitArgument(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
			case 1:
				{
				setState(6458);
				identifier();
				setState(6459);
				match(EQUALS_OP);
				setState(6460);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(6464);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_spec(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_type_spec);
		int _la;
		try {
			setState(6474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6466);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6468);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
				case 1:
					{
					setState(6467);
					match(REF);
					}
					break;
				}
				setState(6470);
				type_name();
				setState(6472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(6471);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDatatype(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_datatype);
		int _la;
		try {
			setState(6507);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHARACTER:
			case CHAR:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INTEGER:
			case INT:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR2:
			case VARCHAR:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(6476);
				native_datatype_element();
				setState(6478);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
				case 1:
					{
					setState(6477);
					precision_part();
					}
					break;
				}
				setState(6489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
				case 1:
					{
					setState(6480);
					match(WITH);
					setState(6482);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(6481);
						match(LOCAL);
						}
					}

					setState(6484);
					match(TIME);
					setState(6485);
					match(ZONE);
					}
					break;
				case 2:
					{
					setState(6486);
					match(CHARACTER);
					setState(6487);
					match(SET);
					setState(6488);
					char_set_name();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6491);
				match(INTERVAL);
				setState(6492);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(6493);
					match(LEFT_PAREN);
					setState(6494);
					expression();
					setState(6495);
					match(RIGHT_PAREN);
					}
				}

				setState(6499);
				match(TO);
				setState(6500);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
				case 1:
					{
					setState(6501);
					match(LEFT_PAREN);
					setState(6502);
					expression();
					setState(6503);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPrecision_part(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6509);
			match(LEFT_PAREN);
			setState(6510);
			numeric();
			setState(6513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6511);
				match(COMMA);
				setState(6512);
				numeric();
				}
			}

			setState(6516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(6515);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6518);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNative_datatype_element(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_native_datatype_element);
		try {
			setState(6580);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6520);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6521);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6522);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6523);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6524);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(6525);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(6526);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(6527);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(6528);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(6529);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(6530);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(6531);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(6532);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(6533);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(6534);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(6535);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(6536);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(6537);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6538);
				match(DOUBLE);
				setState(6540);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
				case 1:
					{
					setState(6539);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(6542);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(6543);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(6544);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(6545);
				match(LONG);
				setState(6547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(6546);
					match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(6549);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(6550);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(6551);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(6552);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(6553);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(6554);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(6555);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(6556);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(6557);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(6558);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(6559);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(6560);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(6561);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(6562);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(6563);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(6564);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(6565);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(6566);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(6567);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(6568);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(6569);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(6570);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(6571);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(6572);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(6573);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(6574);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(6575);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(6576);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(6577);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(6578);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(6579);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(PlSqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(PlSqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBind_variable(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6585);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(6582);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(6583);
				match(COLON);
				setState(6584);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
			case 1:
				{
				setState(6588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(6587);
					match(INDICATOR);
					}
				}

				setState(6593);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(6590);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(6591);
					match(COLON);
					setState(6592);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(6601);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,946,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6597);
					match(PERIOD);
					setState(6598);
					general_element_part();
					}
					} 
				}
				setState(6603);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,946,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_element(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_general_element);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6604);
			general_element_part();
			setState(6609);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,947,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6605);
					match(PERIOD);
					setState(6606);
					general_element_part();
					}
					} 
				}
				setState(6611);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,947,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_element_part(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(6612);
				match(INTRODUCER);
				setState(6613);
				char_set_name();
				}
			}

			setState(6616);
			id_expression();
			setState(6621);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,949,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6617);
					match(PERIOD);
					setState(6618);
					id_expression();
					}
					} 
				}
				setState(6623);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,949,_ctx);
			}
			setState(6626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
			case 1:
				{
				setState(6624);
				match(AT_SIGN);
				setState(6625);
				link_name();
				}
				break;
			}
			setState(6629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
			case 1:
				{
				setState(6628);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_element(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(6631);
				match(INTRODUCER);
				setState(6632);
				char_set_name();
				}
			}

			setState(6635);
			id_expression();
			setState(6640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(6636);
				match(PERIOD);
				setState(6637);
				id_expression();
				}
				}
				setState(6642);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_privilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PlSqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode INHERIT() { return getToken(PlSqlParser.INHERIT, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode VIEW() { return getToken(PlSqlParser.VIEW, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode REFRESH() { return getToken(PlSqlParser.REFRESH, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode REWRITE() { return getToken(PlSqlParser.REWRITE, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode REFERENCES() { return getToken(PlSqlParser.REFERENCES, 0); }
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode SQL() { return getToken(PlSqlParser.SQL, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public Object_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_privilege(this);
		}
	}

	public final Object_privilegeContext object_privilege() throws RecognitionException {
		Object_privilegeContext _localctx = new Object_privilegeContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_object_privilege);
		int _la;
		try {
			setState(6675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6643);
				match(ALL);
				setState(6645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(6644);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6647);
				match(ALTER);
				}
				break;
			case DEBUG:
				enterOuterAlt(_localctx, 3);
				{
				setState(6648);
				match(DEBUG);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6649);
				match(DELETE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6650);
				match(EXECUTE);
				}
				break;
			case FLASHBACK:
				enterOuterAlt(_localctx, 6);
				{
				setState(6651);
				match(FLASHBACK);
				setState(6652);
				match(ARCHIVE);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 7);
				{
				setState(6653);
				match(INDEX);
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 8);
				{
				setState(6654);
				match(INHERIT);
				setState(6655);
				match(PRIVILEGES);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 9);
				{
				setState(6656);
				match(INSERT);
				}
				break;
			case KEEP:
				enterOuterAlt(_localctx, 10);
				{
				setState(6657);
				match(KEEP);
				setState(6658);
				match(SEQUENCE);
				}
				break;
			case MERGE:
				enterOuterAlt(_localctx, 11);
				{
				setState(6659);
				match(MERGE);
				setState(6660);
				match(VIEW);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 12);
				{
				setState(6661);
				match(ON);
				setState(6662);
				match(COMMIT);
				setState(6663);
				match(REFRESH);
				}
				break;
			case QUERY:
				enterOuterAlt(_localctx, 13);
				{
				setState(6664);
				match(QUERY);
				setState(6665);
				match(REWRITE);
				}
				break;
			case READ:
				enterOuterAlt(_localctx, 14);
				{
				setState(6666);
				match(READ);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(6667);
				match(REFERENCES);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 16);
				{
				setState(6668);
				match(SELECT);
				}
				break;
			case TRANSLATE:
				enterOuterAlt(_localctx, 17);
				{
				setState(6669);
				match(TRANSLATE);
				setState(6670);
				match(SQL);
				}
				break;
			case UNDER:
				enterOuterAlt(_localctx, 18);
				{
				setState(6671);
				match(UNDER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6672);
				match(UPDATE);
				}
				break;
			case USE:
				enterOuterAlt(_localctx, 20);
				{
				setState(6673);
				match(USE);
				}
				break;
			case WRITE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6674);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class System_privilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PlSqlParser.PRIVILEGES, 0); }
		public TerminalNode ADVISOR() { return getToken(PlSqlParser.ADVISOR, 0); }
		public TerminalNode ADMINISTER() { return getToken(PlSqlParser.ADMINISTER, 0); }
		public TerminalNode SQL() { return getToken(PlSqlParser.SQL, 0); }
		public TerminalNode TUNING() { return getToken(PlSqlParser.TUNING, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public TerminalNode PROFILE() { return getToken(PlSqlParser.PROFILE, 0); }
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode MANAGEMENT() { return getToken(PlSqlParser.MANAGEMENT, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode EXEMPT() { return getToken(PlSqlParser.EXEMPT, 0); }
		public TerminalNode REDACTION() { return getToken(PlSqlParser.REDACTION, 0); }
		public TerminalNode POLICY() { return getToken(PlSqlParser.POLICY, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode LINK() { return getToken(PlSqlParser.LINK, 0); }
		public TerminalNode PUBLIC() { return getToken(PlSqlParser.PUBLIC, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode SESSION() { return getToken(PlSqlParser.SESSION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlSqlParser.DICTIONARY, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DIRECTORY() { return getToken(PlSqlParser.DIRECTORY, 0); }
		public TerminalNode EDITION() { return getToken(PlSqlParser.EDITION, 0); }
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode INDEXTYPE() { return getToken(PlSqlParser.INDEXTYPE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode JOB() { return getToken(PlSqlParser.JOB, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode CLASS() { return getToken(PlSqlParser.CLASS, 0); }
		public TerminalNode PROGRAM() { return getToken(PlSqlParser.PROGRAM, 0); }
		public TerminalNode MANAGE() { return getToken(PlSqlParser.MANAGE, 0); }
		public TerminalNode SCHEDULER() { return getToken(PlSqlParser.SCHEDULER, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LOGMINING() { return getToken(PlSqlParser.LOGMINING, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PlSqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PlSqlParser.VIEW, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode REWRITE() { return getToken(PlSqlParser.REWRITE, 0); }
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode REFRESH() { return getToken(PlSqlParser.REFRESH, 0); }
		public TerminalNode MINING() { return getToken(PlSqlParser.MINING, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode MEASURE() { return getToken(PlSqlParser.MEASURE, 0); }
		public TerminalNode FOLDER() { return getToken(PlSqlParser.FOLDER, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode BUILD() { return getToken(PlSqlParser.BUILD, 0); }
		public TerminalNode PROCESS() { return getToken(PlSqlParser.PROCESS, 0); }
		public TerminalNode OPERATOR() { return getToken(PlSqlParser.OPERATOR, 0); }
		public TerminalNode OUTLINE() { return getToken(PlSqlParser.OUTLINE, 0); }
		public TerminalNode PLUGGABLE() { return getToken(PlSqlParser.PLUGGABLE, 0); }
		public TerminalNode CONTAINER() { return getToken(PlSqlParser.CONTAINER, 0); }
		public TerminalNode ROLE() { return getToken(PlSqlParser.ROLE, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public TerminalNode RESTRICTED() { return getToken(PlSqlParser.RESTRICTED, 0); }
		public TerminalNode RESOURCE() { return getToken(PlSqlParser.RESOURCE, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode TRANSLATION() { return getToken(PlSqlParser.TRANSLATION, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode SYNONYM() { return getToken(PlSqlParser.SYNONYM, 0); }
		public TerminalNode BACKUP() { return getToken(PlSqlParser.BACKUP, 0); }
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode BECOME() { return getToken(PlSqlParser.BECOME, 0); }
		public TerminalNode CHANGE() { return getToken(PlSqlParser.CHANGE, 0); }
		public TerminalNode NOTIFICATION() { return getToken(PlSqlParser.NOTIFICATION, 0); }
		public TerminalNode ACCESS() { return getToken(PlSqlParser.ACCESS, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode PRIVILEGE() { return getToken(PlSqlParser.PRIVILEGE, 0); }
		public TerminalNode INHERIT() { return getToken(PlSqlParser.INHERIT, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode SYSGUID() { return getToken(PlSqlParser.SYSGUID, 0); }
		public TerminalNode PURGE() { return getToken(PlSqlParser.PURGE, 0); }
		public TerminalNode DBA_RECYCLEBIN() { return getToken(PlSqlParser.DBA_RECYCLEBIN, 0); }
		public TerminalNode RESUMABLE() { return getToken(PlSqlParser.RESUMABLE, 0); }
		public TerminalNode SYSBACKUP() { return getToken(PlSqlParser.SYSBACKUP, 0); }
		public TerminalNode SYSDBA() { return getToken(PlSqlParser.SYSDBA, 0); }
		public TerminalNode SYSDG() { return getToken(PlSqlParser.SYSDG, 0); }
		public TerminalNode SYSKM() { return getToken(PlSqlParser.SYSKM, 0); }
		public TerminalNode SYSOPER() { return getToken(PlSqlParser.SYSOPER, 0); }
		public System_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSystem_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSystem_privilege(this);
		}
	}

	public final System_privilegeContext system_privilege() throws RecognitionException {
		System_privilegeContext _localctx = new System_privilegeContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_system_privilege);
		int _la;
		try {
			setState(7003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6677);
				match(ALL);
				setState(6678);
				match(PRIVILEGES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6679);
				match(ADVISOR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6680);
				match(ADMINISTER);
				setState(6682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6681);
					match(ANY);
					}
				}

				setState(6684);
				match(SQL);
				setState(6685);
				match(TUNING);
				setState(6686);
				match(SET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6687);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6688);
				match(ANY);
				setState(6689);
				match(SQL);
				setState(6690);
				match(PROFILE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6691);
				match(ADMINISTER);
				setState(6692);
				match(SQL);
				setState(6693);
				match(MANAGEMENT);
				setState(6694);
				match(OBJECT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6695);
				match(CREATE);
				setState(6697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6696);
					match(ANY);
					}
				}

				setState(6699);
				match(CLUSTER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6700);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6701);
				match(ANY);
				setState(6702);
				match(CLUSTER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6703);
				_la = _input.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6704);
				match(ANY);
				setState(6705);
				match(CONTEXT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6706);
				match(EXEMPT);
				setState(6707);
				match(REDACTION);
				setState(6708);
				match(POLICY);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6709);
				match(ALTER);
				setState(6710);
				match(DATABASE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6711);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PUBLIC) {
					{
					setState(6712);
					match(PUBLIC);
					}
				}

				setState(6715);
				match(DATABASE);
				setState(6716);
				match(LINK);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6717);
				match(DROP);
				setState(6718);
				match(PUBLIC);
				setState(6719);
				match(DATABASE);
				setState(6720);
				match(LINK);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6721);
				match(DEBUG);
				setState(6722);
				match(CONNECT);
				setState(6723);
				match(SESSION);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6724);
				match(DEBUG);
				setState(6725);
				match(ANY);
				setState(6726);
				match(PROCEDURE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6727);
				match(ANALYZE);
				setState(6728);
				match(ANY);
				setState(6729);
				match(DICTIONARY);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6730);
				match(CREATE);
				setState(6732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6731);
					match(ANY);
					}
				}

				setState(6734);
				match(DIMENSION);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6735);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6736);
				match(ANY);
				setState(6737);
				match(DIMENSION);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6738);
				_la = _input.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6739);
				match(ANY);
				setState(6740);
				match(DIRECTORY);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6741);
				_la = _input.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6742);
				match(ANY);
				setState(6743);
				match(EDITION);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6744);
				match(FLASHBACK);
				setState(6749);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ARCHIVE:
					{
					setState(6745);
					match(ARCHIVE);
					setState(6746);
					match(ADMINISTER);
					}
					break;
				case ANY:
					{
					setState(6747);
					match(ANY);
					setState(6748);
					match(TABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6751);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6752);
				match(ANY);
				setState(6753);
				match(INDEX);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6754);
				match(CREATE);
				setState(6756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6755);
					match(ANY);
					}
				}

				setState(6758);
				match(INDEXTYPE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6759);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6760);
				match(ANY);
				setState(6761);
				match(INDEXTYPE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6762);
				match(CREATE);
				setState(6764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY || _la==EXTERNAL) {
					{
					setState(6763);
					_la = _input.LA(1);
					if ( !(_la==ANY || _la==EXTERNAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6766);
				match(JOB);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6767);
				match(EXECUTE);
				setState(6768);
				match(ANY);
				setState(6769);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==PROGRAM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6770);
				match(MANAGE);
				setState(6771);
				match(SCHEDULER);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6772);
				match(ADMINISTER);
				setState(6773);
				match(KEY);
				setState(6774);
				match(MANAGEMENT);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6775);
				match(CREATE);
				setState(6777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6776);
					match(ANY);
					}
				}

				setState(6779);
				match(LIBRARY);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6780);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6781);
				match(ANY);
				setState(6782);
				match(LIBRARY);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6783);
				match(LOGMINING);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6784);
				match(CREATE);
				setState(6786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6785);
					match(ANY);
					}
				}

				setState(6788);
				match(MATERIALIZED);
				setState(6789);
				match(VIEW);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6790);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6791);
				match(ANY);
				setState(6792);
				match(MATERIALIZED);
				setState(6793);
				match(VIEW);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(6794);
					match(GLOBAL);
					}
				}

				setState(6797);
				match(QUERY);
				setState(6798);
				match(REWRITE);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6799);
				match(ON);
				setState(6800);
				match(COMMIT);
				setState(6801);
				match(REFRESH);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6802);
				match(CREATE);
				setState(6804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6803);
					match(ANY);
					}
				}

				setState(6806);
				match(MINING);
				setState(6807);
				match(MODEL);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6808);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==COMMENT || _la==DROP || _la==SELECT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6809);
				match(ANY);
				setState(6810);
				match(MINING);
				setState(6811);
				match(MODEL);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6812);
				match(CREATE);
				setState(6814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6813);
					match(ANY);
					}
				}

				setState(6816);
				match(CUBE);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6817);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6818);
				match(ANY);
				setState(6819);
				match(CUBE);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6820);
				match(CREATE);
				setState(6822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6821);
					match(ANY);
					}
				}

				setState(6824);
				match(MEASURE);
				setState(6825);
				match(FOLDER);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6826);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==DROP || _la==INSERT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6827);
				match(ANY);
				setState(6828);
				match(MEASURE);
				setState(6829);
				match(FOLDER);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6830);
				match(CREATE);
				setState(6832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6831);
					match(ANY);
					}
				}

				setState(6834);
				match(CUBE);
				setState(6835);
				match(DIMENSION);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6836);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DELETE || _la==DROP || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6837);
				match(ANY);
				setState(6838);
				match(CUBE);
				setState(6839);
				match(DIMENSION);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6840);
				match(CREATE);
				setState(6842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6841);
					match(ANY);
					}
				}

				setState(6844);
				match(CUBE);
				setState(6845);
				match(BUILD);
				setState(6846);
				match(PROCESS);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6847);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6848);
				match(ANY);
				setState(6849);
				match(CUBE);
				setState(6850);
				match(BUILD);
				setState(6851);
				match(PROCESS);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6852);
				match(CREATE);
				setState(6854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6853);
					match(ANY);
					}
				}

				setState(6856);
				match(OPERATOR);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6857);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6858);
				match(ANY);
				setState(6859);
				match(OPERATOR);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6860);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6861);
				match(ANY);
				setState(6862);
				match(OUTLINE);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6863);
				match(CREATE);
				setState(6864);
				match(PLUGGABLE);
				setState(6865);
				match(DATABASE);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6866);
				match(SET);
				setState(6867);
				match(CONTAINER);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6868);
				match(CREATE);
				setState(6870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6869);
					match(ANY);
					}
				}

				setState(6872);
				match(PROCEDURE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6873);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6874);
				match(ANY);
				setState(6875);
				match(PROCEDURE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6876);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6877);
				match(PROFILE);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(6878);
				match(CREATE);
				setState(6879);
				match(ROLE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(6880);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==GRANT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6881);
				match(ANY);
				setState(6882);
				match(ROLE);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(6883);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6884);
				match(ROLLBACK);
				setState(6885);
				match(SEGMENT);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(6886);
				match(CREATE);
				setState(6888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6887);
					match(ANY);
					}
				}

				setState(6890);
				match(SEQUENCE);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(6891);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6892);
				match(ANY);
				setState(6893);
				match(SEQUENCE);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(6894);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==RESTRICTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6895);
				match(SESSION);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(6896);
				match(ALTER);
				setState(6897);
				match(RESOURCE);
				setState(6898);
				match(COST);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(6899);
				match(CREATE);
				setState(6901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6900);
					match(ANY);
					}
				}

				setState(6903);
				match(SQL);
				setState(6904);
				match(TRANSLATION);
				setState(6905);
				match(PROFILE);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(6906);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==USE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6907);
				match(ANY);
				setState(6908);
				match(SQL);
				setState(6909);
				match(TRANSLATION);
				setState(6910);
				match(PROFILE);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(6911);
				match(TRANSLATE);
				setState(6912);
				match(ANY);
				setState(6913);
				match(SQL);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(6914);
				match(CREATE);
				setState(6916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6915);
					match(ANY);
					}
				}

				setState(6918);
				match(SYNONYM);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(6919);
				match(DROP);
				setState(6920);
				match(ANY);
				setState(6921);
				match(SYNONYM);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(6922);
				_la = _input.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6923);
				match(PUBLIC);
				setState(6924);
				match(SYNONYM);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(6925);
				match(CREATE);
				setState(6927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6926);
					match(ANY);
					}
				}

				setState(6929);
				match(TABLE);
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(6930);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==BACKUP || _la==COMMENT || _la==DELETE || _la==DROP || _la==INSERT || _la==LOCK || _la==READ || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6931);
				match(ANY);
				setState(6932);
				match(TABLE);
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(6933);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP || _la==MANAGE || _la==UNLIMITED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6934);
				match(TABLESPACE);
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(6935);
				match(CREATE);
				setState(6937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6936);
					match(ANY);
					}
				}

				setState(6939);
				match(TRIGGER);
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(6940);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6941);
				match(ANY);
				setState(6942);
				match(TRIGGER);
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(6943);
				match(ADMINISTER);
				setState(6944);
				match(DATABASE);
				setState(6945);
				match(TRIGGER);
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(6946);
				match(CREATE);
				setState(6948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6947);
					match(ANY);
					}
				}

				setState(6950);
				match(TYPE);
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(6951);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE || _la==UNDER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6952);
				match(ANY);
				setState(6953);
				match(TYPE);
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(6954);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6955);
				match(USER);
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(6956);
				match(CREATE);
				setState(6958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6957);
					match(ANY);
					}
				}

				setState(6960);
				match(VIEW);
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(6961);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==MERGE || _la==UNDER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6962);
				match(ANY);
				setState(6963);
				match(VIEW);
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(6964);
				_la = _input.LA(1);
				if ( !(_la==ANALYZE || _la==AUDIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6965);
				match(ANY);
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(6966);
				match(BECOME);
				setState(6967);
				match(USER);
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(6968);
				match(CHANGE);
				setState(6969);
				match(NOTIFICATION);
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(6970);
				match(EXEMPT);
				setState(6971);
				match(ACCESS);
				setState(6972);
				match(POLICY);
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(6973);
				match(FORCE);
				setState(6975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(6974);
					match(ANY);
					}
				}

				setState(6977);
				match(TRANSACTION);
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(6978);
				match(GRANT);
				setState(6979);
				match(ANY);
				setState(6981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OBJECT) {
					{
					setState(6980);
					match(OBJECT);
					}
				}

				setState(6983);
				match(PRIVILEGE);
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(6984);
				match(INHERIT);
				setState(6985);
				match(ANY);
				setState(6986);
				match(PRIVILEGES);
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(6987);
				match(KEEP);
				setState(6988);
				match(DATE);
				setState(6989);
				match(TIME);
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(6990);
				match(KEEP);
				setState(6991);
				match(SYSGUID);
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(6992);
				match(PURGE);
				setState(6993);
				match(DBA_RECYCLEBIN);
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(6994);
				match(RESUMABLE);
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(6995);
				match(SELECT);
				setState(6996);
				match(ANY);
				setState(6997);
				_la = _input.LA(1);
				if ( !(_la==DICTIONARY || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(6998);
				match(SYSBACKUP);
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(6999);
				match(SYSDBA);
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(7000);
				match(SYSDG);
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(7001);
				match(SYSKM);
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(7002);
				match(SYSOPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public List<TerminalNode> DAY() { return getTokens(PlSqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(PlSqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(PlSqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(PlSqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(PlSqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(PlSqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(PlSqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_constant);
		int _la;
		try {
			setState(7067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(7005);
				match(TIMESTAMP);
				setState(7008);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(7006);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(7007);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7014);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
				case 1:
					{
					setState(7010);
					match(AT);
					setState(7011);
					match(TIME);
					setState(7012);
					match(ZONE);
					setState(7013);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7016);
				match(INTERVAL);
				setState(7020);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(7017);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(7018);
					bind_variable();
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case CLASS:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NEXT:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POLICY:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(7019);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7022);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					setState(7023);
					match(LEFT_PAREN);
					setState(7026);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(7024);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(7025);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7033);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7028);
						match(COMMA);
						setState(7031);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(7029);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(7030);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(7035);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(7053);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
				case 1:
					{
					setState(7038);
					match(TO);
					setState(7051);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(7039);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(7040);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(7041);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(7042);
						match(SECOND);
						setState(7049);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
						case 1:
							{
							setState(7043);
							match(LEFT_PAREN);
							setState(7046);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(7044);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(7045);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(7048);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7055);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7056);
				match(DATE);
				setState(7057);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(7058);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7059);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(7060);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(7061);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(7062);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(7063);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(7064);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(7065);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(7066);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7069);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_negative(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7071);
			match(MINUS_SIGN);
			setState(7072);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuoted_string(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7074);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(7076);
				match(INTRODUCER);
				setState(7077);
				char_set_name();
				}
			}

			setState(7080);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitId_expression(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_id_expression);
		try {
			setState(7084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case CLASS:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NEXT:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POLICY:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7082);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(7083);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOuter_join_sign(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7086);
			match(LEFT_PAREN);
			setState(7087);
			match(PLUS_SIGN);
			setState(7088);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode CLASS() { return getToken(PlSqlParser.CLASS, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPLETE() { return getToken(PlSqlParser.COMPLETE, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode ID() { return getToken(PlSqlParser.ID, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(PlSqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode LINK() { return getToken(PlSqlParser.LINK, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(PlSqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode MINIMUM() { return getToken(PlSqlParser.MINIMUM, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PlSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(PlSqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public TerminalNode OPERATOR() { return getToken(PlSqlParser.OPERATOR, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode POLICY() { return getToken(PlSqlParser.POLICY, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
		public TerminalNode PROGRAM() { return getToken(PlSqlParser.PROGRAM, 0); }
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode SQL() { return getToken(PlSqlParser.SQL, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(PlSqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode SYSDATE() { return getToken(PlSqlParser.SYSDATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public TerminalNode USERS() { return getToken(PlSqlParser.USERS, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRegular_id(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7090);
			_la = _input.LA(1);
			if ( !(((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ADD - 3)) | (1L << (AFTER - 3)) | (1L << (AGENT - 3)) | (1L << (AGGREGATE - 3)) | (1L << (A_LETTER - 3)) | (1L << (ANALYZE - 3)) | (1L << (ARRAY - 3)) | (1L << (ASSOCIATE - 3)) | (1L << (AT - 3)) | (1L << (ATTRIBUTE - 3)) | (1L << (AUDIT - 3)) | (1L << (AUTHID - 3)) | (1L << (AUTO - 3)) | (1L << (AUTOMATIC - 3)) | (1L << (AUTONOMOUS_TRANSACTION - 3)) | (1L << (BATCH - 3)) | (1L << (BEFORE - 3)) | (1L << (BFILE - 3)) | (1L << (BINARY_DOUBLE - 3)) | (1L << (BINARY_FLOAT - 3)) | (1L << (BINARY_INTEGER - 3)) | (1L << (BLOB - 3)) | (1L << (BLOCK - 3)) | (1L << (BODY - 3)) | (1L << (BOOLEAN - 3)) | (1L << (BOTH - 3)) | (1L << (BULK - 3)) | (1L << (BYTE - 3)) | (1L << (CALL - 3)) | (1L << (CANONICAL - 3)) | (1L << (CASCADE - 3)) | (1L << (CAST - 3)) | (1L << (CHARACTER - 3)) | (1L << (CHAR - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (CHAR_CS - 67)) | (1L << (CHR - 67)) | (1L << (CLASS - 67)) | (1L << (C_LETTER - 67)) | (1L << (CLOB - 67)) | (1L << (CLOSE - 67)) | (1L << (CLUSTER - 67)) | (1L << (COLLECT - 67)) | (1L << (COLUMNS - 67)) | (1L << (COMMENT - 67)) | (1L << (COMMIT - 67)) | (1L << (COMMITTED - 67)) | (1L << (COMPATIBILITY - 67)) | (1L << (COMPILE - 67)) | (1L << (COMPLETE - 67)) | (1L << (COMPOUND - 67)) | (1L << (CONSTANT - 67)) | (1L << (CONSTRAINT - 67)) | (1L << (CONSTRAINTS - 67)) | (1L << (CONSTRUCTOR - 67)) | (1L << (CONTENT - 67)) | (1L << (CONTEXT - 67)) | (1L << (CONTINUE - 67)) | (1L << (CONVERT - 67)) | (1L << (CORRUPT_XID_ALL - 67)) | (1L << (CORRUPT_XID - 67)) | (1L << (COST - 67)) | (1L << (COUNT - 67)) | (1L << (CROSS - 67)) | (1L << (CUBE - 67)) | (1L << (CURRENT_USER - 67)) | (1L << (CURSOR - 67)) | (1L << (CUSTOMDATUM - 67)) | (1L << (CYCLE - 67)) | (1L << (DATABASE - 67)) | (1L << (DATA - 67)) | (1L << (DAY - 67)) | (1L << (DB_ROLE_CHANGE - 67)) | (1L << (DBTIMEZONE - 67)) | (1L << (DDL - 67)) | (1L << (DEBUG - 67)) | (1L << (DEC - 67)) | (1L << (DECIMAL - 67)) | (1L << (DECOMPOSE - 67)) | (1L << (DECREMENT - 67)) | (1L << (DEFAULTS - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (DEFERRED - 131)) | (1L << (DEFINER - 131)) | (1L << (DELETE - 131)) | (1L << (DETERMINISTIC - 131)) | (1L << (DIMENSION - 131)) | (1L << (DISABLE - 131)) | (1L << (DISASSOCIATE - 131)) | (1L << (DOCUMENT - 131)) | (1L << (DOUBLE - 131)) | (1L << (DSINTERVAL_UNCONSTRAINED - 131)) | (1L << (EACH - 131)) | (1L << (ELEMENT - 131)) | (1L << (EMPTY - 131)) | (1L << (ENABLE - 131)) | (1L << (ENCODING - 131)) | (1L << (ENTITYESCAPING - 131)) | (1L << (ERR - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)) | (1L << (INFINITE - 195)) | (1L << (INLINE - 195)) | (1L << (INNER - 195)) | (1L << (INOUT - 195)) | (1L << (INSTANTIABLE - 195)) | (1L << (INSTEAD - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INT - 195)) | (1L << (INVALIDATE - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)) | (1L << (MAIN - 259)) | (1L << (MAP - 259)) | (1L << (MATCHED - 259)) | (1L << (MAXVALUE - 259)) | (1L << (MEASURES - 259)) | (1L << (MEMBER - 259)) | (1L << (MERGE - 259)) | (1L << (MINIMUM - 259)) | (1L << (MINUTE - 259)) | (1L << (MINVALUE - 259)) | (1L << (MLSLABEL - 259)) | (1L << (MODEL - 259)) | (1L << (MODIFY - 259)) | (1L << (MONTH - 259)) | (1L << (MULTISET - 259)) | (1L << (NAME - 259)) | (1L << (NAN - 259)) | (1L << (NATURAL - 259)) | (1L << (NATURALN - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NEXT - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)) | (1L << (NULLS - 323)) | (1L << (NUMBER - 323)) | (1L << (NUMERIC - 323)) | (1L << (NVARCHAR2 - 323)) | (1L << (OBJECT - 323)) | (1L << (OFF - 323)) | (1L << (OID - 323)) | (1L << (OLD - 323)) | (1L << (ONLY - 323)) | (1L << (OPEN - 323)) | (1L << (OPERATOR - 323)) | (1L << (ORADATA - 323)) | (1L << (ORDINALITY - 323)) | (1L << (OSERROR - 323)) | (1L << (OUTER - 323)) | (1L << (OUT - 323)) | (1L << (OVER - 323)) | (1L << (OVERRIDING - 323)) | (1L << (PACKAGE - 323)) | (1L << (PARALLEL_ENABLE - 323)) | (1L << (PARAMETERS - 323)) | (1L << (PARENT - 323)) | (1L << (PARTITION - 323)) | (1L << (PASSING - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (PATH - 388)) | (1L << (PIPELINED - 388)) | (1L << (PLAN - 388)) | (1L << (PLS_INTEGER - 388)) | (1L << (POLICY - 388)) | (1L << (POSITIVEN - 388)) | (1L << (POSITIVE - 388)) | (1L << (PRAGMA - 388)) | (1L << (PRECEDING - 388)) | (1L << (PRECISION - 388)) | (1L << (PRESENT - 388)) | (1L << (PROGRAM - 388)) | (1L << (RAISE - 388)) | (1L << (RANGE - 388)) | (1L << (RAW - 388)) | (1L << (READ - 388)) | (1L << (REAL - 388)) | (1L << (RECORD - 388)) | (1L << (REFERENCE - 388)) | (1L << (REFERENCING - 388)) | (1L << (REF - 388)) | (1L << (REJECT - 388)) | (1L << (RELIES_ON - 388)) | (1L << (RENAME - 388)) | (1L << (REPLACE - 388)) | (1L << (RESPECT - 388)) | (1L << (RESTRICT_REFERENCES - 388)) | (1L << (RESULT_CACHE - 388)) | (1L << (RESULT - 388)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (RETURNING - 454)) | (1L << (RETURN - 454)) | (1L << (REUSE - 454)) | (1L << (REVERSE - 454)) | (1L << (RIGHT - 454)) | (1L << (ROLLBACK - 454)) | (1L << (ROLLUP - 454)) | (1L << (ROWID - 454)) | (1L << (ROW - 454)) | (1L << (ROWS - 454)) | (1L << (RULES - 454)) | (1L << (SAMPLE - 454)) | (1L << (SAVEPOINT - 454)) | (1L << (SAVE - 454)) | (1L << (SCHEMACHECK - 454)) | (1L << (SCHEMA - 454)) | (1L << (SCN - 454)) | (1L << (SECOND - 454)) | (1L << (SEED - 454)) | (1L << (SEGMENT - 454)) | (1L << (SELF - 454)) | (1L << (SEQUENTIAL - 454)) | (1L << (SERIALIZABLE - 454)) | (1L << (SERIALLY_REUSABLE - 454)) | (1L << (SERVERERROR - 454)) | (1L << (SESSIONTIMEZONE - 454)) | (1L << (SET - 454)) | (1L << (SETS - 454)) | (1L << (SETTINGS - 454)) | (1L << (SHOW - 454)) | (1L << (SHUTDOWN - 454)) | (1L << (SIBLINGS - 454)) | (1L << (SIGNTYPE - 454)) | (1L << (SIMPLE_INTEGER - 454)) | (1L << (SINGLE - 454)) | (1L << (SKIP_ - 454)) | (1L << (SMALLINT - 454)) | (1L << (SNAPSHOT - 454)) | (1L << (SOME - 454)) | (1L << (SPECIFICATION - 454)) | (1L << (SQLDATA - 454)) | (1L << (SQLERROR - 454)) | (1L << (SQL - 454)) | (1L << (STANDALONE - 454)) | (1L << (STARTUP - 454)) | (1L << (STATEMENT_ID - 454)) | (1L << (STATEMENT - 454)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (STATIC - 518)) | (1L << (STATISTICS - 518)) | (1L << (STORE - 518)) | (1L << (STRING - 518)) | (1L << (SUBMULTISET - 518)) | (1L << (SUBPARTITION - 518)) | (1L << (SUBSTITUTABLE - 518)) | (1L << (SUBTYPE - 518)) | (1L << (SUCCESS - 518)) | (1L << (SUSPEND - 518)) | (1L << (SYSDATE - 518)) | (1L << (TEMPORARY - 518)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP - 518)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 518)) | (1L << (TIMESTAMP_UNCONSTRAINED - 518)) | (1L << (TIME - 518)) | (1L << (TIMEZONE_ABBR - 518)) | (1L << (TIMEZONE_HOUR - 518)) | (1L << (TIMEZONE_MINUTE - 518)) | (1L << (TIMEZONE_REGION - 518)) | (1L << (TRAILING - 518)) | (1L << (TRANSACTION - 518)) | (1L << (TRANSLATE - 518)) | (1L << (TREAT - 518)) | (1L << (TRIGGER - 518)) | (1L << (TRUNCATE - 518)) | (1L << (TYPE - 518)) | (1L << (UNBOUNDED - 518)) | (1L << (UNDER - 518)) | (1L << (UNLIMITED - 518)) | (1L << (UNTIL - 518)) | (1L << (UPDATED - 518)) | (1L << (UPSERT - 518)) | (1L << (UROWID - 518)) | (1L << (USERS - 518)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)) | (1L << (DENSE_RANK - 582)) | (1L << (LISTAGG - 582)) | (1L << (PERCENT_RANK - 582)) | (1L << (PERCENTILE_CONT - 582)) | (1L << (PERCENTILE_DISC - 582)) | (1L << (RANK - 582)) | (1L << (AVG - 582)) | (1L << (CORR - 582)) | (1L << (COVAR_ - 582)) | (1L << (LAG - 582)) | (1L << (LEAD - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (REGULAR_ID - 646)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_function_nameContext extends ParserRuleContext {
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public String_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterString_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitString_function_name(this);
		}
	}

	public final String_function_nameContext string_function_name() throws RecognitionException {
		String_function_nameContext _localctx = new String_function_nameContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_string_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7092);
			_la = _input.LA(1);
			if ( !(_la==CHR || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (DECODE - 643)) | (1L << (SUBSTR - 643)) | (1L << (TO_CHAR - 643)) | (1L << (TRIM - 643)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_nameContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public Numeric_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function_name(this);
		}
	}

	public final Numeric_function_nameContext numeric_function_name() throws RecognitionException {
		Numeric_function_nameContext _localctx = new Numeric_function_nameContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_numeric_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7094);
			_la = _input.LA(1);
			if ( !(_la==COUNT || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (AVG - 640)) | (1L << (NVL - 640)) | (1L << (ROUND - 640)) | (1L << (SUM - 640)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 335:
			return logical_expression_sempred((Logical_expressionContext)_localctx, predIndex);
		case 337:
			return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 342:
			return concatenation_sempred((ConcatenationContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean logical_expression_sempred(Logical_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean concatenation_sempred(ConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02c4\u1bbb\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\3\2\3\2\3\2\5\2\u03a0\n\2\6\2\u03a2\n\2\r\2\16\2\u03a3"+
		"\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u03b2\n\4\3\5\3\5"+
		"\5\5\u03b6\n\5\3\5\5\5\u03b9\n\5\7\5\u03bb\n\5\f\5\16\5\u03be\13\5\3\5"+
		"\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\5\6\u03e8\n\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b"+
		"\5\b\u03f4\n\b\3\b\7\b\u03f7\n\b\f\b\16\b\u03fa\13\b\3\b\3\b\5\b\u03fe"+
		"\n\b\3\b\3\b\3\t\3\t\3\t\5\t\u0405\n\t\3\t\3\t\3\t\3\t\5\t\u040b\n\t\3"+
		"\t\6\t\u040e\n\t\r\t\16\t\u040f\3\t\3\t\5\t\u0414\n\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\7\t\u041c\n\t\f\t\16\t\u041f\13\t\3\t\5\t\u0422\n\t\3\t\3\t\5"+
		"\t\u0426\n\t\3\t\5\t\u0429\n\t\3\t\3\t\5\t\u042d\n\t\3\t\3\t\3\t\5\t\u0432"+
		"\n\t\3\t\3\t\3\n\3\n\5\n\u0438\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\5\13\u0441\n\13\3\13\5\13\u0444\n\13\3\13\3\13\3\f\3\f\5\f\u044a\n\f"+
		"\3\r\3\r\3\r\3\r\3\r\7\r\u0451\n\r\f\r\16\r\u0454\13\r\3\r\3\r\3\16\3"+
		"\16\3\16\3\16\3\16\3\17\3\17\3\17\5\17\u0460\n\17\3\17\3\17\3\17\5\17"+
		"\u0465\n\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\5\20\u046f\n\20\3"+
		"\20\5\20\u0472\n\20\3\20\7\20\u0475\n\20\f\20\16\20\u0478\13\20\3\20\3"+
		"\20\5\20\u047c\n\20\3\20\3\20\3\21\3\21\3\21\5\21\u0483\n\21\3\21\3\21"+
		"\3\21\3\21\5\21\u0489\n\21\3\21\3\21\5\21\u048d\n\21\3\21\3\21\7\21\u0491"+
		"\n\21\f\21\16\21\u0494\13\21\3\21\3\21\5\21\u0498\n\21\3\21\3\21\3\22"+
		"\3\22\3\22\5\22\u049f\n\22\3\22\3\22\3\22\3\22\3\22\5\22\u04a6\n\22\3"+
		"\22\3\22\3\22\7\22\u04ab\n\22\f\22\16\22\u04ae\13\22\3\22\3\22\5\22\u04b2"+
		"\n\22\3\22\3\22\5\22\u04b6\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\5\23\u04c2\n\23\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u04ca\n"+
		"\24\f\24\16\24\u04cd\13\24\3\24\3\24\5\24\u04d1\n\24\3\24\3\24\3\25\3"+
		"\25\3\25\3\25\3\25\3\25\7\25\u04db\n\25\f\25\16\25\u04de\13\25\3\25\3"+
		"\25\5\25\u04e2\n\25\3\25\3\25\3\25\5\25\u04e7\n\25\3\25\5\25\u04ea\n\25"+
		"\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u04f7\n\26"+
		"\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\5\30\u0503\n\30\3\30"+
		"\7\30\u0506\n\30\f\30\16\30\u0509\13\30\3\30\3\30\5\30\u050d\n\30\3\30"+
		"\3\30\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u0517\n\31\f\31\16\31\u051a\13"+
		"\31\3\31\3\31\5\31\u051e\n\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u0526"+
		"\n\31\f\31\16\31\u0529\13\31\3\31\5\31\u052c\n\31\3\31\3\31\5\31\u0530"+
		"\n\31\3\31\5\31\u0533\n\31\3\31\3\31\5\31\u0537\n\31\3\31\3\31\3\31\5"+
		"\31\u053c\n\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u0546\n\32"+
		"\f\32\16\32\u0549\13\32\3\32\3\32\5\32\u054d\n\32\3\32\3\32\5\32\u0551"+
		"\n\32\3\32\5\32\u0554\n\32\3\32\3\32\3\32\5\32\u0559\n\32\3\32\3\32\3"+
		"\33\3\33\3\33\5\33\u0560\n\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0568"+
		"\n\33\f\33\16\33\u056b\13\33\3\33\3\33\5\33\u056f\n\33\3\33\5\33\u0572"+
		"\n\33\3\33\3\33\5\33\u0576\n\33\3\33\5\33\u0579\n\33\3\33\3\33\3\33\5"+
		"\33\u057e\n\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\5\35\u0590\n\35\3\35\7\35\u0593\n\35\f\35\16"+
		"\35\u0596\13\35\3\35\3\35\5\35\u059a\n\35\5\35\u059c\n\35\3\35\3\35\3"+
		"\36\3\36\3\36\5\36\u05a3\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u05aa\n\36"+
		"\3\36\5\36\u05ad\n\36\3\36\5\36\u05b0\n\36\3\36\5\36\u05b3\n\36\3\36\3"+
		"\36\3\36\3\37\3\37\3\37\3\37\7\37\u05bc\n\37\f\37\16\37\u05bf\13\37\3"+
		" \3 \3 \3 \3 \3!\3!\3!\3!\5!\u05ca\n!\3!\3!\5!\u05ce\n!\3!\5!\u05d1\n"+
		"!\3\"\3\"\3\"\3\"\3#\3#\3#\5#\u05da\n#\3$\3$\3$\3$\7$\u05e0\n$\f$\16$"+
		"\u05e3\13$\3$\3$\3$\3$\3$\5$\u05ea\n$\3$\5$\u05ed\n$\3%\3%\3%\3%\3%\5"+
		"%\u05f4\n%\3&\3&\5&\u05f8\n&\3\'\3\'\3\'\5\'\u05fd\n\'\3\'\6\'\u0600\n"+
		"\'\r\'\16\'\u0601\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5"+
		"(\u062b\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3"+
		")\3)\3)\3)\3)\3)\3)\5)\u0647\n)\3*\3*\3*\7*\u064c\n*\f*\16*\u064f\13*"+
		"\3*\3*\5*\u0653\n*\3*\3*\3+\3+\3+\5+\u065a\n+\3,\3,\3,\3,\3,\3-\3-\6-"+
		"\u0663\n-\r-\16-\u0664\3.\3.\3.\3/\3/\3/\5/\u066d\n/\3/\3/\5/\u0671\n"+
		"/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u067d\n\60\3\60\5"+
		"\60\u0680\n\60\3\60\3\60\3\61\3\61\5\61\u0686\n\61\3\61\5\61\u0689\n\61"+
		"\3\61\7\61\u068c\n\61\f\61\16\61\u068f\13\61\3\61\3\61\5\61\u0693\n\61"+
		"\3\62\3\62\5\62\u0697\n\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u069f\n"+
		"\62\f\62\16\62\u06a2\13\62\3\62\3\62\3\63\3\63\3\63\7\63\u06a9\n\63\f"+
		"\63\16\63\u06ac\13\63\3\64\3\64\3\64\5\64\u06b1\n\64\3\65\3\65\3\65\3"+
		"\65\3\65\3\65\3\65\7\65\u06ba\n\65\f\65\16\65\u06bd\13\65\3\65\3\65\5"+
		"\65\u06c1\n\65\3\66\3\66\5\66\u06c5\n\66\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\5\67\u06cd\n\67\38\38\38\38\38\38\58\u06d5\n8\38\38\38\58\u06da\n8\3"+
		"8\58\u06dd\n8\58\u06df\n8\39\59\u06e2\n9\39\39\39\39\3:\3:\3:\5:\u06eb"+
		"\n:\3:\3:\3:\5:\u06f0\n:\3:\3:\3;\3;\3;\5;\u06f7\n;\3;\5;\u06fa\n;\3<"+
		"\5<\u06fd\n<\3<\3<\5<\u0701\n<\3<\5<\u0704\n<\3<\3<\3<\3<\7<\u070a\n<"+
		"\f<\16<\u070d\13<\3<\3<\5<\u0711\n<\3<\7<\u0714\n<\f<\16<\u0717\13<\3"+
		"=\3=\3=\3=\5=\u071d\n=\3>\3>\3>\3?\3?\3?\3?\3?\5?\u0727\n?\3@\3@\3@\3"+
		"@\3@\3@\3@\3@\3A\3A\3A\3A\6A\u0735\nA\rA\16A\u0736\3A\3A\3B\3B\5B\u073d"+
		"\nB\3C\3C\3C\3C\3D\3D\3D\3D\5D\u0747\nD\3E\3E\3E\3E\3E\3E\7E\u074f\nE"+
		"\fE\16E\u0752\13E\3E\3E\3E\3E\5E\u0758\nE\3E\5E\u075b\nE\3E\3E\3E\5E\u0760"+
		"\nE\3F\3F\3F\3F\3F\3F\7F\u0768\nF\fF\16F\u076b\13F\3F\3F\5F\u076f\nF\3"+
		"F\3F\3F\3F\3F\5F\u0776\nF\3F\5F\u0779\nF\3F\3F\3F\5F\u077e\nF\3G\5G\u0781"+
		"\nG\3G\5G\u0784\nG\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\7G\u0793\nG"+
		"\fG\16G\u0796\13G\3G\3G\5G\u079a\nG\3G\3G\3G\3G\3G\3G\3G\5G\u07a3\nG\3"+
		"G\5G\u07a6\nG\3G\3G\3G\5G\u07ab\nG\3H\5H\u07ae\nH\3H\3H\3I\3I\3I\5I\u07b5"+
		"\nI\3I\5I\u07b8\nI\3J\3J\3J\3J\3K\5K\u07bf\nK\3K\6K\u07c2\nK\rK\16K\u07c3"+
		"\3K\3K\5K\u07c8\nK\3L\3L\3L\5L\u07cd\nL\3M\3M\3M\5M\u07d2\nM\3N\3N\3N"+
		"\3N\3N\3N\7N\u07da\nN\fN\16N\u07dd\13N\3N\3N\3N\5N\u07e2\nN\3O\3O\3O\3"+
		"O\3O\3O\7O\u07ea\nO\fO\16O\u07ed\13O\3O\3O\5O\u07f1\nO\3O\3O\3O\3O\3O"+
		"\5O\u07f8\nO\3O\3O\3O\3O\5O\u07fe\nO\3O\3O\5O\u0802\nO\3P\5P\u0805\nP"+
		"\3P\5P\u0808\nP\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\7P\u0817\nP\fP"+
		"\16P\u081a\13P\3P\3P\5P\u081e\nP\3P\3P\3P\3P\3P\3P\5P\u0826\nP\3Q\3Q\3"+
		"Q\3Q\3R\3R\3R\3R\3R\3R\7R\u0832\nR\fR\16R\u0835\13R\3R\3R\3S\3S\5S\u083b"+
		"\nS\3T\3T\3T\3U\3U\3U\3U\3U\3V\3V\3V\3V\6V\u0849\nV\rV\16V\u084a\3V\3"+
		"V\3W\3W\3W\3W\3W\7W\u0854\nW\fW\16W\u0857\13W\3W\3W\3X\3X\3X\3X\3X\3X"+
		"\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u086b\nX\3Y\3Y\3Y\3Y\3Z\3Z\5Z\u0873"+
		"\nZ\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u087c\nZ\3Z\3Z\5Z\u0880\nZ\3Z\3Z\3[\3[\3["+
		"\3[\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\6\\\u0898"+
		"\n\\\r\\\16\\\u0899\3\\\3\\\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]"+
		"\6]\u08ac\n]\r]\16]\u08ad\3]\3]\3]\5]\u08b3\n]\3]\6]\u08b6\n]\r]\16]\u08b7"+
		"\3]\3]\3]\5]\u08bd\n]\3^\3^\3^\5^\u08c2\n^\3_\3_\3_\3_\3`\3`\3`\3`\5`"+
		"\u08cc\n`\3a\3a\3a\3a\3b\3b\3b\5b\u08d5\nb\3b\3b\3b\3c\3c\3c\3d\5d\u08de"+
		"\nd\3d\6d\u08e1\nd\rd\16d\u08e2\3d\3d\3d\5d\u08e8\nd\3d\6d\u08eb\nd\r"+
		"d\16d\u08ec\7d\u08ef\nd\fd\16d\u08f2\13d\5d\u08f4\nd\3e\3e\3e\3e\5e\u08fa"+
		"\ne\3f\3f\3f\3g\3g\3g\3h\3h\3h\3i\3i\3i\5i\u0908\ni\3i\6i\u090b\ni\ri"+
		"\16i\u090c\5i\u090f\ni\3i\5i\u0912\ni\3j\3j\3j\3j\3j\3j\5j\u091a\nj\3"+
		"j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0927\nj\5j\u0929\nj\3j\3j\5j\u092d"+
		"\nj\3j\3j\3j\3j\3j\3j\5j\u0935\nj\5j\u0937\nj\5j\u0939\nj\5j\u093b\nj"+
		"\3k\3k\5k\u093f\nk\3k\6k\u0942\nk\rk\16k\u0943\3k\3k\3l\3l\3l\3l\3l\3"+
		"l\5l\u094e\nl\3m\3m\3m\3m\3m\3n\3n\3n\3n\5n\u0959\nn\5n\u095b\nn\3o\3"+
		"o\3o\3o\3o\3p\3p\5p\u0964\np\3p\3p\3p\3p\5p\u096a\np\5p\u096c\np\6p\u096e"+
		"\np\rp\16p\u096f\3p\3p\5p\u0974\np\3p\3p\5p\u0978\np\3p\3p\6p\u097c\n"+
		"p\rp\16p\u097d\3p\3p\3p\5p\u0983\np\3p\3p\3p\5p\u0988\np\3p\3p\3p\5p\u098d"+
		"\np\3p\5p\u0990\np\3p\3p\3q\3q\3q\3q\3r\3r\3r\5r\u099b\nr\3r\5r\u099e"+
		"\nr\3r\5r\u09a1\nr\3r\5r\u09a4\nr\3r\3r\3r\5r\u09a9\nr\3r\3r\3r\5r\u09ae"+
		"\nr\3s\3s\5s\u09b2\ns\3t\3t\5t\u09b6\nt\3t\3t\7t\u09ba\nt\ft\16t\u09bd"+
		"\13t\3t\5t\u09c0\nt\6t\u09c2\nt\rt\16t\u09c3\3t\3t\3u\3u\3u\3u\3u\3u\3"+
		"u\3u\5u\u09d0\nu\3u\6u\u09d3\nu\ru\16u\u09d4\3u\5u\u09d8\nu\3u\3u\5u\u09dc"+
		"\nu\3u\3u\5u\u09e0\nu\3u\3u\3u\5u\u09e5\nu\6u\u09e7\nu\ru\16u\u09e8\3"+
		"u\3u\7u\u09ed\nu\fu\16u\u09f0\13u\3v\3v\5v\u09f4\nv\3v\5v\u09f7\nv\3v"+
		"\3v\3v\3v\3v\3v\5v\u09ff\nv\3v\5v\u0a02\nv\3w\3w\5w\u0a06\nw\3w\3w\3w"+
		"\3w\5w\u0a0c\nw\6w\u0a0e\nw\rw\16w\u0a0f\3w\5w\u0a13\nw\3x\5x\u0a16\n"+
		"x\3x\3x\3x\3x\3x\3x\6x\u0a1e\nx\rx\16x\u0a1f\3y\3y\5y\u0a24\ny\3y\3y\3"+
		"y\5y\u0a29\ny\3y\3y\3z\3z\3z\5z\u0a30\nz\3z\3z\3z\3z\3z\3z\3z\3z\3z\3"+
		"z\3z\3z\3z\3z\3z\7z\u0a41\nz\fz\16z\u0a44\13z\3{\3{\3{\3|\3|\3}\3}\3}"+
		"\3}\3}\3}\3}\5}\u0a52\n}\5}\u0a54\n}\3~\3~\3~\3~\3~\3\177\3\177\3\177"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0a62\n\u0080\3\u0080\5\u0080"+
		"\u0a65\n\u0080\3\u0080\5\u0080\u0a68\n\u0080\3\u0081\3\u0081\3\u0081\3"+
		"\u0081\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0a72\n\u0082\3\u0082\5"+
		"\u0082\u0a75\n\u0082\3\u0082\5\u0082\u0a78\n\u0082\3\u0083\3\u0083\3\u0083"+
		"\3\u0084\3\u0084\5\u0084\u0a7f\n\u0084\3\u0084\3\u0084\3\u0085\3\u0085"+
		"\5\u0085\u0a85\n\u0085\3\u0085\3\u0085\3\u0086\5\u0086\u0a8a\n\u0086\3"+
		"\u0086\3\u0086\5\u0086\u0a8e\n\u0086\3\u0086\5\u0086\u0a91\n\u0086\3\u0086"+
		"\5\u0086\u0a94\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0a9a\n"+
		"\u0087\3\u0087\6\u0087\u0a9d\n\u0087\r\u0087\16\u0087\u0a9e\3\u0087\5"+
		"\u0087\u0aa2\n\u0087\3\u0087\3\u0087\5\u0087\u0aa6\n\u0087\3\u0087\3\u0087"+
		"\5\u0087\u0aaa\n\u0087\3\u0087\5\u0087\u0aad\n\u0087\3\u0088\3\u0088\3"+
		"\u0088\3\u0088\3\u0088\5\u0088\u0ab4\n\u0088\3\u0088\5\u0088\u0ab7\n\u0088"+
		"\5\u0088\u0ab9\n\u0088\3\u0089\3\u0089\3\u0089\5\u0089\u0abe\n\u0089\3"+
		"\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b\5\u008b\u0ac6\n\u008b\3"+
		"\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\6\u008c\u0ad3\n\u008c\r\u008c\16\u008c\u0ad4\5\u008c"+
		"\u0ad7\n\u008c\3\u008c\5\u008c\u0ada\n\u008c\3\u008c\3\u008c\5\u008c\u0ade"+
		"\n\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\5\u008c\u0ae8\n\u008c\7\u008c\u0aea\n\u008c\f\u008c\16\u008c\u0aed\13"+
		"\u008c\3\u008c\3\u008c\5\u008c\u0af1\n\u008c\3\u008c\6\u008c\u0af4\n\u008c"+
		"\r\u008c\16\u008c\u0af5\3\u008c\3\u008c\5\u008c\u0afa\n\u008c\5\u008c"+
		"\u0afc\n\u008c\3\u008c\5\u008c\u0aff\n\u008c\7\u008c\u0b01\n\u008c\f\u008c"+
		"\16\u008c\u0b04\13\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e"+
		"\3\u008e\5\u008e\u0b0d\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\5\u008f\u0b15\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\5\u008f\u0b1d\n\u008f\3\u008f\5\u008f\u0b20\n\u008f\3\u008f\5"+
		"\u008f\u0b23\n\u008f\3\u008f\5\u008f\u0b26\n\u008f\3\u008f\5\u008f\u0b29"+
		"\n\u008f\5\u008f\u0b2b\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\6\u008f\u0b32\n\u008f\r\u008f\16\u008f\u0b33\7\u008f\u0b36\n\u008f\f"+
		"\u008f\16\u008f\u0b39\13\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0b3e\n"+
		"\u008f\3\u008f\5\u008f\u0b41\n\u008f\3\u008f\3\u008f\5\u008f\u0b45\n\u008f"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u0b4a\n\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\5\u0090\u0b59\n\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090"+
		"\u0b5f\n\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0b64\n\u0090\3\u0090\3"+
		"\u0090\3\u0090\5\u0090\u0b69\n\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0b6e"+
		"\n\u0090\3\u0090\3\u0090\3\u0090\6\u0090\u0b73\n\u0090\r\u0090\16\u0090"+
		"\u0b74\5\u0090\u0b77\n\u0090\3\u0091\3\u0091\3\u0091\5\u0091\u0b7c\n\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b82\n\u0091\3\u0091\6\u0091"+
		"\u0b85\n\u0091\r\u0091\16\u0091\u0b86\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u0b8c\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b92\n\u0091\7"+
		"\u0091\u0b94\n\u0091\f\u0091\16\u0091\u0b97\13\u0091\3\u0091\3\u0091\5"+
		"\u0091\u0b9b\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0ba1\n\u0091"+
		"\3\u0091\5\u0091\u0ba4\n\u0091\3\u0091\5\u0091\u0ba7\n\u0091\3\u0091\5"+
		"\u0091\u0baa\n\u0091\3\u0091\5\u0091\u0bad\n\u0091\3\u0091\5\u0091\u0bb0"+
		"\n\u0091\3\u0091\3\u0091\5\u0091\u0bb4\n\u0091\3\u0091\3\u0091\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\5\u0092\u0bc4\n\u0092\3\u0092\6\u0092\u0bc7\n\u0092\r"+
		"\u0092\16\u0092\u0bc8\3\u0092\5\u0092\u0bcc\n\u0092\5\u0092\u0bce\n\u0092"+
		"\3\u0092\3\u0092\5\u0092\u0bd2\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\5\u0092\u0bdb\n\u0092\3\u0092\3\u0092\5\u0092"+
		"\u0bdf\n\u0092\3\u0092\3\u0092\5\u0092\u0be3\n\u0092\3\u0092\3\u0092\5"+
		"\u0092\u0be7\n\u0092\3\u0092\6\u0092\u0bea\n\u0092\r\u0092\16\u0092\u0beb"+
		"\3\u0092\3\u0092\3\u0092\5\u0092\u0bf1\n\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\5\u0092\u0bf7\n\u0092\3\u0092\5\u0092\u0bfa\n\u0092\3\u0092\5"+
		"\u0092\u0bfd\n\u0092\6\u0092\u0bff\n\u0092\r\u0092\16\u0092\u0c00\3\u0092"+
		"\3\u0092\3\u0093\3\u0093\3\u0093\5\u0093\u0c08\n\u0093\3\u0093\3\u0093"+
		"\5\u0093\u0c0c\n\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0c11\n\u0093\3"+
		"\u0093\3\u0093\3\u0093\5\u0093\u0c16\n\u0093\3\u0093\5\u0093\u0c19\n\u0093"+
		"\3\u0093\5\u0093\u0c1c\n\u0093\3\u0093\5\u0093\u0c1f\n\u0093\5\u0093\u0c21"+
		"\n\u0093\3\u0093\3\u0093\5\u0093\u0c25\n\u0093\3\u0093\5\u0093\u0c28\n"+
		"\u0093\3\u0094\3\u0094\5\u0094\u0c2c\n\u0094\3\u0095\3\u0095\3\u0095\3"+
		"\u0095\3\u0095\3\u0095\5\u0095\u0c34\n\u0095\5\u0095\u0c36\n\u0095\5\u0095"+
		"\u0c38\n\u0095\3\u0095\5\u0095\u0c3b\n\u0095\3\u0096\3\u0096\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\6\u0096\u0c44\n\u0096\r\u0096\16\u0096"+
		"\u0c45\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\5\u0097\u0c5a\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\6\u0097\u0c61\n\u0097\r\u0097\16\u0097\u0c62\3\u0097\3\u0097\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\6\u0099\u0c6f"+
		"\n\u0099\r\u0099\16\u0099\u0c70\3\u009a\5\u009a\u0c74\n\u009a\3\u009a"+
		"\3\u009a\5\u009a\u0c78\n\u009a\3\u009b\5\u009b\u0c7b\n\u009b\3\u009b\3"+
		"\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c"+
		"\u0c86\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f"+
		"\3\u009f\5\u009f\u0c99\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\5\u009f\u0ca2\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f"+
		"\u0ca7\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0cac\n\u009f\3\u009f\3"+
		"\u009f\3\u009f\3\u009f\5\u009f\u0cb2\n\u009f\3\u009f\3\u009f\3\u009f\3"+
		"\u009f\3\u009f\5\u009f\u0cb9\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0cbe"+
		"\n\u009f\5\u009f\u0cc0\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\5\u00a1\u0cd0\n\u00a1\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0cd5\n\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0cdb\n\u00a2\3\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ce2\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3"+
		"\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0cf5\n\u00a7\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9"+
		"\u0d00\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ac\3\u00ac\5\u00ac\u0d0b\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\6\u00ac\u0d11\n\u00ac\r\u00ac\16\u00ac\u0d12\5\u00ac\u0d15\n\u00ac\3"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u0d24\n\u00af\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0d2d\n\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\5\u00b1\u0d32\n\u00b1\3\u00b1\3\u00b1\5\u00b1\u0d36\n"+
		"\u00b1\3\u00b1\5\u00b1\u0d39\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3"+
		"\u0d47\n\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\7\u00b4\u0d4d\n\u00b4\f"+
		"\u00b4\16\u00b4\u0d50\13\u00b4\3\u00b4\5\u00b4\u0d53\n\u00b4\3\u00b4\5"+
		"\u00b4\u0d56\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b6\6\u00b6\u0d5c\n\u00b6"+
		"\r\u00b6\16\u00b6\u0d5d\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0d6a\n\u00b7\3\u00b8\3\u00b8"+
		"\5\u00b8\u0d6e\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0d73\n\u00b8\3"+
		"\u00b8\5\u00b8\u0d76\n\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0d83\n\u00b9\3"+
		"\u00b9\3\u00b9\5\u00b9\u0d87\n\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\5\u00ba\u0d8f\n\u00ba\3\u00ba\6\u00ba\u0d92\n\u00ba\r\u00ba"+
		"\16\u00ba\u0d93\3\u00ba\3\u00ba\5\u00ba\u0d98\n\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u0d9c\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u0da0\n\u00ba\3\u00ba\3"+
		"\u00ba\3\u00bb\3\u00bb\5\u00bb\u0da6\n\u00bb\3\u00bb\5\u00bb\u0da9\n\u00bb"+
		"\3\u00bb\5\u00bb\u0dac\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u0dc7\n\u00bd\3\u00bd\3\u00bd\6\u00bd\u0dcb\n"+
		"\u00bd\r\u00bd\16\u00bd\u0dcc\3\u00bd\3\u00bd\5\u00bd\u0dd1\n\u00bd\3"+
		"\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\5\u00be\u0dd8\n\u00be\3\u00be\6"+
		"\u00be\u0ddb\n\u00be\r\u00be\16\u00be\u0ddc\3\u00be\3\u00be\3\u00bf\3"+
		"\u00bf\5\u00bf\u0de3\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u0de7\n\u00bf\3\u00bf"+
		"\5\u00bf\u0dea\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0df0\n"+
		"\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1"+
		"\u0df9\n\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2"+
		"\u0e01\n\u00c2\3\u00c2\3\u00c2\5\u00c2\u0e05\n\u00c2\3\u00c3\3\u00c3\5"+
		"\u00c3\u0e09\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\5"+
		"\u00c4\u0e11\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3"+
		"\u00c4\5\u00c4\u0e1a\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\6\u00c5\u0e20"+
		"\n\u00c5\r\u00c5\16\u00c5\u0e21\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0e3e\n\u00c7\3\u00c8\6\u00c8\u0e41\n"+
		"\u00c8\r\u00c8\16\u00c8\u0e42\3\u00c9\3\u00c9\5\u00c9\u0e47\n\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\5\u00ca\u0e4e\n\u00ca\3\u00ca\3"+
		"\u00ca\5\u00ca\u0e52\n\u00ca\3\u00cb\3\u00cb\5\u00cb\u0e56\n\u00cb\3\u00cb"+
		"\3\u00cb\5\u00cb\u0e5a\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u0e64\n\u00cd\f\u00cd\16\u00cd\u0e67"+
		"\13\u00cd\3\u00cd\5\u00cd\u0e6a\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00d0\5\u00d0"+
		"\u0e78\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e7e\n\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e85\n\u00d0\3\u00d1\3"+
		"\u00d1\3\u00d1\5\u00d1\u0e8a\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0e95\n\u00d1\3\u00d1\5"+
		"\u00d1\u0e98\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0e9e\n\u00d1"+
		"\5\u00d1\u0ea0\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\5\u00d2\u0ea9\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0eb3\n\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\5\u00d3\u0eb8\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5"+
		"\3\u00d5\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d8\3\u00d8\5\u00d8\u0ec7"+
		"\n\u00d8\3\u00d9\3\u00d9\5\u00d9\u0ecb\n\u00d9\3\u00da\5\u00da\u0ece\n"+
		"\u00da\3\u00da\3\u00da\5\u00da\u0ed2\n\u00da\3\u00db\3\u00db\3\u00db\3"+
		"\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\6\u00dc\u0ede\n"+
		"\u00dc\r\u00dc\16\u00dc\u0edf\5\u00dc\u0ee2\n\u00dc\3\u00dc\3\u00dc\5"+
		"\u00dc\u0ee6\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u0eec\n\u00dd"+
		"\f\u00dd\16\u00dd\u0eef\13\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\5\u00de"+
		"\u0ef5\n\u00de\3\u00de\6\u00de\u0ef8\n\u00de\r\u00de\16\u00de\u0ef9\5"+
		"\u00de\u0efc\n\u00de\3\u00de\3\u00de\3\u00df\5\u00df\u0f01\n\u00df\3\u00df"+
		"\6\u00df\u0f04\n\u00df\r\u00df\16\u00df\u0f05\3\u00df\3\u00df\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0f0e\n\u00e0\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\5\u00e1\u0f15\n\u00e1\3\u00e1\3\u00e1\5\u00e1\u0f19\n"+
		"\u00e1\3\u00e1\5\u00e1\u0f1c\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0f28\n\u00e3\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0f2e\n\u00e4\3\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0f37\n\u00e6\3\u00e6\5"+
		"\u00e6\u0f3a\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0f40\n\u00e7"+
		"\3\u00e7\6\u00e7\u0f43\n\u00e7\r\u00e7\16\u00e7\u0f44\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\5\u00e7\u0f4b\n\u00e7\3\u00e7\6\u00e7\u0f4e\n\u00e7\r"+
		"\u00e7\16\u00e7\u0f4f\5\u00e7\u0f52\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\5\u00e8\u0f59\n\u00e8\3\u00e8\5\u00e8\u0f5c\n\u00e8\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0f63\n\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u0f6e"+
		"\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u0f74\n\u00ea\3\u00ea"+
		"\3\u00ea\5\u00ea\u0f78\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb"+
		"\u0f7e\n\u00eb\3\u00eb\6\u00eb\u0f81\n\u00eb\r\u00eb\16\u00eb\u0f82\5"+
		"\u00eb\u0f85\n\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\5\u00ec\u0f8b\n\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\5\u00ec\u0f96\n\u00ec\5\u00ec\u0f98\n\u00ec\5\u00ec\u0f9a\n\u00ec\3\u00ec"+
		"\5\u00ec\u0f9d\n\u00ec\3\u00ed\3\u00ed\5\u00ed\u0fa1\n\u00ed\3\u00ed\5"+
		"\u00ed\u0fa4\n\u00ed\3\u00ee\3\u00ee\5\u00ee\u0fa8\n\u00ee\3\u00ee\3\u00ee"+
		"\5\u00ee\u0fac\n\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0fb1\n\u00ee\3"+
		"\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u0fbc\n\u00f0\3\u00f0\3\u00f0\5\u00f0\u0fc0\n\u00f0\3\u00f0\3"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0fc8\n\u00f0\3\u00f1\5"+
		"\u00f1\u0fcb\n\u00f1\3\u00f1\3\u00f1\3\u00f1\7\u00f1\u0fd0\n\u00f1\f\u00f1"+
		"\16\u00f1\u0fd3\13\u00f1\3\u00f2\3\u00f2\5\u00f2\u0fd7\n\u00f2\3\u00f2"+
		"\6\u00f2\u0fda\n\u00f2\r\u00f2\16\u00f2\u0fdb\3\u00f3\3\u00f3\5\u00f3"+
		"\u0fe0\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0fe6\n\u00f3\3"+
		"\u00f3\3\u00f3\5\u00f3\u0fea\n\u00f3\3\u00f3\5\u00f3\u0fed\n\u00f3\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0ff5\n\u00f4\3\u00f4"+
		"\5\u00f4\u0ff8\n\u00f4\3\u00f4\3\u00f4\5\u00f4\u0ffc\n\u00f4\3\u00f4\3"+
		"\u00f4\5\u00f4\u1000\n\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1005\n\u00f4"+
		"\3\u00f4\5\u00f4\u1008\n\u00f4\3\u00f4\3\u00f4\5\u00f4\u100c\n\u00f4\3"+
		"\u00f4\3\u00f4\5\u00f4\u1010\n\u00f4\7\u00f4\u1012\n\u00f4\f\u00f4\16"+
		"\u00f4\u1015\13\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6\7\u00f6"+
		"\u1025\n\u00f6\f\u00f6\16\u00f6\u1028\13\u00f6\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\5\u00f7\u102f\n\u00f7\3\u00f8\3\u00f8\5\u00f8\u1033\n"+
		"\u00f8\3\u00f8\3\u00f8\5\u00f8\u1037\n\u00f8\3\u00f8\3\u00f8\3\u00f9\3"+
		"\u00f9\5\u00f9\u103d\n\u00f9\3\u00f9\3\u00f9\5\u00f9\u1041\n\u00f9\3\u00f9"+
		"\6\u00f9\u1044\n\u00f9\r\u00f9\16\u00f9\u1045\5\u00f9\u1048\n\u00f9\3"+
		"\u00f9\5\u00f9\u104b\n\u00f9\3\u00f9\3\u00f9\5\u00f9\u104f\n\u00f9\3\u00f9"+
		"\5\u00f9\u1052\n\u00f9\3\u00f9\5\u00f9\u1055\n\u00f9\3\u00f9\5\u00f9\u1058"+
		"\n\u00f9\3\u00fa\3\u00fa\5\u00fa\u105c\n\u00fa\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1068"+
		"\n\u00fc\3\u00fc\5\u00fc\u106b\n\u00fc\3\u00fd\5\u00fd\u106e\n\u00fd\3"+
		"\u00fd\6\u00fd\u1071\n\u00fd\r\u00fd\16\u00fd\u1072\3\u00fe\3\u00fe\7"+
		"\u00fe\u1077\n\u00fe\f\u00fe\16\u00fe\u107a\13\u00fe\3\u00fe\3\u00fe\5"+
		"\u00fe\u107e\n\u00fe\3\u00ff\3\u00ff\7\u00ff\u1082\n\u00ff\f\u00ff\16"+
		"\u00ff\u1085\13\u00ff\3\u00ff\5\u00ff\u1088\n\u00ff\3\u0100\3\u0100\3"+
		"\u0100\5\u0100\u108d\n\u0100\3\u0100\3\u0100\3\u0100\7\u0100\u1092\n\u0100"+
		"\f\u0100\16\u0100\u1095\13\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u109a"+
		"\n\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u10a1\n\u0100"+
		"\3\u0101\5\u0101\u10a4\n\u0101\3\u0101\5\u0101\u10a7\n\u0101\3\u0101\3"+
		"\u0101\5\u0101\u10ab\n\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u10b0\n\u0101"+
		"\3\u0101\3\u0101\7\u0101\u10b4\n\u0101\f\u0101\16\u0101\u10b7\13\u0101"+
		"\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104\5\u0104"+
		"\u10c1\n\u0104\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u10c8\n"+
		"\u0105\3\u0105\3\u0105\5\u0105\u10cc\n\u0105\3\u0106\3\u0106\3\u0106\3"+
		"\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u10d6\n\u0106\3\u0107\3"+
		"\u0107\5\u0107\u10da\n\u0107\3\u0107\3\u0107\5\u0107\u10de\n\u0107\3\u0107"+
		"\6\u0107\u10e1\n\u0107\r\u0107\16\u0107\u10e2\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u10ee\n\u0108"+
		"\3\u0109\3\u0109\3\u0109\5\u0109\u10f3\n\u0109\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\5\u010a\u10f9\n\u010a\3\u010a\6\u010a\u10fc\n\u010a\r\u010a\16"+
		"\u010a\u10fd\3\u010a\5\u010a\u1101\n\u010a\3\u010a\6\u010a\u1104\n\u010a"+
		"\r\u010a\16\u010a\u1105\5\u010a\u1108\n\u010a\3\u010a\3\u010a\3\u010b"+
		"\3\u010b\5\u010b\u110e\n\u010b\3\u010c\3\u010c\3\u010c\5\u010c\u1113\n"+
		"\u010c\3\u010c\5\u010c\u1116\n\u010c\3\u010d\3\u010d\3\u010d\5\u010d\u111b"+
		"\n\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1120\n\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e\5\u010e\u1129\n\u010e\3\u010e"+
		"\6\u010e\u112c\n\u010e\r\u010e\16\u010e\u112d\3\u010e\3\u010e\3\u010f"+
		"\3\u010f\5\u010f\u1134\n\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f"+
		"\u113a\n\u010f\3\u010f\6\u010f\u113d\n\u010f\r\u010f\16\u010f\u113e\3"+
		"\u010f\3\u010f\5\u010f\u1143\n\u010f\5\u010f\u1145\n\u010f\3\u0110\3\u0110"+
		"\3\u0110\5\u0110\u114a\n\u0110\3\u0110\3\u0110\5\u0110\u114e\n\u0110\3"+
		"\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u1154\n\u0110\3\u0110\3\u0110\5"+
		"\u0110\u1158\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111\3\u0112\3\u0112\3"+
		"\u0112\5\u0112\u1161\n\u0112\3\u0112\6\u0112\u1164\n\u0112\r\u0112\16"+
		"\u0112\u1165\3\u0112\5\u0112\u1169\n\u0112\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\5\u0112\u116f\n\u0112\3\u0112\6\u0112\u1172\n\u0112\r\u0112\16\u0112"+
		"\u1173\5\u0112\u1176\n\u0112\5\u0112\u1178\n\u0112\3\u0113\3\u0113\3\u0113"+
		"\5\u0113\u117d\n\u0113\3\u0114\3\u0114\3\u0114\5\u0114\u1182\n\u0114\3"+
		"\u0114\6\u0114\u1185\n\u0114\r\u0114\16\u0114\u1186\3\u0114\3\u0114\3"+
		"\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u118f\n\u0115\3\u0115\6\u0115\u1192"+
		"\n\u0115\r\u0115\16\u0115\u1193\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116"+
		"\5\u0116\u119b\n\u0116\3\u0116\3\u0116\5\u0116\u119f\n\u0116\3\u0117\3"+
		"\u0117\3\u0117\3\u0118\3\u0118\7\u0118\u11a6\n\u0118\f\u0118\16\u0118"+
		"\u11a9\13\u0118\3\u0118\5\u0118\u11ac\n\u0118\3\u0118\7\u0118\u11af\n"+
		"\u0118\f\u0118\16\u0118\u11b2\13\u0118\3\u0118\3\u0118\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u11bc\n\u0119\5\u0119\u11be\n"+
		"\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\7\u011b\u11cc\n\u011b\f\u011b\16\u011b"+
		"\u11cf\13\u011b\3\u011c\3\u011c\5\u011c\u11d3\n\u011c\3\u011c\3\u011c"+
		"\7\u011c\u11d7\n\u011c\f\u011c\16\u011c\u11da\13\u011c\3\u011c\3\u011c"+
		"\3\u011d\5\u011d\u11df\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011f\3\u011f\5\u011f\u11ed"+
		"\n\u011f\3\u011f\6\u011f\u11f0\n\u011f\r\u011f\16\u011f\u11f1\3\u011f"+
		"\3\u011f\3\u0120\3\u0120\5\u0120\u11f8\n\u0120\3\u0120\5\u0120\u11fb\n"+
		"\u0120\3\u0121\5\u0121\u11fe\n\u0121\3\u0121\3\u0121\5\u0121\u1202\n\u0121"+
		"\3\u0121\7\u0121\u1205\n\u0121\f\u0121\16\u0121\u1208\13\u0121\3\u0121"+
		"\3\u0121\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1210\n\u0122\5\u0122"+
		"\u1212\n\u0122\3\u0122\3\u0122\5\u0122\u1216\n\u0122\3\u0122\5\u0122\u1219"+
		"\n\u0122\3\u0123\3\u0123\3\u0123\5\u0123\u121e\n\u0123\5\u0123\u1220\n"+
		"\u0123\3\u0123\3\u0123\5\u0123\u1224\n\u0123\3\u0123\3\u0123\3\u0123\3"+
		"\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1230\n"+
		"\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0127\3\u0127\5\u0127"+
		"\u1239\n\u0127\3\u0127\3\u0127\5\u0127\u123d\n\u0127\3\u0127\6\u0127\u1240"+
		"\n\u0127\r\u0127\16\u0127\u1241\3\u0128\3\u0128\5\u0128\u1246\n\u0128"+
		"\3\u0128\3\u0128\5\u0128\u124a\n\u0128\3\u0129\3\u0129\3\u0129\5\u0129"+
		"\u124f\n\u0129\3\u0129\5\u0129\u1252\n\u0129\3\u012a\3\u012a\3\u012a\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u125c\n\u012b\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\5\u012c\u1262\n\u012c\3\u012c\5\u012c\u1265\n\u012c"+
		"\3\u012c\5\u012c\u1268\n\u012c\3\u012d\3\u012d\5\u012d\u126c\n\u012d\3"+
		"\u012d\6\u012d\u126f\n\u012d\r\u012d\16\u012d\u1270\3\u012d\3\u012d\3"+
		"\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u127a\n\u012d\3\u012e\3"+
		"\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1284\n"+
		"\u012e\3\u012f\3\u012f\5\u012f\u1288\n\u012f\3\u012f\3\u012f\5\u012f\u128c"+
		"\n\u012f\3\u012f\5\u012f\u128f\n\u012f\3\u012f\5\u012f\u1292\n\u012f\3"+
		"\u0130\3\u0130\3\u0130\5\u0130\u1297\n\u0130\3\u0131\3\u0131\3\u0131\5"+
		"\u0131\u129c\n\u0131\3\u0131\5\u0131\u129f\n\u0131\3\u0131\5\u0131\u12a2"+
		"\n\u0131\3\u0132\3\u0132\6\u0132\u12a6\n\u0132\r\u0132\16\u0132\u12a7"+
		"\3\u0132\5\u0132\u12ab\n\u0132\3\u0132\3\u0132\3\u0133\3\u0133\5\u0133"+
		"\u12b1\n\u0133\3\u0133\5\u0133\u12b4\n\u0133\3\u0134\5\u0134\u12b7\n\u0134"+
		"\3\u0134\6\u0134\u12ba\n\u0134\r\u0134\16\u0134\u12bb\3\u0134\5\u0134"+
		"\u12bf\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135\6\u0135\u12c5\n\u0135\r"+
		"\u0135\16\u0135\u12c6\3\u0136\3\u0136\6\u0136\u12cb\n\u0136\r\u0136\16"+
		"\u0136\u12cc\3\u0137\3\u0137\3\u0137\5\u0137\u12d2\n\u0137\3\u0138\3\u0138"+
		"\3\u0138\5\u0138\u12d7\n\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\5\u0139\u12df\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\5\u0139\u12e9\n\u0139\3\u0139\3\u0139\5\u0139"+
		"\u12ed\n\u0139\5\u0139\u12ef\n\u0139\3\u0139\5\u0139\u12f2\n\u0139\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u12fc"+
		"\n\u013a\f\u013a\16\u013a\u12ff\13\u013a\3\u013a\5\u013a\u1302\n\u013a"+
		"\3\u013a\5\u013a\u1305\n\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013c"+
		"\3\u013c\3\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d"+
		"\u1314\n\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1319\n\u013d\3\u013d\3"+
		"\u013d\5\u013d\u131d\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5"+
		"\u013e\u1324\n\u013e\3\u013e\5\u013e\u1327\n\u013e\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\7\u013f\u132e\n\u013f\f\u013f\16\u013f\u1331\13\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1337\n\u013f\3\u0140\3\u0140"+
		"\3\u0140\5\u0140\u133c\n\u0140\3\u0141\3\u0141\5\u0141\u1340\n\u0141\3"+
		"\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u1348\n\u0142\3"+
		"\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u134e\n\u0142\3\u0143\3\u0143\3"+
		"\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1356\n\u0143\3\u0143\5\u0143\u1359"+
		"\n\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0145\3\u0145\3\u0145\5\u0145"+
		"\u1362\n\u0145\3\u0145\5\u0145\u1365\n\u0145\3\u0145\5\u0145\u1368\n\u0145"+
		"\3\u0146\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1371"+
		"\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148\u1377\n\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\5\u0148\u137d\n\u0148\5\u0148\u137f\n\u0148\3"+
		"\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\5\u0149\u138c\n\u0149\5\u0149\u138e\n\u0149\3\u014a\3"+
		"\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1397\n\u014a\5"+
		"\u014a\u1399\n\u014a\3\u014b\3\u014b\5\u014b\u139d\n\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\5\u014b\u13a3\n\u014b\3\u014b\3\u014b\5\u014b\u13a7\n"+
		"\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d\3\u014e"+
		"\3\u014e\3\u014e\7\u014e\u13b3\n\u014e\f\u014e\16\u014e\u13b6\13\u014e"+
		"\3\u014f\3\u014f\5\u014f\u13ba\n\u014f\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u13c5\n\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151"+
		"\u13d0\n\u0151\3\u0151\3\u0151\5\u0151\u13d4\n\u0151\3\u0151\3\u0151\3"+
		"\u0151\7\u0151\u13d9\n\u0151\f\u0151\16\u0151\u13dc\13\u0151\3\u0151\3"+
		"\u0151\5\u0151\u13e0\n\u0151\7\u0151\u13e2\n\u0151\f\u0151\16\u0151\u13e5"+
		"\13\u0151\3\u0151\3\u0151\5\u0151\u13e9\n\u0151\3\u0151\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0151\7\u0151\u13f1\n\u0151\f\u0151\16\u0151\u13f4"+
		"\13\u0151\3\u0152\3\u0152\3\u0152\5\u0152\u13f9\n\u0152\3\u0152\5\u0152"+
		"\u13fc\n\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\7\u0153\u1405\n\u0153\f\u0153\16\u0153\u1408\13\u0153\3\u0154\3\u0154"+
		"\5\u0154\u140c\n\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\5\u0154\u1416\n\u0154\5\u0154\u1418\n\u0154\5\u0154\u141a"+
		"\n\u0154\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u1424\n\u0155\3\u0155\3\u0155\5\u0155\u1428\n\u0155\5\u0155\u142a"+
		"\n\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\7\u0156\u1434\n\u0156\f\u0156\16\u0156\u1437\13\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\5\u0156\u143e\n\u0156\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158"+
		"\u144b\n\u0158\3\u0158\5\u0158\u144e\n\u0158\3\u0158\3\u0158\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\7\u0158\u145a\n"+
		"\u0158\f\u0158\16\u0158\u145d\13\u0158\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\5\u0159\u1464\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\5\u0159\u146c\n\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\5\u0159\u1473\n\u0159\3\u0159\3\u0159\5\u0159\u1477\n\u0159\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u147e\n\u015a\3\u015b\3\u015b\5"+
		"\u015b\u1482\n\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u1487\n\u015b\7\u015b"+
		"\u1489\n\u015b\f\u015b\16\u015b\u148c\13\u015b\3\u015b\3\u015b\3\u015b"+
		"\7\u015b\u1491\n\u015b\f\u015b\16\u015b\u1494\13\u015b\3\u015b\5\u015b"+
		"\u1497\n\u015b\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u149e\n"+
		"\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u14a3\n\u015c\3\u015c\3\u015c\3"+
		"\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u14ac\n\u015c\3\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u14b5\n\u015d\3"+
		"\u015d\5\u015d\u14b8\n\u015d\3\u015d\3\u015d\3\u015e\3\u015e\3\u015e\3"+
		"\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u14cc\n\u015e\3\u015f\3\u015f"+
		"\5\u015f\u14d0\n\u015f\3\u0160\5\u0160\u14d3\n\u0160\3\u0160\3\u0160\3"+
		"\u0160\6\u0160\u14d8\n\u0160\r\u0160\16\u0160\u14d9\3\u0160\5\u0160\u14dd"+
		"\n\u0160\3\u0160\3\u0160\5\u0160\u14e1\n\u0160\3\u0160\5\u0160\u14e4\n"+
		"\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u14eb\n\u0161\3"+
		"\u0162\5\u0162\u14ee\n\u0162\3\u0162\3\u0162\6\u0162\u14f2\n\u0162\r\u0162"+
		"\16\u0162\u14f3\3\u0162\5\u0162\u14f7\n\u0162\3\u0162\3\u0162\5\u0162"+
		"\u14fb\n\u0162\3\u0162\5\u0162\u14fe\n\u0162\3\u0163\3\u0163\3\u0163\3"+
		"\u0163\3\u0163\5\u0163\u1505\n\u0163\3\u0164\3\u0164\3\u0164\5\u0164\u150a"+
		"\n\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\7\u0165\u1516\n\u0165\f\u0165\16\u0165\u1519\13\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u151f\n\u0165\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\5\u0166\u152a"+
		"\n\u0166\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167"+
		"\u1533\n\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\5\u0167\u153c\n\u0167\3\u0167\3\u0167\5\u0167\u1540\n\u0167\3\u0167\3"+
		"\u0167\5\u0167\u1544\n\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3"+
		"\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\5\u0167\u155e\n\u0167\3\u0167\5\u0167\u1561\n\u0167\3\u0167\5"+
		"\u0167\u1564\n\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3"+
		"\u0167\3\u0167\5\u0167\u156e\n\u0167\3\u0167\3\u0167\5\u0167\u1572\n\u0167"+
		"\3\u0168\3\u0168\3\u0168\5\u0168\u1577\n\u0168\3\u0169\3\u0169\3\u0169"+
		"\5\u0169\u157c\n\u0169\3\u016a\3\u016a\3\u016a\5\u016a\u1581\n\u016a\3"+
		"\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u158a\n"+
		"\u016a\3\u016a\5\u016a\u158d\n\u016a\5\u016a\u158f\n\u016a\3\u016a\3\u016a"+
		"\5\u016a\u1593\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a"+
		"\u159a\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u15a1\n"+
		"\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u15a9\n"+
		"\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u15b8\n\u016a\3\u016b"+
		"\3\u016b\3\u016b\5\u016b\u15bd\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u15c2\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u15c8\n\u016b\3"+
		"\u016b\5\u016b\u15cb\n\u016b\3\u016b\3\u016b\5\u016b\u15cf\n\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u15d9"+
		"\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\5\u016b\u15e5\n\u016b\5\u016b\u15e7\n\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u15ee\n\u016b\3\u016b\3\u016b\5"+
		"\u016b\u15f2\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\6\u016b\u15f9"+
		"\n\u016b\r\u016b\16\u016b\u15fa\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\5\u016b\u1604\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u1612\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u161a\n\u016b\3\u016b\5\u016b\u161d\n\u016b\3\u016b\3\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1626\n\u016b\3\u016b\3\u016b\7"+
		"\u016b\u162a\n\u016b\f\u016b\16\u016b\u162d\13\u016b\3\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1636\n\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u163e\n\u016b\3\u016b\5"+
		"\u016b\u1641\n\u016b\3\u016b\5\u016b\u1644\n\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u164d\n\u016b\3\u016b\3\u016b"+
		"\3\u016b\5\u016b\u1652\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1657\n"+
		"\u016b\3\u016b\6\u016b\u165a\n\u016b\r\u016b\16\u016b\u165b\3\u016b\3"+
		"\u016b\3\u016b\5\u016b\u1661\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1666"+
		"\n\u016b\3\u016b\5\u016b\u1669\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u166e\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1673\n\u016b\7\u016b\u1675"+
		"\n\u016b\f\u016b\16\u016b\u1678\13\u016b\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u167d\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1683\n\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u168c\n"+
		"\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1691\n\u016b\3\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1699\n\u016b\3\u016b\3\u016b\5"+
		"\u016b\u169d\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u16a2\n\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\5\u016b\u16a8\n\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\5\u016b\u16af\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b"+
		"\u16b4\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u16bb\n"+
		"\u016b\3\u016b\3\u016b\5\u016b\u16bf\n\u016b\3\u016b\3\u016b\3\u016b\5"+
		"\u016b\u16c4\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5"+
		"\u016b\u16cc\n\u016b\3\u016b\5\u016b\u16cf\n\u016b\3\u016b\5\u016b\u16d2"+
		"\n\u016b\3\u016b\5\u016b\u16d5\n\u016b\3\u016b\3\u016b\5\u016b\u16d9\n"+
		"\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u16de\n\u016b\3\u016b\3\u016b\3"+
		"\u016b\5\u016b\u16e3\n\u016b\3\u016b\3\u016b\5\u016b\u16e7\n\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u16ee\n\u016b\3\u016b\3\u016b"+
		"\3\u016b\5\u016b\u16f3\n\u016b\5\u016b\u16f5\n\u016b\3\u016c\3\u016c\3"+
		"\u016d\3\u016d\3\u016e\3\u016e\3\u016f\3\u016f\3\u016f\5\u016f\u1700\n"+
		"\u016f\3\u016f\3\u016f\5\u016f\u1704\n\u016f\5\u016f\u1706\n\u016f\3\u016f"+
		"\3\u016f\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170"+
		"\u1711\n\u0170\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0172\3\u0172\5\u0172\u171c\n\u0172\3\u0173\3\u0173\3\u0173\5\u0173"+
		"\u1721\n\u0173\3\u0173\6\u0173\u1724\n\u0173\r\u0173\16\u0173\u1725\5"+
		"\u0173\u1728\n\u0173\3\u0174\3\u0174\5\u0174\u172c\n\u0174\3\u0174\5\u0174"+
		"\u172f\n\u0174\3\u0174\3\u0174\5\u0174\u1733\n\u0174\3\u0175\3\u0175\3"+
		"\u0175\3\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176"+
		"\5\u0176\u1740\n\u0176\3\u0177\3\u0177\3\u0177\5\u0177\u1745\n\u0177\3"+
		"\u0177\3\u0177\5\u0177\u1749\n\u0177\3\u0177\6\u0177\u174c\n\u0177\r\u0177"+
		"\16\u0177\u174d\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u1754\n\u0177"+
		"\3\u0177\3\u0177\5\u0177\u1758\n\u0177\3\u0178\3\u0178\3\u0178\5\u0178"+
		"\u175d\n\u0178\3\u0178\3\u0178\5\u0178\u1761\n\u0178\3\u0178\3\u0178\3"+
		"\u0178\5\u0178\u1766\n\u0178\3\u0179\3\u0179\3\u0179\5\u0179\u176b\n\u0179"+
		"\3\u0179\5\u0179\u176e\n\u0179\3\u0179\5\u0179\u1771\n\u0179\3\u0179\6"+
		"\u0179\u1774\n\u0179\r\u0179\16\u0179\u1775\3\u0179\3\u0179\3\u017a\3"+
		"\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u177f\n\u017a\3\u017a\3\u017a\3"+
		"\u017a\3\u017a\7\u017a\u1785\n\u017a\f\u017a\16\u017a\u1788\13\u017a\3"+
		"\u017a\5\u017a\u178b\n\u017a\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b\3"+
		"\u017b\3\u017b\3\u017b\5\u017b\u1795\n\u017b\3\u017b\5\u017b\u1798\n\u017b"+
		"\5\u017b\u179a\n\u017b\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\5\u017d\u17a4\n\u017d\5\u017d\u17a6\n\u017d\3\u017e\3"+
		"\u017e\3\u017e\3\u017e\5\u017e\u17ac\n\u017e\3\u017f\3\u017f\3\u017f\3"+
		"\u017f\5\u017f\u17b2\n\u017f\5\u017f\u17b4\n\u017f\3\u0180\3\u0180\3\u0180"+
		"\3\u0181\3\u0181\3\u0181\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\5\u0182\u17c2\n\u0182\5\u0182\u17c4\n\u0182\3\u0183\3\u0183\3\u0183\3"+
		"\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u17ce\n\u0183\3\u0184\3"+
		"\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u17d7\n\u0184\3"+
		"\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u17e0\n"+
		"\u0185\3\u0186\3\u0186\5\u0186\u17e4\n\u0186\3\u0186\3\u0186\5\u0186\u17e8"+
		"\n\u0186\3\u0186\3\u0186\3\u0187\5\u0187\u17ed\n\u0187\3\u0187\3\u0187"+
		"\5\u0187\u17f1\n\u0187\3\u0187\5\u0187\u17f4\n\u0187\3\u0188\3\u0188\5"+
		"\u0188\u17f8\n\u0188\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u17ff"+
		"\n\u0189\3\u018a\3\u018a\5\u018a\u1803\n\u018a\3\u018a\3\u018a\5\u018a"+
		"\u1807\n\u018a\3\u018a\6\u018a\u180a\n\u018a\r\u018a\16\u018a\u180b\3"+
		"\u018b\3\u018b\5\u018b\u1810\n\u018b\3\u018c\3\u018c\3\u018d\3\u018d\3"+
		"\u018e\3\u018e\3\u018f\3\u018f\3\u0190\3\u0190\3\u0191\3\u0191\3\u0192"+
		"\3\u0192\3\u0192\7\u0192\u1821\n\u0192\f\u0192\16\u0192\u1824\13\u0192"+
		"\3\u0192\3\u0192\5\u0192\u1828\n\u0192\3\u0193\3\u0193\3\u0194\3\u0194"+
		"\3\u0194\5\u0194\u182f\n\u0194\3\u0195\3\u0195\3\u0196\3\u0196\3\u0197"+
		"\3\u0197\3\u0198\3\u0198\3\u0198\5\u0198\u183a\n\u0198\3\u0199\3\u0199"+
		"\3\u0199\7\u0199\u183f\n\u0199\f\u0199\16\u0199\u1842\13\u0199\3\u019a"+
		"\3\u019a\3\u019b\3\u019b\5\u019b\u1848\n\u019b\3\u019c\3\u019c\5\u019c"+
		"\u184c\n\u019c\3\u019d\3\u019d\3\u019d\7\u019d\u1851\n\u019d\f\u019d\16"+
		"\u019d\u1854\13\u019d\3\u019d\3\u019d\5\u019d\u1858\n\u019d\3\u019e\3"+
		"\u019e\3\u019f\3\u019f\3\u019f\7\u019f\u185f\n\u019f\f\u019f\16\u019f"+
		"\u1862\13\u019f\3\u01a0\3\u01a0\3\u01a0\7\u01a0\u1867\n\u01a0\f\u01a0"+
		"\16\u01a0\u186a\13\u01a0\3\u01a1\3\u01a1\3\u01a1\7\u01a1\u186f\n\u01a1"+
		"\f\u01a1\16\u01a1\u1872\13\u01a1\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1877"+
		"\n\u01a2\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u187c\n\u01a3\3\u01a4\3\u01a4"+
		"\3\u01a4\5\u01a4\u1881\n\u01a4\3\u01a5\3\u01a5\5\u01a5\u1885\n\u01a5\3"+
		"\u01a5\3\u01a5\3\u01a5\5\u01a5\u188a\n\u01a5\3\u01a5\5\u01a5\u188d\n\u01a5"+
		"\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1892\n\u01a6\3\u01a7\3\u01a7\5\u01a7"+
		"\u1896\n\u01a7\3\u01a8\3\u01a8\5\u01a8\u189a\n\u01a8\3\u01a9\3\u01a9\3"+
		"\u01a9\5\u01a9\u189f\n\u01a9\3\u01aa\3\u01aa\3\u01ab\3\u01ab\3\u01ab\7"+
		"\u01ab\u18a6\n\u01ab\f\u01ab\16\u01ab\u18a9\13\u01ab\3\u01ac\3\u01ac\3"+
		"\u01ac\5\u01ac\u18ae\n\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u18b3\n\u01ac"+
		"\3\u01ad\3\u01ad\3\u01ad\7\u01ad\u18b8\n\u01ad\f\u01ad\16\u01ad\u18bb"+
		"\13\u01ad\3\u01ae\3\u01ae\3\u01af\3\u01af\3\u01b0\3\u01b0\3\u01b1\3\u01b1"+
		"\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u18c8\n\u01b2\3\u01b2\6\u01b2\u18cb\n"+
		"\u01b2\r\u01b2\16\u01b2\u18cc\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\5\u01b2\u18dd\n\u01b2\3\u01b3\5\u01b3\u18e0\n\u01b3\3\u01b3\6\u01b3\u18e3"+
		"\n\u01b3\r\u01b3\16\u01b3\u18e4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b5"+
		"\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u18f2\n\u01b5"+
		"\3\u01b6\3\u01b6\5\u01b6\u18f6\n\u01b6\3\u01b6\7\u01b6\u18f9\n\u01b6\f"+
		"\u01b6\16\u01b6\u18fc\13\u01b6\3\u01b6\3\u01b6\5\u01b6\u1900\n\u01b6\3"+
		"\u01b7\3\u01b7\5\u01b7\u1904\n\u01b7\3\u01b7\3\u01b7\5\u01b7\u1908\n\u01b7"+
		"\7\u01b7\u190a\n\u01b7\f\u01b7\16\u01b7\u190d\13\u01b7\3\u01b7\3\u01b7"+
		"\5\u01b7\u1911\n\u01b7\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8"+
		"\u1918\n\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u191d\n\u01b8\5\u01b8\u191f"+
		"\n\u01b8\5\u01b8\u1921\n\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\5\u01b8\u192a\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u192e\n"+
		"\u01b8\6\u01b8\u1930\n\u01b8\r\u01b8\16\u01b8\u1931\5\u01b8\u1934\n\u01b8"+
		"\3\u01b8\3\u01b8\5\u01b8\u1938\n\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1941\n\u01ba\3\u01ba\3\u01ba\3\u01bb"+
		"\3\u01bb\5\u01bb\u1947\n\u01bb\3\u01bb\3\u01bb\5\u01bb\u194b\n\u01bb\5"+
		"\u01bb\u194d\n\u01bb\3\u01bc\3\u01bc\5\u01bc\u1951\n\u01bc\3\u01bc\3\u01bc"+
		"\5\u01bc\u1955\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc"+
		"\u195c\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc"+
		"\u1964\n\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc"+
		"\u196c\n\u01bc\5\u01bc\u196e\n\u01bc\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5"+
		"\u01bd\u1974\n\u01bd\3\u01bd\5\u01bd\u1977\n\u01bd\3\u01bd\3\u01bd\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\5\u01be\u198f\n\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\5\u01be\u1996\n\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u19b7"+
		"\n\u01be\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u19bc\n\u01bf\3\u01bf\5\u01bf"+
		"\u19bf\n\u01bf\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u19c4\n\u01bf\5\u01bf\u19c6"+
		"\n\u01bf\3\u01bf\3\u01bf\7\u01bf\u19ca\n\u01bf\f\u01bf\16\u01bf\u19cd"+
		"\13\u01bf\3\u01c0\3\u01c0\3\u01c0\7\u01c0\u19d2\n\u01c0\f\u01c0\16\u01c0"+
		"\u19d5\13\u01c0\3\u01c1\3\u01c1\5\u01c1\u19d9\n\u01c1\3\u01c1\3\u01c1"+
		"\3\u01c1\7\u01c1\u19de\n\u01c1\f\u01c1\16\u01c1\u19e1\13\u01c1\3\u01c1"+
		"\3\u01c1\5\u01c1\u19e5\n\u01c1\3\u01c1\5\u01c1\u19e8\n\u01c1\3\u01c2\3"+
		"\u01c2\5\u01c2\u19ec\n\u01c2\3\u01c2\3\u01c2\3\u01c2\7\u01c2\u19f1\n\u01c2"+
		"\f\u01c2\16\u01c2\u19f4\13\u01c2\3\u01c3\3\u01c3\5\u01c3\u19f8\n\u01c3"+
		"\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3"+
		"\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3"+
		"\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3"+
		"\3\u01c3\5\u01c3\u1a16\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\5\u01c4\u1a1d\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1a2c"+
		"\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1a3c\n\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4"+
		"\u1a4f\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4"+
		"\u1a60\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1a67\n"+
		"\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1a6f\n"+
		"\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1a7c\n\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1a85\n\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1a8e\n\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1a97\n\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4"+
		"\u1aa1\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4"+
		"\u1aa9\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\5\u01c4\u1ab3\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1abd\n\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1ac9"+
		"\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1ad9\n\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1aeb"+
		"\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1af8\n\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\5\u01c4\u1b07\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1b12\n\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1b1c\n\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\5\u01c4\u1b27\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\5\u01c4\u1b31\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\5\u01c4\u1b42\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\5\u01c4\u1b48\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1b5e\n\u01c4\3\u01c5"+
		"\3\u01c5\3\u01c5\5\u01c5\u1b63\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\5\u01c5\u1b69\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u1b6f\n"+
		"\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u1b75\n\u01c5\3\u01c5\3"+
		"\u01c5\3\u01c5\5\u01c5\u1b7a\n\u01c5\5\u01c5\u1b7c\n\u01c5\3\u01c5\5\u01c5"+
		"\u1b7f\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\5\u01c5\u1b89\n\u01c5\3\u01c5\5\u01c5\u1b8c\n\u01c5\5\u01c5\u1b8e"+
		"\n\u01c5\5\u01c5\u1b90\n\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u1b9e"+
		"\n\u01c5\3\u01c6\3\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c8\3\u01c8\3\u01c9"+
		"\3\u01c9\5\u01c9\u1ba9\n\u01c9\3\u01c9\3\u01c9\3\u01ca\3\u01ca\5\u01ca"+
		"\u1baf\n\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc\3\u01cd"+
		"\3\u01cd\3\u01ce\3\u01ce\3\u01ce\2\5\u02a0\u02a4\u02ae\u01cf\2\4\6\b\n"+
		"\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\"+
		"^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090"+
		"\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8"+
		"\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0"+
		"\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8"+
		"\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0"+
		"\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108"+
		"\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120"+
		"\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138"+
		"\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150"+
		"\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168"+
		"\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180"+
		"\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198"+
		"\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0"+
		"\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8"+
		"\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0"+
		"\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8"+
		"\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210"+
		"\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228"+
		"\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240"+
		"\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258"+
		"\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270"+
		"\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288"+
		"\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0"+
		"\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8"+
		"\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0"+
		"\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8"+
		"\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300"+
		"\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318"+
		"\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330"+
		"\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348"+
		"\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360"+
		"\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378"+
		"\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390"+
		"\u0392\u0394\u0396\u0398\u039a\2\u008e\4\2\u02ad\u02ad\u02b8\u02b8\4\2"+
		"\24\24\u0104\u0104\4\2\13\13\u0190\u0190\5\2\u00dd\u00dd\u011a\u011a\u01ac"+
		"\u01ac\4\2LL\u0175\u0175\5\2\62\62\u017e\u017e\u01ff\u01ff\4\2\u0091\u0091"+
		"\u00a1\u00a1\4\2\t\t\'\'\5\2\u0089\u0089\u00fb\u00fb\u0244\u0244\5\2\u014b"+
		"\u014b\u016b\u016b\u0182\u0182\4\2\u00cd\u00cd\u024b\u024b\4\2\62\62\u01ff"+
		"\u01ff\4\2\5\5\u0097\u0097\5\2\5\5\u0097\u0097\u013d\u013d\5\2qq\u0174"+
		"\u0174\u0200\u0200\4\2\u012a\u012a\u0175\u0175\4\2\u0132\u0132\u0208\u0208"+
		"\5\2\u00c3\u00c3\u00fc\u00fc\u017d\u017d\4\2\u00bc\u00bc\u00d6\u00d6\4"+
		"\2\u0082\u0082\u021f\u021f\4\2\u011d\u011d\u0240\u0240\4\2\5\5\u01bc\u01bc"+
		"\4\2\6\6\u0088\u0088\4\2\r\rnn\4\2\u00e4\u00e5\u016a\u016a\4\2\u0085\u0085"+
		"\u00e8\u00e8\4\2\u015b\u015b\u01bb\u01bb\4\2\u015f\u015f\u024b\u024b\4"+
		"\2++\u01f8\u01f8\4\2\u0167\u0167\u016d\u016d\5\2\u00c2\u00c2\u011e\u011e"+
		"\u0154\u0154\4\2\37\37\u0129\u0129\4\2\u0168\u0168\u016f\u016f\4\2\u02a2"+
		"\u02a2\u02c3\u02c3\4\2\u00dc\u00dc\u0153\u0153\4\2;;\u014e\u014e\4\2\u00b2"+
		"\u00b2\u00ea\u00ea\4\2\27\27\u0213\u0213\3\2\u025e\u025f\5\2VV\u00c0\u00c0"+
		"\u00cd\u00cd\4\2RR\u008a\u008a\4\2\u011b\u011b\u012b\u012b\4\2\u00a6\u00a6"+
		"\u0236\u0236\4\2\u0089\u0089\u019e\u019e\4\2\22\22\u01a9\u01a9\4\2\u00e1"+
		"\u00e1\u0125\u0125\4\2\u023f\u023f\u02a0\u02a0\5\2\u0082\u0082\u010a\u010a"+
		"\u01b1\u01b1\5\2\u0082\u0082\u010a\u010a\u0157\u0157\4\2oo\u0087\u0087"+
		"\6\2\u00f4\u00f4\u00fa\u00fa\u0150\u0150\u017b\u017b\4\2\u0082\u0082\u02af"+
		"\u02af\3\3\u02b8\u02b8\3\2\u02b8\u02b8\3\2\u01c8\u01c9\4\2\u016e\u016e"+
		"\u0261\u0261\3\2]^\4\2\u0160\u0160\u0256\u0256\4\2%%\u00e8\u00e8\4\2\65"+
		"\65\u008b\u008b\5\2\r\r\u0093\u0093\u023e\u023e\4\2ll\u0143\u0143\5\2"+
		"\u00d3\u00d3\u0110\u0110\u01ce\u01ce\4\2\u01de\u01de\u0225\u0225\5\2\u01de"+
		"\u01de\u01fa\u01fa\u0225\u0225\4\2\u00b1\u00b1\u00e9\u00e9\4\2mm\u01d2"+
		"\u01d2\4\2\u00e7\u00e7\u010a\u010a\4\2\r\r\u0243\u0243\4\2!!\u01e6\u01e6"+
		"\4\2\25\25\u008c\u008c\4\2\u00c4\u00c4\u010d\u010d\4\2\r\r\u00c4\u00c4"+
		"\4\2\u021d\u021d\u0222\u0222\4\2\u0132\u0132\u020d\u020d\3\2\u0114\u0117"+
		"\3\2\u02b5\u02b6\4\2\u02a9\u02a9\u02ad\u02ad\3\2\u02aa\u02ab\4\2\u0081"+
		"\u0081\u00eb\u00eb\6\2\r\r\21\21\u00b6\u00b6\u01fb\u01fb\5\2\64\64\u010f"+
		"\u010f\u022e\u022e\4\2\r\r\u0093\u0093\4\2@@\u0264\u0264\4\2\u0093\u0093"+
		"\u023e\u023e\3\2\u018a\u018d\4\2==TT\4\2\u00c5\u00c5\u010e\u010e\4\2E"+
		"E\u0146\u0146\4\2\u0265\u0265\u0268\u0268\4\2\u00a8\u00a8\u0152\u0152"+
		"\4\2\u00ac\u00ac\u0141\u0141\4\2bb\u0095\u0095\4\2\u00df\u00df\u01f0\u01f0"+
		"\7\2\u0282\u0284\u0286\u028b\u028d\u028e\u0290\u0290\u0294\u0297\3\2\u027b"+
		"\u0281\3\2\u0275\u027a\4\2\u01ac\u01ac\u01d5\u01d5\4\2\u00ca\u00ca\u019b"+
		"\u019b\4\2\u015c\u015c\u01dc\u01dc\3\2\u00a9\u00aa\4\2\u0178\u0178\u0201"+
		"\u0201\5\2\u00be\u00be\u0211\u0211\u0257\u0257\4\2RR\u01d1\u01d1\5\2R"+
		"R\u0157\u0157\u01d1\u01d1\4\2\u0183\u0183\u020e\u020e\4\2\u01c0\u01c0"+
		"\u01fd\u01fd\4\2\u00e7\u00e7\u01c1\u01c1\3\2\u018e\u018f\4\2ww\u0271\u0271"+
		"\4\2\u013e\u013e\u01e0\u01e0\4\2::DD\5\2\16\16jj\u0097\u0097\4\2\16\16"+
		"\u0097\u0097\4\2jj\u0097\u0097\4\2\16\16jj\5\2\16\16\u0097\u0097\u00b4"+
		"\u00b4\4\2\21\21\u00bb\u00bb\4\2HH\u01a6\u01a6\6\2\16\16QQ\u0097\u0097"+
		"\u01e3\u01e3\6\2\16\16\u0097\u0097\u01e3\u01e3\u0244\u0244\5\2\u0089\u0089"+
		"\u0097\u0097\u00fb\u00fb\b\2\16\16\u0089\u0089\u0097\u0097\u00fb\u00fb"+
		"\u01e3\u01e3\u0244\u0244\4\2\u0097\u0097\u0244\u0244\5\2\16\16\u0097\u0097"+
		"\u00d8\u00d8\5\2\16\16\u0097\u0097\u01e3\u01e3\5\2\16\16jj\u01c2\u01c2"+
		"\5\2\16\16\u0097\u0097\u0249\u0249\f\2\16\16##QQ\u0089\u0089\u0097\u0097"+
		"\u00fb\u00fb\u011d\u011d\u01ae\u01ae\u01e3\u01e3\u0244\u0244\7\2\16\16"+
		"jj\u0097\u0097\u0127\u0127\u023f\u023f\6\2\16\16\u0097\u0097\u00b4\u00b4"+
		"\u023a\u023a\5\2\u0097\u0097\u0133\u0133\u023a\u023a\4\2\17\17\32\32\4"+
		"\2\u008e\u008e\u022f\u022f\b\2ww\u00e2\u00e2\u0138\u0138\u013e\u013e\u01e0"+
		"\u01e0\u0271\u0271\3\2\u02a0\u02a1\4\2\u029b\u029b\u02a2\u02a2\u008e\2"+
		"\5\5\t\f\17\17\23\23\26\26\30\32\35\35\37\37!\"%%\'\'**,\60\62\6488::"+
		"<>@@CEGLNNPW\\_bilmotwwy~\u0080\u0081\u0083\u0083\u0085\u0085\u0087\u0087"+
		"\u0089\u0089\u008d\u008d\u008f\u008f\u0091\u0092\u0095\u0096\u0098\u0099"+
		"\u009d\u009d\u00a0\u00a2\u00a8\u00ac\u00ae\u00b1\u00b4\u00b4\u00b7\u00b7"+
		"\u00b9\u00b9\u00bb\u00bb\u00bd\u00be\u00c3\u00c5\u00c8\u00c8\u00ca\u00cd"+
		"\u00d3\u00d4\u00da\u00da\u00dd\u00dd\u00df\u00df\u00e2\u00e2\u00e5\u00e5"+
		"\u00e7\u00ed\u00f0\u00f2\u00f8\u00fa\u00fc\u00fe\u0100\u0101\u0103\u0103"+
		"\u0105\u0107\u0109\u0110\u0112\u0116\u0118\u0119\u011b\u011c\u011f\u011f"+
		"\u0121\u0124\u0126\u0126\u012a\u012a\u012c\u012c\u012f\u012f\u0131\u0133"+
		"\u0135\u0135\u0138\u013b\u013d\u013e\u0140\u0149\u014b\u014d\u0150\u0152"+
		"\u0157\u0158\u015c\u015c\u0162\u0166\u0168\u0168\u016a\u016b\u016e\u016e"+
		"\u0170\u0171\u0174\u0174\u0176\u0176\u0178\u0179\u017b\u017f\u0181\u0184"+
		"\u0186\u0186\u0190\u0190\u0193\u0194\u0196\u0199\u019b\u019d\u01a6\u01a6"+
		"\u01ab\u01b0\u01b4\u01b4\u01b6\u01b7\u01b9\u01ba\u01bd\u01be\u01c1\u01c1"+
		"\u01c3\u01c5\u01c8\u01cb\u01ce\u01ce\u01d1\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e4\u01e6\u01e9\u01eb\u01ee\u01f0\u01f5\u01f7\u01f7"+
		"\u01f9\u01fb\u01ff\u0203\u0205\u0209\u020b\u0212\u0216\u0216\u021f\u021f"+
		"\u0224\u022c\u022e\u0230\u0232\u0233\u0235\u0235\u0238\u023a\u023f\u023f"+
		"\u0242\u0243\u0245\u0249\u024b\u024b\u024d\u0254\u0256\u0259\u025c\u025d"+
		"\u0260\u0284\u0286\u028b\u028d\u028e\u0290\u0291\u0293\u0297\u02c3\u02c3"+
		"\5\2GG\u0285\u0285\u0291\u0293\7\2ii\u0282\u0282\u028c\u028c\u028f\u028f"+
		"\u0294\u0294\2\u1fc6\2\u039c\3\2\2\2\4\u03a7\3\2\2\2\6\u03b1\3\2\2\2\b"+
		"\u03bc\3\2\2\2\n\u03e7\3\2\2\2\f\u03e9\3\2\2\2\16\u03ee\3\2\2\2\20\u0401"+
		"\3\2\2\2\22\u0435\3\2\2\2\24\u0439\3\2\2\2\26\u0447\3\2\2\2\30\u044b\3"+
		"\2\2\2\32\u0457\3\2\2\2\34\u045c\3\2\2\2\36\u0469\3\2\2\2 \u047f\3\2\2"+
		"\2\"\u049b\3\2\2\2$\u04c1\3\2\2\2&\u04c3\3\2\2\2(\u04d4\3\2\2\2*\u04f6"+
		"\3\2\2\2,\u04f8\3\2\2\2.\u04fd\3\2\2\2\60\u0510\3\2\2\2\62\u053f\3\2\2"+
		"\2\64\u055c\3\2\2\2\66\u0581\3\2\2\28\u0586\3\2\2\2:\u059f\3\2\2\2<\u05b7"+
		"\3\2\2\2>\u05c0\3\2\2\2@\u05c9\3\2\2\2B\u05d2\3\2\2\2D\u05d6\3\2\2\2F"+
		"\u05db\3\2\2\2H\u05f3\3\2\2\2J\u05f5\3\2\2\2L\u05f9\3\2\2\2N\u062a\3\2"+
		"\2\2P\u0646\3\2\2\2R\u0648\3\2\2\2T\u0656\3\2\2\2V\u065b\3\2\2\2X\u0660"+
		"\3\2\2\2Z\u0666\3\2\2\2\\\u0669\3\2\2\2^\u0674\3\2\2\2`\u0683\3\2\2\2"+
		"b\u0694\3\2\2\2d\u06a5\3\2\2\2f\u06ad\3\2\2\2h\u06b2\3\2\2\2j\u06c2\3"+
		"\2\2\2l\u06c6\3\2\2\2n\u06de\3\2\2\2p\u06e1\3\2\2\2r\u06e7\3\2\2\2t\u06f3"+
		"\3\2\2\2v\u06fc\3\2\2\2x\u0718\3\2\2\2z\u071e\3\2\2\2|\u0721\3\2\2\2~"+
		"\u0728\3\2\2\2\u0080\u0730\3\2\2\2\u0082\u073c\3\2\2\2\u0084\u073e\3\2"+
		"\2\2\u0086\u0742\3\2\2\2\u0088\u0748\3\2\2\2\u008a\u0761\3\2\2\2\u008c"+
		"\u0780\3\2\2\2\u008e\u07ad\3\2\2\2\u0090\u07b7\3\2\2\2\u0092\u07b9\3\2"+
		"\2\2\u0094\u07be\3\2\2\2\u0096\u07cc\3\2\2\2\u0098\u07ce\3\2\2\2\u009a"+
		"\u07d3\3\2\2\2\u009c\u07e3\3\2\2\2\u009e\u0804\3\2\2\2\u00a0\u0827\3\2"+
		"\2\2\u00a2\u082b\3\2\2\2\u00a4\u083a\3\2\2\2\u00a6\u083c\3\2\2\2\u00a8"+
		"\u083f\3\2\2\2\u00aa\u0844\3\2\2\2\u00ac\u084e\3\2\2\2\u00ae\u086a\3\2"+
		"\2\2\u00b0\u086c\3\2\2\2\u00b2\u0870\3\2\2\2\u00b4\u0883\3\2\2\2\u00b6"+
		"\u088b\3\2\2\2\u00b8\u08bc\3\2\2\2\u00ba\u08be\3\2\2\2\u00bc\u08c3\3\2"+
		"\2\2\u00be\u08c7\3\2\2\2\u00c0\u08cd\3\2\2\2\u00c2\u08d1\3\2\2\2\u00c4"+
		"\u08d9\3\2\2\2\u00c6\u08f3\3\2\2\2\u00c8\u08f5\3\2\2\2\u00ca\u08fb\3\2"+
		"\2\2\u00cc\u08fe\3\2\2\2\u00ce\u0901\3\2\2\2\u00d0\u0904\3\2\2\2\u00d2"+
		"\u093a\3\2\2\2\u00d4\u093c\3\2\2\2\u00d6\u0947\3\2\2\2\u00d8\u094f\3\2"+
		"\2\2\u00da\u095a\3\2\2\2\u00dc\u095c\3\2\2\2\u00de\u0961\3\2\2\2\u00e0"+
		"\u0993\3\2\2\2\u00e2\u0997\3\2\2\2\u00e4\u09b1\3\2\2\2\u00e6\u09b3\3\2"+
		"\2\2\u00e8\u09c7\3\2\2\2\u00ea\u09f3\3\2\2\2\u00ec\u0a0d\3\2\2\2\u00ee"+
		"\u0a1d\3\2\2\2\u00f0\u0a21\3\2\2\2\u00f2\u0a2c\3\2\2\2\u00f4\u0a45\3\2"+
		"\2\2\u00f6\u0a48\3\2\2\2\u00f8\u0a4a\3\2\2\2\u00fa\u0a55\3\2\2\2\u00fc"+
		"\u0a5a\3\2\2\2\u00fe\u0a5d\3\2\2\2\u0100\u0a69\3\2\2\2\u0102\u0a6d\3\2"+
		"\2\2\u0104\u0a79\3\2\2\2\u0106\u0a7c\3\2\2\2\u0108\u0a82\3\2\2\2\u010a"+
		"\u0a89\3\2\2\2\u010c\u0a95\3\2\2\2\u010e\u0aae\3\2\2\2\u0110\u0aba\3\2"+
		"\2\2\u0112\u0abf\3\2\2\2\u0114\u0ac5\3\2\2\2\u0116\u0ac7\3\2\2\2\u0118"+
		"\u0b05\3\2\2\2\u011a\u0b09\3\2\2\2\u011c\u0b0e\3\2\2\2\u011e\u0b76\3\2"+
		"\2\2\u0120\u0b78\3\2\2\2\u0122\u0bb7\3\2\2\2\u0124\u0c04\3\2\2\2\u0126"+
		"\u0c29\3\2\2\2\u0128\u0c3a\3\2\2\2\u012a\u0c43\3\2\2\2\u012c\u0c47\3\2"+
		"\2\2\u012e\u0c66\3\2\2\2\u0130\u0c6e\3\2\2\2\u0132\u0c73\3\2\2\2\u0134"+
		"\u0c7a\3\2\2\2\u0136\u0c85\3\2\2\2\u0138\u0c87\3\2\2\2\u013a\u0c8c\3\2"+
		"\2\2\u013c\u0cbf\3\2\2\2\u013e\u0cc1\3\2\2\2\u0140\u0cc8\3\2\2\2\u0142"+
		"\u0cd1\3\2\2\2\u0144\u0cdc\3\2\2\2\u0146\u0ce3\3\2\2\2\u0148\u0ce7\3\2"+
		"\2\2\u014a\u0ceb\3\2\2\2\u014c\u0cef\3\2\2\2\u014e\u0cf6\3\2\2\2\u0150"+
		"\u0cfa\3\2\2\2\u0152\u0d01\3\2\2\2\u0154\u0d04\3\2\2\2\u0156\u0d0a\3\2"+
		"\2\2\u0158\u0d19\3\2\2\2\u015a\u0d1c\3\2\2\2\u015c\u0d20\3\2\2\2\u015e"+
		"\u0d25\3\2\2\2\u0160\u0d29\3\2\2\2\u0162\u0d3a\3\2\2\2\u0164\u0d40\3\2"+
		"\2\2\u0166\u0d4a\3\2\2\2\u0168\u0d57\3\2\2\2\u016a\u0d5b\3\2\2\2\u016c"+
		"\u0d69\3\2\2\2\u016e\u0d6b\3\2\2\2\u0170\u0d79\3\2\2\2\u0172\u0d8a\3\2"+
		"\2\2\u0174\u0da3\3\2\2\2\u0176\u0dad\3\2\2\2\u0178\u0db1\3\2\2\2\u017a"+
		"\u0dd4\3\2\2\2\u017c\u0de0\3\2\2\2\u017e\u0deb\3\2\2\2\u0180\u0df1\3\2"+
		"\2\2\u0182\u0dfc\3\2\2\2\u0184\u0e08\3\2\2\2\u0186\u0e10\3\2\2\2\u0188"+
		"\u0e1f\3\2\2\2\u018a\u0e23\3\2\2\2\u018c\u0e3d\3\2\2\2\u018e\u0e40\3\2"+
		"\2\2\u0190\u0e46\3\2\2\2\u0192\u0e4b\3\2\2\2\u0194\u0e53\3\2\2\2\u0196"+
		"\u0e5b\3\2\2\2\u0198\u0e5e\3\2\2\2\u019a\u0e6e\3\2\2\2\u019c\u0e73\3\2"+
		"\2\2\u019e\u0e77\3\2\2\2\u01a0\u0e9f\3\2\2\2\u01a2\u0ea1\3\2\2\2\u01a4"+
		"\u0eb7\3\2\2\2\u01a6\u0eb9\3\2\2\2\u01a8\u0ebe\3\2\2\2\u01aa\u0ec0\3\2"+
		"\2\2\u01ac\u0ec2\3\2\2\2\u01ae\u0ec4\3\2\2\2\u01b0\u0ec8\3\2\2\2\u01b2"+
		"\u0ecd\3\2\2\2\u01b4\u0ed3\3\2\2\2\u01b6\u0ed9\3\2\2\2\u01b8\u0ee7\3\2"+
		"\2\2\u01ba\u0efb\3\2\2\2\u01bc\u0f00\3\2\2\2\u01be\u0f0d\3\2\2\2\u01c0"+
		"\u0f0f\3\2\2\2\u01c2\u0f1d\3\2\2\2\u01c4\u0f27\3\2\2\2\u01c6\u0f2d\3\2"+
		"\2\2\u01c8\u0f2f\3\2\2\2\u01ca\u0f32\3\2\2\2\u01cc\u0f3b\3\2\2\2\u01ce"+
		"\u0f53\3\2\2\2\u01d0\u0f62\3\2\2\2\u01d2\u0f64\3\2\2\2\u01d4\u0f79\3\2"+
		"\2\2\u01d6\u0f88\3\2\2\2\u01d8\u0f9e\3\2\2\2\u01da\u0fa5\3\2\2\2\u01dc"+
		"\u0fb2\3\2\2\2\u01de\u0fb5\3\2\2\2\u01e0\u0fca\3\2\2\2\u01e2\u0fd4\3\2"+
		"\2\2\u01e4\u0fdd\3\2\2\2\u01e6\u0fee\3\2\2\2\u01e8\u1019\3\2\2\2\u01ea"+
		"\u1022\3\2\2\2\u01ec\u102e\3\2\2\2\u01ee\u1036\3\2\2\2\u01f0\u103a\3\2"+
		"\2\2\u01f2\u1059\3\2\2\2\u01f4\u105d\3\2\2\2\u01f6\u106a\3\2\2\2\u01f8"+
		"\u1070\3\2\2\2\u01fa\u1074\3\2\2\2\u01fc\u107f\3\2\2\2\u01fe\u10a0\3\2"+
		"\2\2\u0200\u10a3\3\2\2\2\u0202\u10b8\3\2\2\2\u0204\u10bb\3\2\2\2\u0206"+
		"\u10be\3\2\2\2\u0208\u10c2\3\2\2\2\u020a\u10d5\3\2\2\2\u020c\u10d7\3\2"+
		"\2\2\u020e\u10e8\3\2\2\2\u0210\u10ef\3\2\2\2\u0212\u10f4\3\2\2\2\u0214"+
		"\u110b\3\2\2\2\u0216\u1115\3\2\2\2\u0218\u1117\3\2\2\2\u021a\u1125\3\2"+
		"\2\2\u021c\u1133\3\2\2\2\u021e\u1157\3\2\2\2\u0220\u1159\3\2\2\2\u0222"+
		"\u1177\3\2\2\2\u0224\u117c\3\2\2\2\u0226\u117e\3\2\2\2\u0228\u118a\3\2"+
		"\2\2\u022a\u119e\3\2\2\2\u022c\u11a0\3\2\2\2\u022e\u11a3\3\2\2\2\u0230"+
		"\u11bd\3\2\2\2\u0232\u11bf\3\2\2\2\u0234\u11c3\3\2\2\2\u0236\u11d2\3\2"+
		"\2\2\u0238\u11de\3\2\2\2\u023a\u11e6\3\2\2\2\u023c\u11ea\3\2\2\2\u023e"+
		"\u11f7\3\2\2\2\u0240\u11fd\3\2\2\2\u0242\u120b\3\2\2\2\u0244\u121f\3\2"+
		"\2\2\u0246\u1228\3\2\2\2\u0248\u122a\3\2\2\2\u024a\u1231\3\2\2\2\u024c"+
		"\u1236\3\2\2\2\u024e\u1243\3\2\2\2\u0250\u124b\3\2\2\2\u0252\u1253\3\2"+
		"\2\2\u0254\u125b\3\2\2\2\u0256\u125d\3\2\2\2\u0258\u1269\3\2\2\2\u025a"+
		"\u1283\3\2\2\2\u025c\u1285\3\2\2\2\u025e\u1293\3\2\2\2\u0260\u1298\3\2"+
		"\2\2\u0262\u12aa\3\2\2\2\u0264\u12ae\3\2\2\2\u0266\u12b6\3\2\2\2\u0268"+
		"\u12c0\3\2\2\2\u026a\u12c8\3\2\2\2\u026c\u12ce\3\2\2\2\u026e\u12d3\3\2"+
		"\2\2\u0270\u12da\3\2\2\2\u0272\u12f3\3\2\2\2\u0274\u1306\3\2\2\2\u0276"+
		"\u130a\3\2\2\2\u0278\u130d\3\2\2\2\u027a\u1323\3\2\2\2\u027c\u1328\3\2"+
		"\2\2\u027e\u133b\3\2\2\2\u0280\u133d\3\2\2\2\u0282\u134d\3\2\2\2\u0284"+
		"\u1355\3\2\2\2\u0286\u135a\3\2\2\2\u0288\u135e\3\2\2\2\u028a\u1369\3\2"+
		"\2\2\u028c\u136c\3\2\2\2\u028e\u137e\3\2\2\2\u0290\u1380\3\2\2\2\u0292"+
		"\u138f\3\2\2\2\u0294\u139a\3\2\2\2\u0296\u13a8\3\2\2\2\u0298\u13ad\3\2"+
		"\2\2\u029a\u13af\3\2\2\2\u029c\u13b9\3\2\2\2\u029e\u13bb\3\2\2\2\u02a0"+
		"\u13e8\3\2\2\2\u02a2\u13f5\3\2\2\2\u02a4\u13fd\3\2\2\2\u02a6\u1409\3\2"+
		"\2\2\u02a8\u1429\3\2\2\2\u02aa\u143d\3\2\2\2\u02ac\u143f\3\2\2\2\u02ae"+
		"\u1443\3\2\2\2\u02b0\u1476\3\2\2\2\u02b2\u1478\3\2\2\2\u02b4\u1496\3\2"+
		"\2\2\u02b6\u1498\3\2\2\2\u02b8\u14ad\3\2\2\2\u02ba\u14cb\3\2\2\2\u02bc"+
		"\u14cf\3\2\2\2\u02be\u14d2\3\2\2\2\u02c0\u14e5\3\2\2\2\u02c2\u14ed\3\2"+
		"\2\2\u02c4\u14ff\3\2\2\2\u02c6\u1506\3\2\2\2\u02c8\u151e\3\2\2\2\u02ca"+
		"\u1520\3\2\2\2\u02cc\u1571\3\2\2\2\u02ce\u1576\3\2\2\2\u02d0\u1578\3\2"+
		"\2\2\u02d2\u15b7\3\2\2\2\u02d4\u16f4\3\2\2\2\u02d6\u16f6\3\2\2\2\u02d8"+
		"\u16f8\3\2\2\2\u02da\u16fa\3\2\2\2\u02dc\u16fc\3\2\2\2\u02de\u1709\3\2"+
		"\2\2\u02e0\u1712\3\2\2\2\u02e2\u171b\3\2\2\2\u02e4\u171d\3\2\2\2\u02e6"+
		"\u172e\3\2\2\2\u02e8\u1734\3\2\2\2\u02ea\u173f\3\2\2\2\u02ec\u1741\3\2"+
		"\2\2\u02ee\u1759\3\2\2\2\u02f0\u1767\3\2\2\2\u02f2\u1779\3\2\2\2\u02f4"+
		"\u178e\3\2\2\2\u02f6\u179b\3\2\2\2\u02f8\u179e\3\2\2\2\u02fa\u17a7\3\2"+
		"\2\2\u02fc\u17ad\3\2\2\2\u02fe\u17b5\3\2\2\2\u0300\u17b8\3\2\2\2\u0302"+
		"\u17c3\3\2\2\2\u0304\u17cd\3\2\2\2\u0306\u17cf\3\2\2\2\u0308\u17d8\3\2"+
		"\2\2\u030a\u17e1\3\2\2\2\u030c\u17f3\3\2\2\2\u030e\u17f7\3\2\2\2\u0310"+
		"\u17f9\3\2\2\2\u0312\u1802\3\2\2\2\u0314\u180f\3\2\2\2\u0316\u1811\3\2"+
		"\2\2\u0318\u1813\3\2\2\2\u031a\u1815\3\2\2\2\u031c\u1817\3\2\2\2\u031e"+
		"\u1819\3\2\2\2\u0320\u181b\3\2\2\2\u0322\u181d\3\2\2\2\u0324\u1829\3\2"+
		"\2\2\u0326\u182b\3\2\2\2\u0328\u1830\3\2\2\2\u032a\u1832\3\2\2\2\u032c"+
		"\u1834\3\2\2\2\u032e\u1836\3\2\2\2\u0330\u183b\3\2\2\2\u0332\u1843\3\2"+
		"\2\2\u0334\u1845\3\2\2\2\u0336\u184b\3\2\2\2\u0338\u184d\3\2\2\2\u033a"+
		"\u1859\3\2\2\2\u033c\u185b\3\2\2\2\u033e\u1863\3\2\2\2\u0340\u186b\3\2"+
		"\2\2\u0342\u1873\3\2\2\2\u0344\u1878\3\2\2\2\u0346\u187d\3\2\2\2\u0348"+
		"\u188c\3\2\2\2\u034a\u188e\3\2\2\2\u034c\u1895\3\2\2\2\u034e\u1899\3\2"+
		"\2\2\u0350\u189b\3\2\2\2\u0352\u18a0\3\2\2\2\u0354\u18a2\3\2\2\2\u0356"+
		"\u18aa\3\2\2\2\u0358\u18b4\3\2\2\2\u035a\u18bc\3\2\2\2\u035c\u18be\3\2"+
		"\2\2\u035e\u18c0\3\2\2\2\u0360\u18c2\3\2\2\2\u0362\u18dc\3\2\2\2\u0364"+
		"\u18e2\3\2\2\2\u0366\u18e6\3\2\2\2\u0368\u18ea\3\2\2\2\u036a\u18f3\3\2"+
		"\2\2\u036c\u1901\3\2\2\2\u036e\u1912\3\2\2\2\u0370\u1939\3\2\2\2\u0372"+
		"\u1940\3\2\2\2\u0374\u194c\3\2\2\2\u0376\u196d\3\2\2\2\u0378\u196f\3\2"+
		"\2\2\u037a\u19b6\3\2\2\2\u037c\u19bb\3\2\2\2\u037e\u19ce\3\2\2\2\u0380"+
		"\u19d8\3\2\2\2\u0382\u19eb\3\2\2\2\u0384\u1a15\3\2\2\2\u0386\u1b5d\3\2"+
		"\2\2\u0388\u1b9d\3\2\2\2\u038a\u1b9f\3\2\2\2\u038c\u1ba1\3\2\2\2\u038e"+
		"\u1ba4\3\2\2\2\u0390\u1ba8\3\2\2\2\u0392\u1bae\3\2\2\2\u0394\u1bb0\3\2"+
		"\2\2\u0396\u1bb4\3\2\2\2\u0398\u1bb6\3\2\2\2\u039a\u1bb8\3\2\2\2\u039c"+
		"\u03a1\5\4\3\2\u039d\u039f\5\6\4\2\u039e\u03a0\t\2\2\2\u039f\u039e\3\2"+
		"\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1\u039d\3\2\2\2\u03a2"+
		"\u03a3\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5\3\2"+
		"\2\2\u03a5\u03a6\7\2\2\3\u03a6\3\3\2\2\2\u03a7\u03a8\7\u01ec\2\2\u03a8"+
		"\u03a9\7\u0086\2\2\u03a9\u03aa\7\u0168\2\2\u03aa\5\3\2\2\2\u03ab\u03b2"+
		"\5\20\t\2\u03ac\u03b2\5\64\33\2\u03ad\u03b2\5 \21\2\u03ae\u03b2\5\"\22"+
		"\2\u03af\u03b2\5:\36\2\u03b0\u03b2\5\u00e2r\2\u03b1\u03ab\3\2\2\2\u03b1"+
		"\u03ac\3\2\2\2\u03b1\u03ad\3\2\2\2\u03b1\u03ae\3\2\2\2\u03b1\u03af\3\2"+
		"\2\2\u03b1\u03b0\3\2\2\2\u03b2\7\3\2\2\2\u03b3\u03b6\5\n\6\2\u03b4\u03b6"+
		"\5\u0304\u0183\2\u03b5\u03b3\3\2\2\2\u03b5\u03b4\3\2\2\2\u03b6\u03b8\3"+
		"\2\2\2\u03b7\u03b9\7\u02b8\2\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2"+
		"\u03b9\u03bb\3\2\2\2\u03ba\u03b5\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba"+
		"\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03bf\3\2\2\2\u03be\u03bc\3\2\2\2\u03bf"+
		"\u03c0\7\2\2\3\u03c0\t\3\2\2\2\u03c1\u03e8\5\u01d0\u00e9\2\u03c2\u03e8"+
		"\5\16\b\2\u03c3\u03e8\5\36\20\2\u03c4\u03e8\5.\30\2\u03c5\u03e8\5\u00aa"+
		"V\2\u03c6\u03e8\58\35\2\u03c7\u03e8\5^\60\2\u03c8\u03e8\5\u0140\u00a1"+
		"\2\u03c9\u03e8\5\u00b4[\2\u03ca\u03e8\5\u00b8]\2\u03cb\u03e8\5\20\t\2"+
		"\u03cc\u03e8\5\64\33\2\u03cd\u03e8\5 \21\2\u03ce\u03e8\5\"\22\2\u03cf"+
		"\u03e8\5\u00b2Z\2\u03d0\u03e8\5\u0120\u0091\2\u03d1\u03e8\5\u00f0y\2\u03d2"+
		"\u03e8\5\u00e2r\2\u03d3\u03e8\5\u011c\u008f\2\u03d4\u03e8\5\u0116\u008c"+
		"\2\u03d5\u03e8\5\u00b6\\\2\u03d6\u03e8\5\u00acW\2\u03d7\u03e8\5:\36\2"+
		"\u03d8\u03e8\5r:\2\u03d9\u03e8\5\u013c\u009f\2\u03da\u03e8\5\f\7\2\u03db"+
		"\u03e8\5\34\17\2\u03dc\u03e8\5,\27\2\u03dd\u03e8\5\u00a8U\2\u03de\u03e8"+
		"\5\66\34\2\u03df\u03e8\5\\/\2\u03e0\u03e8\5\u01c4\u00e3\2\u03e1\u03e8"+
		"\5\u0138\u009d\2\u03e2\u03e8\5\u00dco\2\u03e3\u03e8\5\u013a\u009e\2\u03e4"+
		"\u03e8\5\u013e\u00a0\2\u03e5\u03e8\5\u0156\u00ac\2\u03e6\u03e8\5\u00de"+
		"p\2\u03e7\u03c1\3\2\2\2\u03e7\u03c2\3\2\2\2\u03e7\u03c3\3\2\2\2\u03e7"+
		"\u03c4\3\2\2\2\u03e7\u03c5\3\2\2\2\u03e7\u03c6\3\2\2\2\u03e7\u03c7\3\2"+
		"\2\2\u03e7\u03c8\3\2\2\2\u03e7\u03c9\3\2\2\2\u03e7\u03ca\3\2\2\2\u03e7"+
		"\u03cb\3\2\2\2\u03e7\u03cc\3\2\2\2\u03e7\u03cd\3\2\2\2\u03e7\u03ce\3\2"+
		"\2\2\u03e7\u03cf\3\2\2\2\u03e7\u03d0\3\2\2\2\u03e7\u03d1\3\2\2\2\u03e7"+
		"\u03d2\3\2\2\2\u03e7\u03d3\3\2\2\2\u03e7\u03d4\3\2\2\2\u03e7\u03d5\3\2"+
		"\2\2\u03e7\u03d6\3\2\2\2\u03e7\u03d7\3\2\2\2\u03e7\u03d8\3\2\2\2\u03e7"+
		"\u03d9\3\2\2\2\u03e7\u03da\3\2\2\2\u03e7\u03db\3\2\2\2\u03e7\u03dc\3\2"+
		"\2\2\u03e7\u03dd\3\2\2\2\u03e7\u03de\3\2\2\2\u03e7\u03df\3\2\2\2\u03e7"+
		"\u03e0\3\2\2\2\u03e7\u03e1\3\2\2\2\u03e7\u03e2\3\2\2\2\u03e7\u03e3\3\2"+
		"\2\2\u03e7\u03e4\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7\u03e6\3\2\2\2\u03e8"+
		"\13\3\2\2\2\u03e9\u03ea\7\u0097\2\2\u03ea\u03eb\7\u00d4\2\2\u03eb\u03ec"+
		"\5\u0342\u01a2\2\u03ec\u03ed\7\u02b8\2\2\u03ed\r\3\2\2\2\u03ee\u03ef\7"+
		"\16\2\2\u03ef\u03f0\7\u00d4\2\2\u03f0\u03f1\5\u0342\u01a2\2\u03f1\u03f3"+
		"\7U\2\2\u03f2\u03f4\7|\2\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4"+
		"\u03f8\3\2\2\2\u03f5\u03f7\5\u015a\u00ae\2\u03f6\u03f5\3\2\2\2\u03f7\u03fa"+
		"\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fd\3\2\2\2\u03fa"+
		"\u03f8\3\2\2\2\u03fb\u03fc\7\u01ca\2\2\u03fc\u03fe\7\u01ee\2\2\u03fd\u03fb"+
		"\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\7\u02b8\2"+
		"\2\u0400\17\3\2\2\2\u0401\u0404\7j\2\2\u0402\u0403\7\u0177\2\2\u0403\u0405"+
		"\7\u01be\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2"+
		"\2\u0406\u0407\7\u00d4\2\2\u0407\u0413\5\u0342\u01a2\2\u0408\u040d\7\u02a6"+
		"\2\2\u0409\u040b\7\u02ac\2\2\u040a\u0409\3\2\2\2\u040a\u040b\3\2\2\2\u040b"+
		"\u040c\3\2\2\2\u040c\u040e\5\u0166\u00b4\2\u040d\u040a\3\2\2\2\u040e\u040f"+
		"\3\2\2\2\u040f\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\3\2\2\2\u0411"+
		"\u0412\7\u02a7\2\2\u0412\u0414\3\2\2\2\u0413\u0408\3\2\2\2\u0413\u0414"+
		"\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416\7\u01c9\2\2\u0416\u041d\5\u0374"+
		"\u01bb\2\u0417\u041c\5\u0158\u00ad\2\u0418\u041c\5\22\n\2\u0419\u041c"+
		"\5\26\f\2\u041a\u041c\7\u008d\2\2\u041b\u0417\3\2\2\2\u041b\u0418\3\2"+
		"\2\2\u041b\u0419\3\2\2\2\u041b\u041a\3\2\2\2\u041c\u041f\3\2\2\2\u041d"+
		"\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u0431\3\2\2\2\u041f\u041d\3\2"+
		"\2\2\u0420\u0422\7\u0190\2\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2\u0422"+
		"\u0423\3\2\2\2\u0423\u042c\t\3\2\2\u0424\u0426\7\177\2\2\u0425\u0424\3"+
		"\2\2\2\u0425\u0426\3\2\2\2\u0426\u0428\3\2\2\2\u0427\u0429\5\u016a\u00b6"+
		"\2\u0428\u0427\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042d"+
		"\5\u01b6\u00dc\2\u042b\u042d\5\u015c\u00af\2\u042c\u0425\3\2\2\2\u042c"+
		"\u042b\3\2\2\2\u042d\u0432\3\2\2\2\u042e\u042f\t\4\2\2\u042f\u0430\7\u024a"+
		"\2\2\u0430\u0432\5\u0326\u0194\2\u0431\u0421\3\2\2\2\u0431\u042e\3\2\2"+
		"\2\u0432\u0433\3\2\2\2\u0433\u0434\7\u02b8\2\2\u0434\21\3\2\2\2\u0435"+
		"\u0437\7\u017f\2\2\u0436\u0438\5\24\13\2\u0437\u0436\3\2\2\2\u0437\u0438"+
		"\3\2\2\2\u0438\23\3\2\2\2\u0439\u043a\7\u02a6\2\2\u043a\u043b\7\u0183"+
		"\2\2\u043b\u043c\5\u029c\u014f\2\u043c\u0440\79\2\2\u043d\u0441\7\21\2"+
		"\2\u043e\u043f\t\5\2\2\u043f\u0441\5\u0366\u01b4\2\u0440\u043d\3\2\2\2"+
		"\u0440\u043e\3\2\2\2\u0441\u0443\3\2\2\2\u0442\u0444\5\32\16\2\u0443\u0442"+
		"\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0446\7\u02a7\2"+
		"\2\u0446\25\3\2\2\2\u0447\u0449\7\u01c4\2\2\u0448\u044a\5\30\r\2\u0449"+
		"\u0448\3\2\2\2\u0449\u044a\3\2\2\2\u044a\27\3\2\2\2\u044b\u044c\7\u01ba"+
		"\2\2\u044c\u044d\7\u02a6\2\2\u044d\u0452\5\u0356\u01ac\2\u044e\u044f\7"+
		"\u02ac\2\2\u044f\u0451\5\u0356\u01ac\2\u0450\u044e\3\2\2\2\u0451\u0454"+
		"\3\2\2\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0455\3\2\2\2\u0454"+
		"\u0452\3\2\2\2\u0455\u0456\7\u02a7\2\2\u0456\31\3\2\2\2\u0457\u0458\t"+
		"\6\2\2\u0458\u0459\5\u029c\u014f\2\u0459\u045a\79\2\2\u045a\u045b\5\u0366"+
		"\u01b4\2\u045b\33\3\2\2\2\u045c\u045d\7\u0097\2\2\u045d\u045f\7\u017e"+
		"\2\2\u045e\u0460\7\62\2\2\u045f\u045e\3\2\2\2\u045f\u0460\3\2\2\2\u0460"+
		"\u0464\3\2\2\2\u0461\u0462\5\u035c\u01af\2\u0462\u0463\7\u029f\2\2\u0463"+
		"\u0465\3\2\2\2\u0464\u0461\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0466\3\2"+
		"\2\2\u0466\u0467\5\u0324\u0193\2\u0467\u0468\7\u02b8\2\2\u0468\35\3\2"+
		"\2\2\u0469\u046a\7\16\2\2\u046a\u046b\7\u017e\2\2\u046b\u046c\5\u0324"+
		"\u0193\2\u046c\u046e\7U\2\2\u046d\u046f\7|\2\2\u046e\u046d\3\2\2\2\u046e"+
		"\u046f\3\2\2\2\u046f\u0471\3\2\2\2\u0470\u0472\t\7\2\2\u0471\u0470\3\2"+
		"\2\2\u0471\u0472\3\2\2\2\u0472\u0476\3\2\2\2\u0473\u0475\5\u015a\u00ae"+
		"\2\u0474\u0473\3\2\2\2\u0475\u0478\3\2\2\2\u0476\u0474\3\2\2\2\u0476\u0477"+
		"\3\2\2\2\u0477\u047b\3\2\2\2\u0478\u0476\3\2\2\2\u0479\u047a\7\u01ca\2"+
		"\2\u047a\u047c\7\u01ee\2\2\u047b\u0479\3\2\2\2\u047b\u047c\3\2\2\2\u047c"+
		"\u047d\3\2\2\2\u047d\u047e\7\u02b8\2\2\u047e\37\3\2\2\2\u047f\u0482\7"+
		"j\2\2\u0480\u0481\7\u0177\2\2\u0481\u0483\7\u01be\2\2\u0482\u0480\3\2"+
		"\2\2\u0482\u0483\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0488\7\u017e\2\2\u0485"+
		"\u0486\5\u035c\u01af\2\u0486\u0487\7\u029f\2\2\u0487\u0489\3\2\2\2\u0488"+
		"\u0485\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048c\5\u0324"+
		"\u0193\2\u048b\u048d\5\u0158\u00ad\2\u048c\u048b\3\2\2\2\u048c\u048d\3"+
		"\2\2\2\u048d\u048e\3\2\2\2\u048e\u0492\t\3\2\2\u048f\u0491\5$\23\2\u0490"+
		"\u048f\3\2\2\2\u0491\u0494\3\2\2\2\u0492\u0490\3\2\2\2\u0492\u0493\3\2"+
		"\2\2\u0493\u0495\3\2\2\2\u0494\u0492\3\2\2\2\u0495\u0497\7\u00a5\2\2\u0496"+
		"\u0498\5\u0324\u0193\2\u0497\u0496\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499"+
		"\3\2\2\2\u0499\u049a\7\u02b8\2\2\u049a!\3\2\2\2\u049b\u049e\7j\2\2\u049c"+
		"\u049d\7\u0177\2\2\u049d\u049f\7\u01be\2\2\u049e\u049c\3\2\2\2\u049e\u049f"+
		"\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\7\u017e\2\2\u04a1\u04a5\7\62"+
		"\2\2\u04a2\u04a3\5";
	private static final String _serializedATNSegment1 =
		"\u035c\u01af\2\u04a3\u04a4\7\u029f\2\2\u04a4\u04a6\3\2\2\2\u04a5\u04a2"+
		"\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\5\u0324\u0193"+
		"\2\u04a8\u04ac\t\3\2\2\u04a9\u04ab\5*\26\2\u04aa\u04a9\3\2\2\2\u04ab\u04ae"+
		"\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04b1\3\2\2\2\u04ae"+
		"\u04ac\3\2\2\2\u04af\u04b0\7(\2\2\u04b0\u04b2\5\u0188\u00c5\2\u04b1\u04af"+
		"\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b5\7\u00a5\2"+
		"\2\u04b4\u04b6\5\u0324\u0193\2\u04b5\u04b4\3\2\2\2\u04b5\u04b6\3\2\2\2"+
		"\u04b6\u04b7\3\2\2\2\u04b7\u04b8\7\u02b8\2\2\u04b8#\3\2\2\2\u04b9\u04c2"+
		"\5\u016e\u00b8\2\u04ba\u04c2\5\u0170\u00b9\2\u04bb\u04c2\5\u0172\u00ba"+
		"\2\u04bc\u04c2\5\u0176\u00bc\2\u04bd\u04c2\5\u0178\u00bd\2\u04be\u04c2"+
		"\5\u0180\u00c1\2\u04bf\u04c2\5&\24\2\u04c0\u04c2\5(\25\2\u04c1\u04b9\3"+
		"\2\2\2\u04c1\u04ba\3\2\2\2\u04c1\u04bb\3\2\2\2\u04c1\u04bc\3\2\2\2\u04c1"+
		"\u04bd\3\2\2\2\u04c1\u04be\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c1\u04c0\3\2"+
		"\2\2\u04c2%\3\2\2\2\u04c3\u04c4\7\u01a3\2\2\u04c4\u04d0\5\u0390\u01c9"+
		"\2\u04c5\u04c6\7\u02a6\2\2\u04c6\u04cb\5\u0166\u00b4\2\u04c7\u04c8\7\u02ac"+
		"\2\2\u04c8\u04ca\5\u0166\u00b4\2\u04c9\u04c7\3\2\2\2\u04ca\u04cd\3\2\2"+
		"\2\u04cb\u04c9\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04ce\3\2\2\2\u04cd\u04cb"+
		"\3\2\2\2\u04ce\u04cf\7\u02a7\2\2\u04cf\u04d1\3\2\2\2\u04d0\u04c5\3\2\2"+
		"\2\u04d0\u04d1\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3\7\u02b8\2\2\u04d3"+
		"\'\3\2\2\2\u04d4\u04d5\7\u00d4\2\2\u04d5\u04e1\5\u0390\u01c9\2\u04d6\u04d7"+
		"\7\u02a6\2\2\u04d7\u04dc\5\u0166\u00b4\2\u04d8\u04d9\7\u02ac\2\2\u04d9"+
		"\u04db\5\u0166\u00b4\2\u04da\u04d8\3\2\2\2\u04db\u04de\3\2\2\2\u04dc\u04da"+
		"\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04df\3\2\2\2\u04de\u04dc\3\2\2\2\u04df"+
		"\u04e0\7\u02a7\2\2\u04e0\u04e2\3\2\2\2\u04e1\u04d6\3\2\2\2\u04e1\u04e2"+
		"\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e4\7\u01c9\2\2\u04e4\u04e6\5\u0374"+
		"\u01bb\2\u04e5\u04e7\7\u008d\2\2\u04e6\u04e5\3\2\2\2\u04e6\u04e7\3\2\2"+
		"\2\u04e7\u04e9\3\2\2\2\u04e8\u04ea\7\u01c4\2\2\u04e9\u04e8\3\2\2\2\u04e9"+
		"\u04ea\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ec\7\u02b8\2\2\u04ec)\3\2"+
		"\2\2\u04ed\u04f7\5\u016e\u00b8\2\u04ee\u04f7\5\u0170\u00b9\2\u04ef\u04f7"+
		"\5\u0172\u00ba\2\u04f0\u04f7\5\u0176\u00bc\2\u04f1\u04f7\5\u0180\u00c1"+
		"\2\u04f2\u04f7\5\62\32\2\u04f3\u04f7\5\60\31\2\u04f4\u04f7\5&\24\2\u04f5"+
		"\u04f7\5(\25\2\u04f6\u04ed\3\2\2\2\u04f6\u04ee\3\2\2\2\u04f6\u04ef\3\2"+
		"\2\2\u04f6\u04f0\3\2\2\2\u04f6\u04f1\3\2\2\2\u04f6\u04f2\3\2\2\2\u04f6"+
		"\u04f3\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f6\u04f5\3\2\2\2\u04f7+\3\2\2\2"+
		"\u04f8\u04f9\7\u0097\2\2\u04f9\u04fa\7\u01a3\2\2\u04fa\u04fb\5\u0344\u01a3"+
		"\2\u04fb\u04fc\7\u02b8\2\2\u04fc-\3\2\2\2\u04fd\u04fe\7\16\2\2\u04fe\u04ff"+
		"\7\u01a3\2\2\u04ff\u0500\5\u0344\u01a3\2\u0500\u0502\7U\2\2\u0501\u0503"+
		"\7|\2\2\u0502\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0507\3\2\2\2\u0504"+
		"\u0506\5\u015a\u00ae\2\u0505\u0504\3\2\2\2\u0506\u0509\3\2\2\2\u0507\u0505"+
		"\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050c\3\2\2\2\u0509\u0507\3\2\2\2\u050a"+
		"\u050b\7\u01ca\2\2\u050b\u050d\7\u01ee\2\2\u050c\u050a\3\2\2\2\u050c\u050d"+
		"\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f\7\u02b8\2\2\u050f/\3\2\2\2\u0510"+
		"\u0511\7\u00d4\2\2\u0511\u051d\5\u0390\u01c9\2\u0512\u0513\7\u02a6\2\2"+
		"\u0513\u0518\5\u0166\u00b4\2\u0514\u0515\7\u02ac\2\2\u0515\u0517\5\u0166"+
		"\u00b4\2\u0516\u0514\3\2\2\2\u0517\u051a\3\2\2\2\u0518\u0516\3\2\2\2\u0518"+
		"\u0519\3\2\2\2\u0519\u051b\3\2\2\2\u051a\u0518\3\2\2\2\u051b\u051c\7\u02a7"+
		"\2\2\u051c\u051e\3\2\2\2\u051d\u0512\3\2\2\2\u051d\u051e\3\2\2\2\u051e"+
		"\u051f\3\2\2\2\u051f\u0520\7\u01c9\2\2\u0520\u0527\5\u0374\u01bb\2\u0521"+
		"\u0526\5\u0158\u00ad\2\u0522\u0526\5\22\n\2\u0523\u0526\5\26\f\2\u0524"+
		"\u0526\7\u008d\2\2\u0525\u0521\3\2\2\2\u0525\u0522\3\2\2\2\u0525\u0523"+
		"\3\2\2\2\u0525\u0524\3\2\2\2\u0526\u0529\3\2\2\2\u0527\u0525\3\2\2\2\u0527"+
		"\u0528\3\2\2\2\u0528\u053b\3\2\2\2\u0529\u0527\3\2\2\2\u052a\u052c\7\u0190"+
		"\2\2\u052b\u052a\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u052d\3\2\2\2\u052d"+
		"\u0536\t\3\2\2\u052e\u0530\7\177\2\2\u052f\u052e\3\2\2\2\u052f\u0530\3"+
		"\2\2\2\u0530\u0532\3\2\2\2\u0531\u0533\5\u016a\u00b6\2\u0532\u0531\3\2"+
		"\2\2\u0532\u0533\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0537\5\u01b6\u00dc"+
		"\2\u0535\u0537\5\u015c\u00af\2\u0536\u052f\3\2\2\2\u0536\u0535\3\2\2\2"+
		"\u0537\u053c\3\2\2\2\u0538\u0539\t\4\2\2\u0539\u053a\7\u024a\2\2\u053a"+
		"\u053c\5\u0326\u0194\2\u053b\u052b\3\2\2\2\u053b\u0538\3\2\2\2\u053c\u053d"+
		"\3\2\2\2\u053d\u053e\7\u02b8\2\2\u053e\61\3\2\2\2\u053f\u0540\7\u01a3"+
		"\2\2\u0540\u054c\5\u0390\u01c9\2\u0541\u0542\7\u02a6\2\2\u0542\u0547\5"+
		"\u0166\u00b4\2\u0543\u0544\7\u02ac\2\2\u0544\u0546\5\u0166\u00b4\2\u0545"+
		"\u0543\3\2\2\2\u0546\u0549\3\2\2\2\u0547\u0545\3\2\2\2\u0547\u0548\3\2"+
		"\2\2\u0548\u054a\3\2\2\2\u0549\u0547\3\2\2\2\u054a\u054b\7\u02a7\2\2\u054b"+
		"\u054d\3\2\2\2\u054c\u0541\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054e\3\2"+
		"\2\2\u054e\u0558\t\3\2\2\u054f\u0551\7\177\2\2\u0550\u054f\3\2\2\2\u0550"+
		"\u0551\3\2\2\2\u0551\u0553\3\2\2\2\u0552\u0554\5\u016a\u00b6\2\u0553\u0552"+
		"\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0559\5\u01b6\u00dc"+
		"\2\u0556\u0559\5\u015c\u00af\2\u0557\u0559\7\u00bb\2\2\u0558\u0550\3\2"+
		"\2\2\u0558\u0556\3\2\2\2\u0558\u0557\3\2\2\2\u0559\u055a\3\2\2\2\u055a"+
		"\u055b\7\u02b8\2\2\u055b\63\3\2\2\2\u055c\u055f\7j\2\2\u055d\u055e\7\u0177"+
		"\2\2\u055e\u0560\7\u01be\2\2\u055f\u055d\3\2\2\2\u055f\u0560\3\2\2\2\u0560"+
		"\u0561\3\2\2\2\u0561\u0562\7\u01a3\2\2\u0562\u056e\5\u0344\u01a3\2\u0563"+
		"\u0564\7\u02a6\2\2\u0564\u0569\5\u0166\u00b4\2\u0565\u0566\7\u02ac\2\2"+
		"\u0566\u0568\5\u0166\u00b4\2\u0567\u0565\3\2\2\2\u0568\u056b\3\2\2\2\u0569"+
		"\u0567\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056c\3\2\2\2\u056b\u0569\3\2"+
		"\2\2\u056c\u056d\7\u02a7\2\2\u056d\u056f\3\2\2\2\u056e\u0563\3\2\2\2\u056e"+
		"\u056f\3\2\2\2\u056f\u0571\3\2\2\2\u0570\u0572\5\u0158\u00ad\2\u0571\u0570"+
		"\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u057d\t\3\2\2\u0574"+
		"\u0576\7\177\2\2\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0578\3"+
		"\2\2\2\u0577\u0579\5\u016a\u00b6\2\u0578\u0577\3\2\2\2\u0578\u0579\3\2"+
		"\2\2\u0579\u057a\3\2\2\2\u057a\u057e\5\u01b6\u00dc\2\u057b\u057e\5\u015c"+
		"\u00af\2\u057c\u057e\7\u00bb\2\2\u057d\u0575\3\2\2\2\u057d\u057b\3\2\2"+
		"\2\u057d\u057c\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0580\7\u02b8\2\2\u0580"+
		"\65\3\2\2\2\u0581\u0582\7\u0097\2\2\u0582\u0583\7\u0233\2\2\u0583\u0584"+
		"\5\u0346\u01a4\2\u0584\u0585\7\u02b8\2\2\u0585\67\3\2\2\2\u0586\u0587"+
		"\7\16\2\2\u0587\u0588\7\u0233\2\2\u0588\u059b\5\u0346\u01a4\2\u0589\u059c"+
		"\t\b\2\2\u058a\u058b\7\u01bd\2\2\u058b\u058c\7\u022d\2\2\u058c\u059c\5"+
		"\u0346\u01a4\2\u058d\u058f\7U\2\2\u058e\u0590\7|\2\2\u058f\u058e\3\2\2"+
		"\2\u058f\u0590\3\2\2\2\u0590\u0594\3\2\2\2\u0591\u0593\5\u015a\u00ae\2"+
		"\u0592\u0591\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592\3\2\2\2\u0594\u0595"+
		"\3\2\2\2\u0595\u0599\3\2\2\2\u0596\u0594\3\2\2\2\u0597\u0598\7\u01ca\2"+
		"\2\u0598\u059a\7\u01ee\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a"+
		"\u059c\3\2\2\2\u059b\u0589\3\2\2\2\u059b\u058a\3\2\2\2\u059b\u058d\3\2"+
		"\2\2\u059c\u059d\3\2\2\2\u059d\u059e\7\u02b8\2\2\u059e9\3\2\2\2\u059f"+
		"\u05a2\7j\2\2\u05a0\u05a1\7\u0177\2\2\u05a1\u05a3\7\u01be\2\2\u05a2\u05a0"+
		"\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a5\7\u0233\2"+
		"\2\u05a5\u05a9\5\u0346\u01a4\2\u05a6\u05aa\5@!\2\u05a7\u05aa\5D#\2\u05a8"+
		"\u05aa\5F$\2\u05a9\u05a6\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9\u05a8\3\2\2"+
		"\2\u05aa\u05ac\3\2\2\2\u05ab\u05ad\5<\37\2\u05ac\u05ab\3\2\2\2\u05ac\u05ad"+
		"\3\2\2\2\u05ad\u05af\3\2\2\2\u05ae\u05b0\t\b\2\2\u05af\u05ae\3\2\2\2\u05af"+
		"\u05b0\3\2\2\2\u05b0\u05b2\3\2\2\2\u05b1\u05b3\5> \2\u05b2\u05b1\3\2\2"+
		"\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\5H%\2\u05b5\u05b6"+
		"\7\u02b8\2\2\u05b6;\3\2\2\2\u05b7\u05b8\7\u00cb\2\2\u05b8\u05bd\5\u0346"+
		"\u01a4\2\u05b9\u05ba\7\u02ac\2\2\u05ba\u05bc\5\u0346\u01a4\2\u05bb\u05b9"+
		"\3\2\2\2\u05bc\u05bf\3\2\2\2\u05bd\u05bb\3\2\2\2\u05bd\u05be\3\2\2\2\u05be"+
		"=\3\2\2\2\u05bf\u05bd\3\2\2\2\u05c0\u05c1\7\u025a\2\2\u05c1\u05c2\7\u02a6"+
		"\2\2\u05c2\u05c3\5\u0298\u014d\2\u05c3\u05c4\7\u02a7\2\2\u05c4?\3\2\2"+
		"\2\u05c5\u05ca\7\'\2\2\u05c6\u05ca\7\t\2\2\u05c7\u05c8\7\u00fd\2\2\u05c8"+
		"\u05ca\7\u0169\2\2\u05c9\u05c5\3\2\2\2\u05c9\u05c6\3\2\2\2\u05c9\u05c7"+
		"\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cd\5R*\2\u05cc\u05ce\5X-\2\u05cd"+
		"\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05d0\3\2\2\2\u05cf\u05d1\5B"+
		"\"\2\u05d0\u05cf\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1A\3\2\2\2\u05d2\u05d3"+
		"\7\u00cf\2\2\u05d3\u05d4\7\u0099\2\2\u05d4\u05d5\7\u01d4\2\2\u05d5C\3"+
		"\2\2\2\u05d6\u05d7\7\u00cf\2\2\u05d7\u05d9\5R*\2\u05d8\u05da\5X-\2\u05d9"+
		"\u05d8\3\2\2\2\u05d9\u05da\3\2\2\2\u05daE\3\2\2\2\u05db\u05dc\t\t\2\2"+
		"\u05dc\u05e1\5P)\2\u05dd\u05de\7\u0177\2\2\u05de\u05e0\5P)\2\u05df\u05dd"+
		"\3\2\2\2\u05e0\u05e3\3\2\2\2\u05e1\u05df\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2"+
		"\u05e4\3\2\2\2\u05e3\u05e1\3\2\2\2\u05e4\u05ec\7\u016f\2\2\u05e5\u05ed"+
		"\7s\2\2\u05e6\u05e7\5\u0320\u0191\2\u05e7\u05e8\7\u029f\2\2\u05e8\u05ea"+
		"\3\2\2\2\u05e9\u05e6\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb"+
		"\u05ed\7\u01dd\2\2\u05ec\u05e5\3\2\2\2\u05ec\u05e9\3\2\2\2\u05edG\3\2"+
		"\2\2\u05ee\u05ef\7W\2\2\u05ef\u05f4\7\u0233\2\2\u05f0\u05f1\7<\2\2\u05f1"+
		"\u05f4\5\u0390\u01c9\2\u05f2\u05f4\5\u01ba\u00de\2\u05f3\u05ee\3\2\2\2"+
		"\u05f3\u05f0\3\2\2\2\u05f3\u05f2\3\2\2\2\u05f4I\3\2\2\2\u05f5\u05f7\5"+
		"\u0322\u0192\2\u05f6\u05f8\5\u036a\u01b6\2\u05f7\u05f6\3\2\2\2\u05f7\u05f8"+
		"\3\2\2\2\u05f8K\3\2\2\2\u05f9\u05fa\7W\2\2\u05fa\u05fc\7\u0233\2\2\u05fb"+
		"\u05fd\5\u016a\u00b6\2\u05fc\u05fb\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05ff"+
		"\3\2\2\2\u05fe\u0600\5N(\2\u05ff\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601"+
		"\u05ff\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u0604\7\u00a5"+
		"\2\2\u0604\u0605\5\u0346\u01a4\2\u0605M\3\2\2\2\u0606\u0607\7\'\2\2\u0607"+
		"\u0608\7\u0207\2\2\u0608\u0609\7\u0104\2\2\u0609\u060a\5\u01ba\u00de\2"+
		"\u060a\u060b\7\'\2\2\u060b\u060c\7\u0207\2\2\u060c\u060d\7\u02b8\2\2\u060d"+
		"\u062b\3\2\2\2\u060e\u060f\7\'\2\2\u060f\u0610\7\u0099\2\2\u0610\u0611"+
		"\7\u01d4\2\2\u0611\u0612\7\u0104\2\2\u0612\u0613\5\u01ba\u00de\2\u0613"+
		"\u0614\7\'\2\2\u0614\u0615\7\u0099\2\2\u0615\u0616\7\u01d4\2\2\u0616\u0617"+
		"\7\u02b8\2\2\u0617\u062b\3\2\2\2\u0618\u0619\7\t\2\2\u0619\u061a\7\u0207"+
		"\2\2\u061a\u061b\7\u0104\2\2\u061b\u061c\5\u01ba\u00de\2\u061c\u061d\7"+
		"\t\2\2\u061d\u061e\7\u0207\2\2\u061e\u061f\7\u02b8\2\2\u061f\u062b\3\2"+
		"\2\2\u0620\u0621\7\t\2\2\u0621\u0622\7\u0099\2\2\u0622\u0623\7\u01d4\2"+
		"\2\u0623\u0624\7\u0104\2\2\u0624\u0625\5\u01ba\u00de\2\u0625\u0626\7\t"+
		"\2\2\u0626\u0627\7\u0099\2\2\u0627\u0628\7\u01d4\2\2\u0628\u0629\7\u02b8"+
		"\2\2\u0629\u062b\3\2\2\2\u062a\u0606\3\2\2\2\u062a\u060e\3\2\2\2\u062a"+
		"\u0618\3\2\2\2\u062a\u0620\3\2\2\2\u062bO\3\2\2\2\u062c\u0647\7\16\2\2"+
		"\u062d\u0647\7\17\2\2\u062e\u062f\7\26\2\2\u062f\u0647\7\u0209\2\2\u0630"+
		"\u0647\7\32\2\2\u0631\u0647\7Q\2\2\u0632\u0647\7j\2\2\u0633\u0634\7\u0092"+
		"\2\2\u0634\u0647\7\u0209\2\2\u0635\u0647\7\u0097\2\2\u0636\u0647\7\u00d8"+
		"\2\2\u0637\u0647\7\u014d\2\2\u0638\u0647\7\u01bd\2\2\u0639\u0647\7\u01cc"+
		"\2\2\u063a\u0647\7\u0235\2\2\u063b\u0647\7{\2\2\u063c\u0647\7\u0205\2"+
		"\2\u063d\u0647\7\u01f1\2\2\u063e\u0647\7y\2\2\u063f\u0647\7\u0122\2\2"+
		"\u0640\u0647\7\u0121\2\2\u0641\u0647\7\u01e9\2\2\u0642\u0647\7\u0212\2"+
		"\2\u0643\u0647\7s\2\2\u0644\u0647\7\u01dd\2\2\u0645\u0647\7\u00cb\2\2"+
		"\u0646\u062c\3\2\2\2\u0646\u062d\3\2\2\2\u0646\u062e\3\2\2\2\u0646\u0630"+
		"\3\2\2\2\u0646\u0631\3\2\2\2\u0646\u0632\3\2\2\2\u0646\u0633\3\2\2\2\u0646"+
		"\u0635\3\2\2\2\u0646\u0636\3\2\2\2\u0646\u0637\3\2\2\2\u0646\u0638\3\2"+
		"\2\2\u0646\u0639\3\2\2\2\u0646\u063a\3\2\2\2\u0646\u063b\3\2\2\2\u0646"+
		"\u063c\3\2\2\2\u0646\u063d\3\2\2\2\u0646\u063e\3\2\2\2\u0646\u063f\3\2"+
		"\2\2\u0646\u0640\3\2\2\2\u0646\u0641\3\2\2\2\u0646\u0642\3\2\2\2\u0646"+
		"\u0643\3\2\2\2\u0646\u0644\3\2\2\2\u0646\u0645\3\2\2\2\u0647Q\3\2\2\2"+
		"\u0648\u064d\5T+\2\u0649\u064a\7\u0177\2\2\u064a\u064c\5T+\2\u064b\u0649"+
		"\3\2\2\2\u064c\u064f\3\2\2\2\u064d\u064b\3\2\2\2\u064d\u064e\3\2\2\2\u064e"+
		"\u0650\3\2\2\2\u064f\u064d\3\2\2\2\u0650\u0652\7\u016f\2\2\u0651\u0653"+
		"\5V,\2\u0652\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0654\3\2\2\2\u0654"+
		"\u0655\5\u0356\u01ac\2\u0655S\3\2\2\2\u0656\u0659\t\n\2\2\u0657\u0658"+
		"\7\u0169\2\2\u0658\u065a\5\u0364\u01b3\2\u0659\u0657\3\2\2\2\u0659\u065a"+
		"\3\2\2\2\u065aU\3\2\2\2\u065b\u065c\7\u0149\2\2\u065c\u065d\7\u021d\2"+
		"\2\u065d\u065e\5\u0356\u01ac\2\u065e\u065f\7\u0169\2\2\u065fW\3\2\2\2"+
		"\u0660\u0662\7\u01b6\2\2\u0661\u0663\5Z.\2\u0662\u0661\3\2\2\2\u0663\u0664"+
		"\3\2\2\2\u0664\u0662\3\2\2\2\u0664\u0665\3\2\2\2\u0665Y\3\2\2\2\u0666"+
		"\u0667\t\13\2\2\u0667\u0668\5\u030c\u0187\2\u0668[\3\2\2\2\u0669\u066a"+
		"\7\u0097\2\2\u066a\u066c\7\u0238\2\2\u066b\u066d\7\62\2\2\u066c\u066b"+
		"\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u0670\5\u033c\u019f"+
		"\2\u066f\u0671\t\f\2\2\u0670\u066f\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0672"+
		"\3\2\2\2\u0672\u0673\7\u02b8\2\2\u0673]\3\2\2\2\u0674\u0675\7\16\2\2\u0675"+
		"\u0676\7\u0238\2\2\u0676\u067c\5\u033c\u019f\2\u0677\u067d\5`\61\2\u0678"+
		"\u067d\5b\62\2\u0679\u067d\5d\63\2\u067a\u067d\5l\67\2\u067b\u067d\5\u008e"+
		"H\2\u067c\u0677\3\2\2\2\u067c\u0678\3\2\2\2\u067c\u0679\3\2\2\2\u067c"+
		"\u067a\3\2\2\2\u067c\u067b\3\2\2\2\u067d\u067f\3\2\2\2\u067e\u0680\5n"+
		"8\2\u067f\u067e\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0681\3\2\2\2\u0681"+
		"\u0682\7\u02b8\2\2\u0682_\3\2\2\2\u0683\u0685\7U\2\2\u0684\u0686\7|\2"+
		"\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0688\3\2\2\2\u0687\u0689"+
		"\t\r\2\2\u0688\u0687\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068d\3\2\2\2\u068a"+
		"\u068c\5\u015a\u00ae\2\u068b\u068a\3\2\2\2\u068c\u068f\3\2\2\2\u068d\u068b"+
		"\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u0692\3\2\2\2\u068f\u068d\3\2\2\2\u0690"+
		"\u0691\7\u01ca\2\2\u0691\u0693\7\u01ee\2\2\u0692\u0690\3\2\2\2\u0692\u0693"+
		"\3\2\2\2\u0693a\3\2\2\2\u0694\u0696\7\u01be\2\2\u0695\u0697\5\u0158\u00ad"+
		"\2\u0696\u0695\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698\3\2\2\2\u0698\u0699"+
		"\7\24\2\2\u0699\u069a\7\u0166\2\2\u069a\u069b\7\u02a6\2\2\u069b\u06a0"+
		"\5\u0090I\2\u069c\u069d\7\u02ac\2\2\u069d\u069f\5\u0090I\2\u069e\u069c"+
		"\3\2\2\2\u069f\u06a2\3\2\2\2\u06a0\u069e\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1"+
		"\u06a3\3\2\2\2\u06a2\u06a0\3\2\2\2\u06a3\u06a4\7\u02a7\2\2\u06a4c\3\2"+
		"\2\2\u06a5\u06aa\5f\64\2\u06a6\u06a7\7\u02ac\2\2\u06a7\u06a9\5f\64\2\u06a8"+
		"\u06a6\3\2\2\2\u06a9\u06ac\3\2\2\2\u06aa\u06a8\3\2\2\2\u06aa\u06ab\3\2"+
		"\2\2\u06abe\3\2\2\2\u06ac\u06aa\3\2\2\2\u06ad\u06b0\t\16\2\2\u06ae\u06b1"+
		"\5\u00a0Q\2\u06af\u06b1\5\u0098M\2\u06b0\u06ae\3\2\2\2\u06b0\u06af\3\2"+
		"\2\2\u06b1g\3\2\2\2\u06b2\u06b3\t\17\2\2\u06b3\u06c0\7\31\2\2\u06b4\u06c1"+
		"\5j\66\2\u06b5\u06b6\7\u02a6\2\2\u06b6\u06bb\5j\66\2\u06b7\u06b8\7\u02ac"+
		"\2\2\u06b8\u06ba\5j\66\2\u06b9\u06b7\3\2\2\2\u06ba\u06bd\3\2\2\2\u06bb"+
		"\u06b9\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06be\3\2\2\2\u06bd\u06bb\3\2"+
		"\2\2\u06be\u06bf\7\u02a7\2\2\u06bf\u06c1\3\2\2\2\u06c0\u06b4\3\2\2\2\u06c0"+
		"\u06b5\3\2\2\2\u06c1i\3\2\2\2\u06c2\u06c4\5\u0318\u018d\2\u06c3\u06c5"+
		"\5\u0374\u01bb\2\u06c4\u06c3\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5k\3\2\2"+
		"\2\u06c6\u06cc\7\u013d\2\2\u06c7\u06c8\7\u0118\2\2\u06c8\u06cd\5\u029c"+
		"\u014f\2\u06c9\u06ca\7\u009d\2\2\u06ca\u06cb\7\u0238\2\2\u06cb\u06cd\5"+
		"\u0374\u01bb\2\u06cc\u06c7\3\2\2\2\u06cc\u06c9\3\2\2\2\u06cdm\3\2\2\2"+
		"\u06ce\u06df\7\u0103\2\2\u06cf\u06d9\7>\2\2\u06d0\u06d1\7e\2\2\u06d1\u06d2"+
		"\7\u022d\2\2\u06d2\u06da\7\u020f\2\2\u06d3\u06d5\7\u015e\2\2\u06d4\u06d3"+
		"\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d7\7\u00ea\2"+
		"\2\u06d7\u06d8\7\u021d\2\2\u06d8\u06da\7t\2\2\u06d9\u06d0\3\2\2\2\u06d9"+
		"\u06d4\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u06dc\3\2\2\2\u06db\u06dd\5p"+
		"9\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06df\3\2\2\2\u06de"+
		"\u06ce\3\2\2\2\u06de\u06cf\3\2\2\2\u06dfo\3\2\2\2\u06e0\u06e2\7\u00cd"+
		"\2\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3"+
		"\u06e4\7\u00b0\2\2\u06e4\u06e5\7\u0102\2\2\u06e5\u06e6\5\u0356\u01ac\2"+
		"\u06e6q\3\2\2\2\u06e7\u06ea\7j\2\2\u06e8\u06e9\7\u0177\2\2\u06e9\u06eb"+
		"\7\u01be\2\2\u06ea\u06e8\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ec\3\2\2"+
		"\2\u06ec\u06ef\7\u0238\2\2\u06ed\u06f0\5t;\2\u06ee\u06f0\5\u0080A\2\u06ef"+
		"\u06ed\3\2\2\2\u06ef\u06ee\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f2\7\u02b8"+
		"\2\2\u06f2s\3\2\2\2\u06f3\u06f6\5\u033c\u019f\2\u06f4\u06f5\7\u016a\2"+
		"\2\u06f5\u06f7\7\u02a2\2\2\u06f6\u06f4\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7"+
		"\u06f9\3\2\2\2\u06f8\u06fa\5v<\2\u06f9\u06f8\3\2\2\2\u06f9\u06fa\3\2\2"+
		"\2\u06fau\3\2\2\2\u06fb\u06fd\5\u0158\u00ad\2\u06fc\u06fb\3\2\2\2\u06fc"+
		"\u06fd\3\2\2\2\u06fd\u0700\3\2\2\2\u06fe\u0701\5x=\2\u06ff\u0701\5z>\2"+
		"\u0700\u06fe\3\2\2\2\u0700\u06ff\3\2\2\2\u0701\u0703\3\2\2\2\u0702\u0704"+
		"\5~@\2\u0703\u0702\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0710\3\2\2\2\u0705"+
		"\u0706\7\u02a6\2\2\u0706\u070b\5\u0090I\2\u0707\u0708\7\u02ac\2\2\u0708"+
		"\u070a\5\u0090I\2\u0709\u0707\3\2\2\2\u070a\u070d\3\2\2\2\u070b\u0709"+
		"\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u070e\3\2\2\2\u070d\u070b\3\2\2\2\u070e"+
		"\u070f\7\u02a7\2\2\u070f\u0711\3\2\2\2\u0710\u0705\3\2\2\2\u0710\u0711"+
		"\3\2\2\2\u0711\u0715\3\2\2\2\u0712\u0714\5\u008eH\2\u0713\u0712\3\2\2"+
		"\2\u0714\u0717\3\2\2\2\u0715\u0713\3\2\2\2\u0715\u0716\3\2\2\2\u0716w"+
		"\3\2\2\2\u0717\u0715\3\2\2\2\u0718\u071c\t\3\2\2\u0719\u071d\7\u0166\2"+
		"\2\u071a\u071d\5\u0186\u00c4\2\u071b\u071d\5|?\2\u071c\u0719\3\2\2\2\u071c"+
		"\u071a\3\2\2\2\u071c\u071b\3\2\2\2\u071dy\3\2\2\2\u071e\u071f\7\u023a"+
		"\2\2\u071f\u0720\5\u0374\u01bb\2\u0720{\3\2\2\2\u0721\u0722\7\u021d\2"+
		"\2\u0722\u0723\7\u0169\2\2\u0723\u0726\5\u0374\u01bb\2\u0724\u0725\7\u015e"+
		"\2\2\u0725\u0727\7\u0161\2\2\u0726\u0724\3\2\2\2\u0726\u0727\3\2\2\2\u0727"+
		"}\3\2\2\2\u0728\u0729\7\u00bb\2\2\u0729\u072a\7\u0141\2\2\u072a\u072b"+
		"\5\u029c\u014f\2\u072b\u072c\7\u010c\2\2\u072c\u072d\7\u0107\2\2\u072d"+
		"\u072e\7\u024a\2\2\u072e\u072f\t\20\2\2\u072f\177\3\2\2\2\u0730\u0731"+
		"\7\62\2\2\u0731\u0732\5\u033c\u019f\2\u0732\u0734\t\3\2\2\u0733\u0735"+
		"\5\u0082B\2\u0734\u0733\3\2\2\2\u0735\u0736\3\2\2\2\u0736\u0734\3\2\2"+
		"\2\u0736\u0737\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u0739\7\u00a5\2\2\u0739"+
		"\u0081\3\2\2\2\u073a\u073d\5\u0084C\2\u073b\u073d\5\u0086D\2\u073c\u073a"+
		"\3\2\2\2\u073c\u073b\3\2\2\2\u073d\u0083\3\2\2\2\u073e\u073f\t\21\2\2"+
		"\u073f\u0740\7\u0132\2\2\u0740\u0741\5\u008aF\2\u0741\u0085\3\2\2\2\u0742"+
		"\u0746\t\22\2\2\u0743\u0747\5\u0088E\2\u0744\u0747\5\u008aF\2\u0745\u0747"+
		"\5\u008cG\2\u0746\u0743\3\2\2\2\u0746\u0744\3\2\2\2\u0746\u0745\3\2\2"+
		"\2\u0747\u0087\3\2\2\2\u0748\u0749\7\u01a3\2\2\u0749\u074a\5\u0344\u01a3"+
		"\2\u074a\u074b\7\u02a6\2\2\u074b\u0750\5\u00a6T\2\u074c\u074d\7\u02ac"+
		"\2\2\u074d\u074f\5\u00a6T\2\u074e\u074c\3\2\2\2\u074f\u0752\3\2\2\2\u0750"+
		"\u074e\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0753\3\2\2\2\u0752\u0750\3\2"+
		"\2\2\u0753\u0754\7\u02a7\2\2\u0754\u075f\t\3\2\2\u0755\u0760\5\u015c\u00af"+
		"\2\u0756\u0758\7\177\2\2\u0757\u0756\3\2\2\2\u0757\u0758\3\2\2\2\u0758"+
		"\u075a\3\2\2\2\u0759\u075b\5\u016a\u00b6\2\u075a\u0759\3\2\2\2\u075a\u075b"+
		"\3\2\2\2\u075b\u075c\3\2\2\2\u075c\u075d\5\u01b6\u00dc\2\u075d\u075e\7"+
		"\u02b8\2\2\u075e\u0760\3\2\2\2\u075f\u0755\3\2\2\2\u075f\u0757\3\2\2\2"+
		"\u0760\u0089\3\2\2\2\u0761\u0762\7\u00d4\2\2\u0762\u076e\5\u0342\u01a2"+
		"\2\u0763\u0764\7\u02a6\2\2\u0764\u0769\5\u00a6T\2\u0765\u0766\7\u02ac"+
		"\2\2\u0766\u0768\5\u00a6T\2\u0767\u0765\3\2\2\2\u0768\u076b\3\2\2\2\u0769"+
		"\u0767\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u076c\3\2\2\2\u076b\u0769\3\2"+
		"\2\2\u076c\u076d\7\u02a7\2\2\u076d\u076f\3\2\2\2\u076e\u0763\3\2\2\2\u076e"+
		"\u076f\3\2\2\2\u076f\u0770\3\2\2\2\u0770\u0771\7\u01c9\2\2\u0771\u0772"+
		"\5\u0374\u01bb\2\u0772\u077d\t\3\2\2\u0773\u077e\5\u015c\u00af\2\u0774"+
		"\u0776\7\177\2\2\u0775\u0774\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u0778\3"+
		"\2\2\2\u0777\u0779\5\u016a\u00b6\2\u0778\u0777\3\2\2\2\u0778\u0779\3\2"+
		"\2\2\u0779\u077a\3\2\2\2\u077a\u077b\5\u01b6\u00dc\2\u077b\u077c\7\u02b8"+
		"\2\2\u077c\u077e\3\2\2\2\u077d\u0773\3\2\2\2\u077d\u0775\3\2\2\2\u077e"+
		"\u008b\3\2\2\2\u077f\u0781\7\u00c3\2\2\u0780\u077f\3\2\2\2\u0780\u0781"+
		"\3\2\2\2\u0781\u0783\3\2\2\2\u0782\u0784\7\u00fc\2\2\u0783\u0782\3\2\2"+
		"\2\u0783\u0784\3\2\2\2\u0784\u0785\3\2\2\2\u0785\u0786\7_\2\2\u0786\u0787"+
		"\7\u00d4\2\2\u0787\u0799\5\u0374\u01bb\2\u0788\u0789\7\u02a6\2\2\u0789"+
		"\u078a\7\u01e4\2\2\u078a\u078b\7\u00f4\2\2\u078b\u078c\7\u017b\2\2\u078c"+
		"\u078d\5\u0374\u01bb\2\u078d\u078e\7\u02ac\2\2\u078e\u078f\3\2\2\2\u078f"+
		"\u0794\5\u00a6T\2\u0790\u0791\7\u02ac\2\2\u0791\u0793\5\u00a6T\2\u0792"+
		"\u0790\3\2\2\2\u0793\u0796\3\2\2\2\u0794\u0792\3\2\2\2\u0794\u0795\3\2"+
		"\2\2\u0795\u0797\3\2\2\2\u0796\u0794\3\2\2\2\u0797\u0798\7\u02a7\2\2\u0798"+
		"\u079a\3\2\2\2\u0799\u0788\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b\3\2"+
		"\2\2\u079b\u079c\7\u01c9\2\2\u079c\u079d\7\u01e4\2\2\u079d\u079e\7\24"+
		"\2\2\u079e\u079f\7\u01c5\2\2\u079f\u07aa\t\3\2\2\u07a0\u07ab\5\u015c\u00af"+
		"\2\u07a1\u07a3\7\177\2\2\u07a2\u07a1\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3"+
		"\u07a5\3\2\2\2\u07a4\u07a6\5\u016a\u00b6\2\u07a5\u07a4\3\2\2\2\u07a5\u07a6"+
		"\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7\u07a8\5\u01b6\u00dc\2\u07a8\u07a9\7"+
		"\u02b8\2\2\u07a9\u07ab\3\2\2\2\u07aa\u07a0\3\2\2\2\u07aa\u07a2\3\2\2\2"+
		"\u07ab\u008d\3\2\2\2\u07ac\u07ae\7\u015e\2\2\u07ad\u07ac\3\2\2\2\u07ad"+
		"\u07ae\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b0\t\23\2\2\u07b0\u008f\3"+
		"\2\2\2\u07b1\u07b2\5\u0390\u01c9\2\u07b2\u07b4\5\u0374\u01bb\2\u07b3\u07b5"+
		"\5\u0092J\2\u07b4\u07b3\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b8\3\2\2"+
		"\2\u07b6\u07b8\5\u0094K\2\u07b7\u07b1\3\2\2\2\u07b7\u07b6\3\2\2\2\u07b8"+
		"\u0091\3\2\2\2\u07b9\u07ba\7\u00bb\2\2\u07ba\u07bb\7\u0141\2\2\u07bb\u07bc"+
		"\5\u029c\u014f\2\u07bc\u0093\3\2\2\2\u07bd\u07bf\5\u008eH\2\u07be\u07bd"+
		"\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c1\3\2\2\2\u07c0\u07c2\5\u0096L"+
		"\2\u07c1\u07c0\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c3\u07c4"+
		"\3\2\2\2\u07c4\u07c7\3\2\2\2\u07c5\u07c6\7\u02ac\2\2\u07c6\u07c8\5\u00a2"+
		"R\2\u07c7\u07c5\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u0095\3\2\2\2\u07c9"+
		"\u07cd\5\u0098M\2\u07ca\u07cd\5\u009eP\2\u07cb\u07cd\5\u00a0Q\2\u07cc"+
		"\u07c9\3\2\2\2\u07cc\u07ca\3\2\2\2\u07cc\u07cb\3\2\2\2\u07cd\u0097\3\2"+
		"\2\2\u07ce\u07d1\t\22\2\2\u07cf\u07d2\5\u009aN\2\u07d0\u07d2\5\u009cO"+
		"\2\u07d1\u07cf\3\2\2\2\u07d1\u07d0\3\2\2\2\u07d2\u0099\3\2\2\2\u07d3\u07d4"+
		"\7\u01a3\2\2\u07d4\u07d5\5\u0344\u01a3\2\u07d5\u07d6\7\u02a6\2\2\u07d6"+
		"\u07db\5\u00a6T\2\u07d7\u07d8\7\u02ac\2\2\u07d8\u07da\5\u00a6T\2\u07d9"+
		"\u07d7\3\2\2\2\u07da\u07dd\3\2\2\2\u07db\u07d9\3\2\2\2\u07db\u07dc\3\2"+
		"\2\2\u07dc\u07de\3\2\2\2\u07dd\u07db\3\2\2\2\u07de\u07e1\7\u02a7\2\2\u07df"+
		"\u07e0\t\3\2\2\u07e0\u07e2\5\u015c\u00af\2\u07e1\u07df\3\2\2\2\u07e1\u07e2"+
		"\3\2\2\2\u07e2\u009b\3\2\2\2\u07e3\u07e4\7\u00d4\2\2\u07e4\u07f0\5\u0342"+
		"\u01a2\2\u07e5\u07e6\7\u02a6\2\2\u07e6\u07eb\5\u00a6T\2\u07e7\u07e8\7"+
		"\u02ac\2\2\u07e8\u07ea\5\u00a6T\2\u07e9\u07e7\3\2\2\2\u07ea\u07ed\3\2"+
		"\2\2\u07eb\u07e9\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07ee\3\2\2\2\u07ed"+
		"\u07eb\3\2\2\2\u07ee\u07ef\7\u02a7\2\2\u07ef\u07f1\3\2\2\2\u07f0\u07e5"+
		"\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f7\7\u01c9\2"+
		"\2\u07f3\u07f8\5\u0374\u01bb\2\u07f4\u07f5\7\u01e4\2\2\u07f5\u07f6\7\24"+
		"\2\2\u07f6\u07f8\7\u01c5\2\2\u07f7\u07f3\3\2\2\2\u07f7\u07f4\3\2\2\2\u07f8"+
		"\u0801\3\2\2\2\u07f9\u07fa\t\3\2\2\u07fa\u0802\5\u015c\u00af\2\u07fb\u07fd"+
		"\7\u00bb\2\2\u07fc\u07fe\7\u0250\2\2\u07fd\u07fc\3\2\2\2\u07fd\u07fe\3"+
		"\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0800\7\u0141\2\2\u0800\u0802\5\u029c"+
		"\u014f\2\u0801\u07f9\3\2\2\2\u0801\u07fb\3\2\2\2\u0801\u0802\3\2\2\2\u0802"+
		"\u009d\3\2\2\2\u0803\u0805\7\u00c3\2\2\u0804\u0803\3\2\2\2\u0804\u0805"+
		"\3\2\2\2\u0805\u0807\3\2\2\2\u0806\u0808\7\u00fc\2\2\u0807\u0806\3\2\2"+
		"\2\u0807\u0808\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u080a\7_\2\2\u080a\u080b"+
		"\7\u00d4\2\2\u080b\u081d\5\u0374\u01bb\2\u080c\u080d\7\u02a6\2\2\u080d"+
		"\u080e\7\u01e4\2\2\u080e\u080f\7\u00f4\2\2\u080f\u0810\7\u017b\2\2\u0810"+
		"\u0811\5\u0374\u01bb\2\u0811\u0812\7\u02ac\2\2\u0812\u0813\3\2\2\2\u0813"+
		"\u0818\5\u00a6T\2\u0814\u0815\7\u02ac\2\2\u0815\u0817\5\u00a6T\2\u0816"+
		"\u0814\3\2\2\2\u0817\u081a\3\2\2\2\u0818\u0816\3\2\2\2\u0818\u0819\3\2"+
		"\2\2\u0819\u081b\3\2\2\2\u081a\u0818\3\2\2\2\u081b\u081c\7\u02a7\2\2\u081c"+
		"\u081e\3\2\2\2\u081d\u080c\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f\3\2"+
		"\2\2\u081f\u0820\7\u01c9\2\2\u0820\u0821\7\u01e4\2\2\u0821\u0822\7\24"+
		"\2\2\u0822\u0825\7\u01c5\2\2\u0823\u0824\t\3\2\2\u0824\u0826\5\u015c\u00af"+
		"\2\u0825\u0823\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u009f\3\2\2\2\u0827\u0828"+
		"\t\21\2\2\u0828\u0829\7\u0132\2\2\u0829\u082a\5\u009cO\2\u082a\u00a1\3"+
		"\2\2\2\u082b\u082c\7\u0199\2\2\u082c\u082d\7\u01c3\2\2\u082d\u082e\7\u02a6"+
		"\2\2\u082e\u0833\5\u00a4S\2\u082f\u0830\7\u02ac\2\2\u0830\u0832\5\u00a4"+
		"S\2\u0831\u082f\3\2\2\2\u0832\u0835\3\2\2\2\u0833\u0831\3\2\2\2\u0833"+
		"\u0834\3\2\2\2\u0834\u0836\3\2\2\2\u0835\u0833\3\2\2\2\u0836\u0837\7\u02a7"+
		"\2\2\u0837\u00a3\3\2\2\2\u0838\u083b\5\u0390\u01c9\2\u0839\u083b\7\u0082"+
		"\2\2\u083a\u0838\3\2\2\2\u083a\u0839\3\2\2\2\u083b\u00a5\3\2\2\2\u083c"+
		"\u083d\5\u0328\u0195\2\u083d\u083e\5\u0374\u01bb\2\u083e\u00a7\3\2\2\2"+
		"\u083f\u0840\7\u0097\2\2\u0840\u0841\7\u01e5\2\2\u0841\u0842\5\u033e\u01a0"+
		"\2\u0842\u0843\7\u02b8\2\2\u0843\u00a9\3\2\2\2\u0844\u0845\7\16\2\2\u0845"+
		"\u0846\7\u01e5\2\2\u0846\u0848\5\u033e\u01a0\2\u0847\u0849\5\u00aeX\2"+
		"\u0848\u0847\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u0848\3\2\2\2\u084a\u084b"+
		"\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084d\7\u02b8\2\2\u084d\u00ab\3\2\2"+
		"\2\u084e\u084f\7j\2\2\u084f\u0850\7\u01e5\2\2\u0850\u0855\5\u033e\u01a0"+
		"\2\u0851\u0854\5\u00b0Y\2\u0852\u0854\5\u00aeX\2\u0853\u0851\3\2\2\2\u0853"+
		"\u0852\3\2\2\2\u0854\u0857\3\2\2\2\u0855\u0853\3\2\2\2\u0855\u0856\3\2"+
		"\2\2\u0856\u0858\3\2\2\2\u0857\u0855\3\2\2\2\u0858\u0859\7\u02b8\2\2\u0859"+
		"\u00ad\3\2\2\2\u085a\u085b\7\u00eb\2\2\u085b\u085c\79\2\2\u085c\u086b"+
		"\7\u02a0\2\2\u085d\u085e\7\u012f\2\2\u085e\u086b\7\u02a0\2\2\u085f\u086b"+
		"\7\u0155\2\2\u0860\u0861\7\u0139\2\2\u0861\u086b\7\u02a0\2\2\u0862\u086b"+
		"\7\u0156\2\2\u0863\u086b\7r\2\2\u0864\u086b\7\u0151\2\2\u0865\u0866\7"+
		";\2\2\u0866\u086b\7\u02a0\2\2\u0867\u086b\7\u014e\2\2\u0868\u086b\7\u0175"+
		"\2\2\u0869\u086b\7\u0159\2\2\u086a\u085a\3\2\2\2\u086a\u085d\3\2\2\2\u086a"+
		"\u085f\3\2\2\2\u086a\u0860\3\2\2\2\u086a\u0862\3\2\2\2\u086a\u0863\3\2"+
		"\2\2\u086a\u0864\3\2\2\2\u086a\u0865\3\2\2\2\u086a\u0867\3\2\2\2\u086a"+
		"\u0868\3\2\2\2\u086a\u0869\3\2\2\2\u086b\u00af\3\2\2\2\u086c\u086d\7\u0204"+
		"\2\2\u086d\u086e\7\u025f\2\2\u086e\u086f\7\u02a0\2\2\u086f\u00b1\3\2\2"+
		"\2\u0870\u0872\7j\2\2\u0871\u0873\7\u023e\2\2\u0872\u0871\3\2\2\2\u0872"+
		"\u0873\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0875\7\u00ee\2\2\u0875\u0876"+
		"\5\u034a\u01a6\2\u0876\u0877\7\u016f\2\2\u0877\u0878\5\u0356\u01ac\2\u0878"+
		"\u087b\5\u0366\u01b4\2\u0879\u087a\7\u021c\2\2\u087a\u087c\5\u0392\u01ca"+
		"\2\u087b\u0879\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087f\3\2\2\2\u087d\u087e"+
		"\7Y\2\2\u087e\u0880\7\u0209\2\2\u087f\u087d\3\2\2\2\u087f\u0880\3\2\2"+
		"\2\u0880\u0881\3\2\2\2\u0881\u0882\7\u02b8\2\2\u0882\u00b3\3\2\2\2\u0883"+
		"\u0884\7\16\2\2\u0884\u0885\7\u00ee\2\2\u0885\u0886\5\u034a\u01a6\2\u0886"+
		"\u0887\7\u01bd\2\2\u0887\u0888\7\u022d\2\2\u0888\u0889\5\u034a\u01a6\2"+
		"\u0889\u088a\7\u02b8\2\2\u088a\u00b5\3\2\2\2\u088b\u088c\7j\2\2\u088c"+
		"\u088d\7\u0248\2\2\u088d\u0897\5\u0360\u01b1\2\u088e\u0898\5\u00bc_\2"+
		"\u088f\u0898\5\u00be`\2\u0890\u0898\5\u00c0a\2\u0891\u0898\5\u00c2b\2"+
		"\u0892\u0898\5\u00c4c\2\u0893\u0898\5\u00caf\2\u0894\u0898\5\u00ccg\2"+
		"\u0895\u0898\5\u00ceh\2\u0896\u0898\5\u00e0q\2\u0897\u088e\3\2\2\2\u0897"+
		"\u088f\3\2\2\2\u0897\u0890\3\2\2\2\u0897\u0891\3\2\2\2\u0897\u0892\3\2"+
		"\2\2\u0897\u0893\3\2\2\2\u0897\u0894\3\2\2\2\u0897\u0895\3\2\2\2\u0897"+
		"\u0896\3\2\2\2\u0898\u0899\3\2\2\2\u0899\u0897\3\2\2\2\u0899\u089a\3\2"+
		"\2\2\u089a\u089b\3\2\2\2\u089b\u089c\7\u02b8\2\2\u089c\u00b7\3\2\2\2\u089d"+
		"\u089e\7\16\2\2\u089e\u089f\7\u0248\2\2\u089f\u08ab\5\u0360\u01b1\2\u08a0"+
		"\u08ac\5\u00ba^\2\u08a1\u08ac\5\u00be`\2\u08a2\u08ac\5\u00c0a\2\u08a3"+
		"\u08ac\5\u00c2b\2\u08a4\u08ac\5\u00c4c\2\u08a5\u08ac\5\u00c8e\2\u08a6"+
		"\u08ac\5\u00caf\2\u08a7\u08ac\5\u00ccg\2\u08a8\u08ac\5\u00d0i\2\u08a9"+
		"\u08ac\5\u00e0q\2\u08aa\u08ac\5\u00dan\2\u08ab\u08a0\3\2\2\2\u08ab\u08a1"+
		"\3\2\2\2\u08ab\u08a2\3\2\2\2\u08ab\u08a3\3\2\2\2\u08ab\u08a4\3\2\2\2\u08ab"+
		"\u08a5\3\2\2\2\u08ab\u08a6\3\2\2\2\u08ab\u08a7\3\2\2\2\u08ab\u08a8\3\2"+
		"\2\2\u08ab\u08a9\3\2\2\2\u08ab\u08aa\3\2\2\2\u08ac\u08ad\3\2\2\2\u08ad"+
		"\u08ab\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b0\7\u02b8"+
		"\2\2\u08b0\u08bd\3\2\2\2\u08b1\u08b3\7\u02ac\2\2\u08b2\u08b1\3\2\2\2\u08b2"+
		"\u08b3\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b6\5\u0360\u01b1\2\u08b5\u08b2"+
		"\3\2\2\2\u08b6\u08b7\3\2\2\2\u08b7\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8"+
		"\u08b9\3\2\2\2\u08b9\u08ba\5\u00d2j\2\u08ba\u08bb\7\u02b8\2\2\u08bb\u08bd"+
		"\3\2\2\2\u08bc\u089d\3\2\2\2\u08bc\u08b5\3\2\2\2\u08bd\u00b9\3\2\2\2\u08be"+
		"\u08c1\5\u00bc_\2\u08bf\u08c0\7\u01be\2\2\u08c0\u08c2\5\u0392\u01ca\2"+
		"\u08c1\u08bf\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u00bb\3\2\2\2\u08c3\u08c4"+
		"\7\u00e3\2\2\u08c4\u08c5\79\2\2\u08c5\u08c6\5\u0392\u01ca\2\u08c6\u00bd"+
		"\3\2\2\2\u08c7\u08c8\7\u00e3\2\2\u08c8\u08cb\t\24\2\2\u08c9\u08ca\7\24"+
		"\2\2\u08ca\u08cc\5\u038e\u01c8\2\u08cb\u08c9\3\2\2\2\u08cb\u08cc\3\2\2"+
		"\2\u08cc\u00bf\3\2\2\2\u08cd\u08ce\t\25\2\2\u08ce\u08cf\7\u021c\2\2\u08cf"+
		"\u08d0\5\u0392\u01ca\2\u08d0\u00c1\3\2\2\2\u08d1\u08d4\7\u01aa\2\2\u08d2"+
		"\u08d5\5\u0126\u0094\2\u08d3\u08d5\7\u023f\2\2\u08d4\u08d2\3\2\2\2\u08d4"+
		"\u08d3\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08d7\7\u016f\2\2\u08d7\u08d8"+
		"\5\u0392\u01ca\2\u08d8\u00c3\3\2\2\2\u08d9\u08da\7\u01a5\2\2\u08da\u08db"+
		"\5\u0392\u01ca\2\u08db\u00c5\3\2\2\2\u08dc\u08de\7\u02ac\2\2\u08dd\u08dc"+
		"\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08df\3\2\2\2\u08df\u08e1\5\u0336\u019c"+
		"\2\u08e0\u08dd\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e2\u08e3"+
		"\3\2\2\2\u08e3\u08f4\3\2\2\2\u08e4\u08f0\7\r\2\2\u08e5\u08ea\7\u00ad\2"+
		"\2\u08e6\u08e8\7\u02ac\2\2\u08e7\u08e6\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8"+
		"\u08e9\3\2\2\2\u08e9\u08eb\5\u0336\u019c\2\u08ea\u08e7\3\2\2\2\u08eb\u08ec"+
		"\3\2\2\2\u08ec\u08ea\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08ef\3\2\2\2\u08ee"+
		"\u08e5\3\2\2\2\u08ef\u08f2\3\2\2\2\u08f0\u08ee\3\2\2\2\u08f0\u08f1\3\2"+
		"\2\2\u08f1\u08f4\3\2\2\2\u08f2\u08f0\3\2\2\2\u08f3\u08e0\3\2\2\2\u08f3"+
		"\u08e4\3\2\2\2\u08f4\u00c7\3\2\2\2\u08f5\u08f6\7\u0082\2\2\u08f6\u08f9"+
		"\7\u01cf\2\2\u08f7\u08fa\7\u0157\2\2\u08f8\u08fa\5\u00c6d\2\u08f9\u08f7"+
		"\3\2\2\2\u08f9\u08f8\3\2\2\2\u08fa\u00c9\3\2\2\2\u08fb\u08fc\7\u0185\2"+
		"\2\u08fc\u08fd\7\u00b8\2\2\u08fd\u00cb\3\2\2\2\u08fe\u08ff\7\4\2\2\u08ff"+
		"\u0900\t\26\2\2\u0900\u00cd\3\2\2\2\u0901\u0902\7\u00a1\2\2\u0902\u0903"+
		"\7\u009c\2\2\u0903\u00cf\3\2\2\2\u0904\u090e\5\u00ceh\2\u0905\u090a\7"+
		"\u00cf\2\2\u0906\u0908\7\u02ac\2\2\u0907\u0906\3\2\2\2\u0907\u0908\3\2"+
		"\2\2\u0908\u0909\3\2\2\2\u0909\u090b\5\u0396\u01cc\2\u090a\u0907\3\2\2"+
		"\2\u090b\u090c\3\2\2\2\u090c\u090a\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u090f"+
		"\3\2\2\2\u090e\u0905\3\2\2\2\u090e\u090f\3\2\2\2\u090f\u0911\3\2\2\2\u0910"+
		"\u0912\7\u00cd\2\2\u0911\u0910\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u00d1"+
		"\3\2\2\2\u0913\u0914\7\u01cc\2\2\u0914\u0915\7[\2\2\u0915\u0919\7\u0223"+
		"\2\2\u0916\u0917\7\u00a7\2\2\u0917\u091a\7\u0247\2\2\u0918\u091a\5\u0360"+
		"\u01b1\2\u0919\u0916\3\2\2\2\u0919\u0918\3\2\2\2\u091a\u093b\3\2\2\2\u091b"+
		"\u091c\7\u00d8\2\2\u091c\u091d\7[\2\2\u091d\u0938\7\u0223\2\2\u091e\u091f"+
		"\7\u00a7\2\2\u091f\u0939\7\u0247\2\2\u0920\u0928\5\u0360\u01b1\2\u0921"+
		"\u0926\7\u025f\2\2\u0922\u0923\7\u0158\2\2\u0923\u0927\7\u01d0\2\2\u0924"+
		"\u0925\7\u01cf\2\2\u0925\u0927\5\u00c6d\2\u0926\u0922\3\2\2\2\u0926\u0924"+
		"\3\2\2\2\u0927\u0929\3\2\2\2\u0928\u0921\3\2\2\2\u0928\u0929\3\2\2\2\u0929"+
		"\u092c\3\2\2\2\u092a\u092b\7\34\2\2\u092b\u092d\7\u01bf\2\2\u092c\u092a"+
		"\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u0936\3\2\2\2\u092e\u092f\7\33\2\2"+
		"\u092f\u0934\7\u024a\2\2\u0930\u0935\7\u0185\2\2\u0931\u0935\7A\2\2\u0932"+
		"\u0933\7\u0094\2\2\u0933\u0935\7\u0141\2\2\u0934\u0930\3\2\2\2\u0934\u0931"+
		"\3\2\2\2\u0934\u0932\3\2\2\2\u0935\u0937\3\2\2\2\u0936\u092e\3\2\2\2\u0936"+
		"\u0937\3\2\2\2\u0937\u0939\3\2\2\2\u0938\u091e\3\2\2\2\u0938\u0920\3\2"+
		"\2\2\u0939\u093b\3\2\2\2\u093a\u0913\3\2\2\2\u093a\u091b\3\2\2\2\u093b"+
		"\u00d3\3\2\2\2\u093c\u0941\7\u02a6\2\2\u093d\u093f\7\u02ac\2\2\u093e\u093d"+
		"\3\2\2\2\u093e\u093f\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0942\5\u0392\u01ca"+
		"\2\u0941\u093e\3\2\2\2\u0942\u0943\3\2\2\2\u0943\u0941\3\2\2\2\u0943\u0944"+
		"\3\2\2\2\u0944\u0945\3\2\2\2\u0945\u0946\7\u02a7\2\2\u0946\u00d5\3\2\2"+
		"\2\u0947\u0948\7\u01ec\2\2\u0948\u0949\7a\2\2\u0949\u094d\7\u02ba\2\2"+
		"\u094a\u094e\7\r\2\2\u094b\u094e\7\u0082\2\2\u094c\u094e\5\u00d4k\2\u094d"+
		"\u094a\3\2\2\2\u094d\u094b\3\2\2\2\u094d\u094c\3\2\2\2\u094e\u00d7\3\2"+
		"\2\2\u094f\u0950\t\27\2\2\u0950\u0951\7a\2\2\u0951\u0952\7\u02ba\2\2\u0952"+
		"\u0953\5\u00d4k\2\u0953\u00d9\3\2\2\2\u0954\u095b\5\u00d6l\2\u0955\u0958"+
		"\5\u00d8m\2\u0956\u0957\7\u00cf\2\2\u0957\u0959\5\u032e\u0198\2\u0958"+
		"\u0956\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u095b\3\2\2\2\u095a\u0954\3\2"+
		"\2\2\u095a\u0955\3\2\2\2\u095b\u00db\3\2\2\2\u095c\u095d\7\u0097\2\2\u095d"+
		"\u095e\7\u00ee\2\2\u095e\u095f\5\u034a\u01a6\2\u095f\u0960\7\u02b8\2\2"+
		"\u0960\u00dd\3\2\2\2\u0961\u096d\7\u00d8\2\2\u0962\u0964\7\u02ac\2\2\u0963"+
		"\u0962\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u096b\3\2\2\2\u0965\u096c\5\u0336"+
		"\u019c\2\u0966\u096c\5\u0386\u01c4\2\u0967\u0969\5\u0384\u01c3\2\u0968"+
		"\u096a\5\u0366\u01b4\2\u0969\u0968\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096c"+
		"\3\2\2\2\u096b\u0965\3\2\2\2\u096b\u0966\3\2\2\2\u096b\u0967\3\2\2\2\u096c"+
		"\u096e\3\2\2\2\u096d\u0963\3\2\2\2\u096e\u096f\3\2\2\2\u096f\u096d\3\2"+
		"\2\2\u096f\u0970\3\2\2\2\u0970\u0973\3\2\2\2\u0971\u0972\7\u016f\2\2\u0972"+
		"\u0974\5\u0362\u01b2\2\u0973\u0971\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0975"+
		"\3\2\2\2\u0975\u097b\7\u022d\2\2\u0976\u0978\7\u02ac\2\2\u0977\u0976\3"+
		"\2\2\2\u0977\u0978\3\2\2\2\u0978\u0979\3\2\2\2\u0979\u097c\5\u0334\u019b"+
		"\2\u097a\u097c\7\u01a7\2\2\u097b\u0977\3\2\2\2\u097b\u097a\3\2\2\2\u097c"+
		"\u097d\3\2\2\2\u097d\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0982\3\2"+
		"\2\2\u097f\u0980\7\u025f\2\2\u0980\u0981\t\30\2\2\u0981\u0983\7\u0173"+
		"\2\2\u0982\u097f\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0987\3\2\2\2\u0984"+
		"\u0985\7\u025f\2\2\u0985\u0986\7\u00e0\2\2\u0986\u0988\7\u0173\2\2\u0987"+
		"\u0984\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u098c\3\2\2\2\u0989\u098a\7\u025f"+
		"\2\2\u098a\u098b\7\u00d8\2\2\u098b\u098d\7\u0173\2\2\u098c\u0989\3\2\2"+
		"\2\u098c\u098d\3\2\2\2\u098d\u098f\3\2\2\2\u098e\u0990\5\u00e0q\2\u098f"+
		"\u098e\3\2\2\2\u098f\u0990\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u0992\7\u02b8"+
		"\2\2\u0992\u00df\3\2\2\2\u0993\u0994\7`\2\2\u0994\u0995\7\u02ba\2\2\u0995"+
		"\u0996\t\31\2\2\u0996\u00e1\3\2\2\2\u0997\u099a\7j\2\2\u0998\u0999\7\u0177"+
		"\2\2\u0999\u099b\7\u01be\2\2\u099a\u0998\3\2\2\2\u099a\u099b\3\2\2\2\u099b"+
		"\u09a0\3\2\2\2\u099c\u099e\7\u0177\2\2\u099d\u099c\3\2\2\2\u099d\u099e"+
		"\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u09a1\7\u00cd\2\2\u09a0\u099d\3\2\2"+
		"\2\u09a0\u09a1\3\2\2\2\u09a1\u09a3\3\2\2\2\u09a2\u09a4\7\u009b\2\2\u09a3"+
		"\u09a2\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a6\7\u0255"+
		"\2\2\u09a6\u09a8\5\u0356\u01ac\2\u09a7\u09a9\5\u00e4s\2\u09a8\u09a7\3"+
		"\2\2\2\u09a8\u09a9\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa\u09ab\7\24\2\2\u09ab"+
		"\u09ad\5\u01ea\u00f6\2\u09ac\u09ae\5\u0292\u014a\2\u09ad\u09ac\3\2\2\2"+
		"\u09ad\u09ae\3\2\2\2\u09ae\u00e3\3\2\2\2\u09af\u09b2\5\u00e6t\2\u09b0"+
		"\u09b2\5\u00e8u\2\u09b1\u09af\3\2\2\2\u09b1\u09b0\3\2\2\2\u09b2\u00e5"+
		"\3\2\2\2\u09b3\u09c1\7\u02a6\2\2\u09b4\u09b6\7\u02ac\2\2\u09b5\u09b4\3"+
		"\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09bf\3\2\2\2\u09b7\u09bb\5\u030e\u0188"+
		"\2\u09b8\u09ba\5\u00eav\2\u09b9\u09b8\3\2\2\2\u09ba\u09bd\3\2\2\2\u09bb"+
		"\u09b9\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09c0\3\2\2\2\u09bd\u09bb\3\2"+
		"\2\2\u09be\u09c0\5\u00ecw\2\u09bf\u09b7\3\2\2\2\u09bf\u09be\3\2\2\2\u09c0"+
		"\u09c2\3\2\2\2\u09c1\u09b5\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c1\3\2"+
		"\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c5\3\2\2\2\u09c5\u09c6\7\u02a7\2\2\u09c6"+
		"\u00e7\3\2\2\2\u09c7\u09c8\7\u0169\2\2\u09c8\u09db\5\u033c\u019f\2\u09c9"+
		"\u09ca\7\u025f\2\2\u09ca\u09cb\7\u0166\2\2\u09cb\u09d7\t\32\2\2\u09cc"+
		"\u09d8\7\u0082\2\2\u09cd\u09d2\7\u02a6\2\2\u09ce\u09d0\7\u02ac\2\2\u09cf"+
		"\u09ce\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u09d3\7\u02c3"+
		"\2\2\u09d2\u09cf\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d2\3\2\2\2\u09d4"+
		"\u09d5\3\2\2\2\u09d5\u09d6\3\2\2\2\u09d6\u09d8\7\u02a7\2\2\u09d7\u09cc"+
		"\3\2\2\2\u09d7\u09cd\3\2\2\2\u09d8\u09dc\3\2\2\2\u09d9\u09da\7\u023a\2"+
		"\2\u09da\u09dc\5\u0356\u01ac\2\u09db\u09c9\3\2\2\2\u09db\u09d9\3\2\2\2"+
		"\u09dc\u09ee\3\2\2\2\u09dd\u09e6\7\u02a6\2\2\u09de\u09e0\7\u02ac\2\2\u09df"+
		"\u09de\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0\u09e4\3\2\2\2\u09e1\u09e5\5\u00ec"+
		"w\2\u09e2\u09e3\7\u02c3\2\2\u09e3\u09e5\5\u00eav\2\u09e4\u09e1\3\2\2\2"+
		"\u09e4\u09e2\3\2\2\2\u09e5\u09e7\3\2\2\2\u09e6\u09df\3\2\2\2\u09e7\u09e8"+
		"\3\2\2\2\u09e8\u09e6\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09ea\3\2\2\2\u09ea"+
		"\u09eb\7\u02a7\2\2\u09eb\u09ed\3\2\2\2\u09ec\u09dd\3\2\2\2\u09ed\u09f0"+
		"\3\2\2\2\u09ee\u09ec\3\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u00e9\3\2\2\2\u09f0"+
		"\u09ee\3\2\2\2\u09f1\u09f2\7]\2\2\u09f2\u09f4\5\u0338\u019d\2\u09f3\u09f1"+
		"\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09fe\3\2\2\2\u09f5\u09f7\7\u015e\2"+
		"\2\u09f6\u09f5\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09ff"+
		"\7\u0161\2\2\u09f9\u09ff\7\u023e\2\2\u09fa\u09fb\7\u019f\2\2\u09fb\u09ff"+
		"\7\u010b\2\2\u09fc\u09ff\5\u014e\u00a8\2\u09fd\u09ff\5\u0144\u00a3\2\u09fe"+
		"\u09f6\3\2\2\2\u09fe\u09f9\3\2\2\2\u09fe\u09fa\3\2\2\2\u09fe\u09fc\3\2"+
		"\2\2\u09fe\u09fd\3\2\2\2\u09ff\u0a01\3\2\2\2\u0a00\u0a02\5\u00eex\2\u0a01"+
		"\u0a00\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u00eb\3\2\2\2\u0a03\u0a04\7]"+
		"\2\2\u0a04\u0a06\5\u0338\u019d\2\u0a05\u0a03\3\2\2\2\u0a05\u0a06\3\2\2"+
		"\2\u0a06\u0a0b\3\2\2\2\u0a07\u0a0c\5\u0154\u00ab\2\u0a08\u0a0c\5\u014c"+
		"\u00a7\2\u0a09\u0a0c\5\u0152\u00aa\2\u0a0a\u0a0c\5\u0144\u00a3\2\u0a0b"+
		"\u0a07\3\2\2\2\u0a0b\u0a08\3\2\2\2\u0a0b\u0a09\3\2\2\2\u0a0b\u0a0a\3\2"+
		"\2\2\u0a0c\u0a0e\3\2\2\2\u0a0d\u0a05\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f"+
		"\u0a0d\3\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a12\3\2\2\2\u0a11\u0a13\5\u00ee"+
		"x\2\u0a12\u0a11\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u00ed\3\2\2\2\u0a14"+
		"\u0a16\7\u015e\2\2\u0a15\u0a14\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a17"+
		"\3\2\2\2\u0a17\u0a1e\7\u0084\2\2\u0a18\u0a19\7\u00f6\2\2\u0a19\u0a1e\t"+
		"\33\2\2\u0a1a\u0a1e\t\34\2\2\u0a1b\u0a1e\t\b\2\2\u0a1c\u0a1e\t\35\2\2"+
		"\u0a1d\u0a15\3\2\2\2\u0a1d\u0a18\3\2\2\2\u0a1d\u0a1a\3\2\2\2\u0a1d\u0a1b"+
		"\3\2\2\2\u0a1d\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a1d\3\2\2\2\u0a1f"+
		"\u0a20\3\2\2\2\u0a20\u00ef\3\2\2\2\u0a21\u0a23\7j\2\2\u0a22\u0a24\t\36"+
		"\2\2\u0a23\u0a22\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a28\3\2\2\2\u0a25"+
		"\u0a29\5\u00f2z\2\u0a26\u0a29\5\u00fe\u0080\2\u0a27\u0a29\5\u0102\u0082"+
		"\2\u0a28\u0a25\3\2\2\2\u0a28\u0a26\3\2\2\2\u0a28\u0a27\3\2\2\2\u0a29\u0a2a"+
		"\3\2\2\2\u0a2a\u0a2b\7\u02b8\2\2\u0a2b\u00f1\3\2\2\2\u0a2c\u0a2d\7\u021c"+
		"\2\2\u0a2d\u0a2f\5\u0392\u01ca\2\u0a2e\u0a30\5\u0106\u0084\2\u0a2f\u0a2e"+
		"\3\2\2\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a42\3\2\2\2\u0a31\u0a32\7\u0135\2"+
		"\2\u0a32\u0a33\7\u00ba\2\2\u0a33\u0a41\5\u0126\u0094\2\u0a34\u0a35\7\61"+
		"\2\2\u0a35\u0a41\5\u0126\u0094\2\u0a36\u0a41\5\u00f6|\2\u0a37\u0a38\7"+
		"\u00cd\2\2\u0a38\u0a41\7\u011e\2\2\u0a39\u0a41\t\37\2\2\u0a3a\u0a3b\7"+
		"\u00a4\2\2\u0a3b\u0a41\5\u00f4{\2\u0a3c\u0a41\7\u0082\2\2\u0a3d\u0a41"+
		"\5\u00f8}\2\u0a3e\u0a41\5\u00fa~\2\u0a3f\u0a41\5\u00fc\177\2\u0a40\u0a31"+
		"\3\2\2\2\u0a40\u0a34\3\2\2\2\u0a40\u0a36\3\2\2\2\u0a40\u0a37\3\2\2\2\u0a40"+
		"\u0a39\3\2\2\2\u0a40\u0a3a\3\2\2\2\u0a40\u0a3c\3\2\2\2\u0a40\u0a3d\3\2"+
		"\2\2\u0a40\u0a3e\3\2\2\2\u0a40\u0a3f\3\2\2\2\u0a41\u0a44\3\2\2\2\u0a42"+
		"\u0a40\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u00f3\3\2\2\2\u0a44\u0a42\3\2"+
		"\2\2\u0a45\u0a46\7\u024a\2\2\u0a46\u0a47\7\u02a2\2\2\u0a47\u00f5\3\2\2"+
		"\2\u0a48\u0a49\t \2\2\u0a49\u00f7\3\2\2\2\u0a4a\u0a4b\7\u00ba\2\2\u0a4b"+
		"\u0a4c\7\u0128\2\2\u0a4c\u0a53\7\u011b\2\2\u0a4d\u0a54\7\36\2\2\u0a4e"+
		"\u0a51\7\u023c\2\2\u0a4f\u0a50\7\u01f6\2\2\u0a50\u0a52\5\u0126\u0094\2"+
		"\u0a51\u0a4f\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a54\3\2\2\2\u0a53\u0a4d"+
		"\3\2\2\2\u0a53\u0a4e\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u00f9\3\2\2\2\u0a55"+
		"\u0a56\7\u01e2\2\2\u0a56\u0a57\7\u01fe\2\2\u0a57\u0a58\7\u0128\2\2\u0a58"+
		"\u0a59\t!\2\2\u0a59\u00fb\3\2\2\2\u0a5a\u0a5b\7\u00c6\2\2\u0a5b\u0a5c"+
		"\t\"\2\2\u0a5c\u00fd\3\2\2\2\u0a5d\u0a5e\7\u021f\2\2\u0a5e\u0a5f\7\u021c"+
		"\2\2\u0a5f\u0a61\5\u0392\u01ca\2\u0a60\u0a62\5\u0108\u0085\2\u0a61\u0a60"+
		"\3\2\2\2\u0a61\u0a62\3\2\2\2\u0a62\u0a64\3\2\2\2\u0a63\u0a65\5\u0100\u0081"+
		"\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a67\3\2\2\2\u0a66\u0a68"+
		"\5\u00f8}\2\u0a67\u0a66\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u00ff\3\2\2"+
		"\2\u0a69\u0a6a\7\u021c\2\2\u0a6a\u0a6b\7\u00d9\2\2\u0a6b\u0a6c\t#\2\2"+
		"\u0a6c\u0101\3\2\2\2\u0a6d\u0a6e\7\u023b\2\2\u0a6e\u0a6f\7\u021c\2\2\u0a6f"+
		"\u0a71\5\u0392\u01ca\2\u0a70\u0a72\5\u0106\u0084\2\u0a71\u0a70\3\2\2\2"+
		"\u0a71\u0a72\3\2\2\2\u0a72\u0a74\3\2\2\2\u0a73\u0a75\5\u00f8}\2\u0a74"+
		"\u0a73\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a77\3\2\2\2\u0a76\u0a78\5\u0104"+
		"\u0083\2\u0a77\u0a76\3\2\2\2\u0a77\u0a78\3\2\2\2\u0a78\u0103\3\2\2\2\u0a79"+
		"\u0a7a\7\u01c7\2\2\u0a7a\u0a7b\t$\2\2\u0a7b\u0105\3\2\2\2\u0a7c\u0a7e"+
		"\7u\2\2\u0a7d\u0a7f\7\u02ac\2\2\u0a7e\u0a7d\3\2\2\2\u0a7e\u0a7f\3\2\2"+
		"\2\u0a7f\u0a80\3\2\2\2\u0a80\u0a81\5\u010a\u0086\2\u0a81\u0107\3\2\2\2"+
		"\u0a82\u0a84\7\u021e\2\2\u0a83\u0a85\7\u02ac\2\2\u0a84\u0a83\3\2\2\2\u0a84"+
		"\u0a85\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0a87\5\u010a\u0086\2\u0a87\u0109"+
		"\3\2\2\2\u0a88\u0a8a\7\u02a2\2\2\u0a89\u0a88\3\2\2\2\u0a89\u0a8a\3\2\2"+
		"\2\u0a8a\u0a8d\3\2\2\2\u0a8b\u0a8c\7\u01f6\2\2\u0a8c\u0a8e\5\u0126\u0094"+
		"\2\u0a8d\u0a8b\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a90\3\2\2\2\u0a8f\u0a91"+
		"\7\u01ca\2\2\u0a90\u0a8f\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a93\3\2\2"+
		"\2\u0a92\u0a94\5\u010e\u0088\2\u0a93\u0a92\3\2\2\2\u0a93\u0a94\3\2\2\2"+
		"\u0a94\u010b\3\2\2\2\u0a95\u0aa1\7u\2\2\u0a96\u0aa2\7\u02a2\2\2\u0a97"+
		"\u0a9c\7\u02a6\2\2\u0a98\u0a9a\7\u02ac\2\2\u0a99\u0a98\3\2\2\2\u0a99\u0a9a"+
		"\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u0a9d\7\u02a2\2\2\u0a9c\u0a99\3\2\2"+
		"\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9c\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa0"+
		"\3\2\2\2\u0aa0\u0aa2\7\u02a7\2\2\u0aa1\u0a96\3\2\2\2\u0aa1\u0a97\3\2\2"+
		"\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0aa5\3\2\2\2\u0aa3\u0aa4\7\u01f6\2\2\u0aa4"+
		"\u0aa6\5\u0126\u0094\2\u0aa5\u0aa3\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa9"+
		"\3\2\2\2\u0aa7\u0aa8\7\61\2\2\u0aa8\u0aaa\5\u0126\u0094\2\u0aa9\u0aa7"+
		"\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u0aac\3\2\2\2\u0aab\u0aad\7\u01ca\2"+
		"\2\u0aac\u0aab\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad\u010d\3\2\2\2\u0aae\u0ab8"+
		"\7 \2\2\u0aaf\u0ab9\7\u0168\2\2\u0ab0\u0ab3\7\u016f\2\2\u0ab1\u0ab2\7"+
		"\u014c\2\2\u0ab2\u0ab4\5\u0126\u0094\2\u0ab3\u0ab1\3\2\2\2\u0ab3\u0ab4"+
		"\3\2\2\2\u0ab4\u0ab6\3\2\2\2\u0ab5\u0ab7\5\u0110\u0089\2\u0ab6\u0ab5\3"+
		"\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ab9\3\2\2\2\u0ab8\u0aaf\3\2\2\2\u0ab8"+
		"\u0ab0\3\2\2\2\u0ab9\u010f\3\2\2\2\u0aba\u0abd\7\u012e\2\2\u0abb\u0abe"+
		"\7\u023f\2\2\u0abc\u0abe\5\u0126\u0094\2\u0abd\u0abb\3\2\2\2\u0abd\u0abc"+
		"\3\2\2\2\u0abe\u0111\3\2\2\2\u0abf\u0ac0\7\67\2\2\u0ac0\u0ac1\t\33\2\2"+
		"\u0ac1\u0113\3\2\2\2\u0ac2\u0ac6\7\u015a\2\2\u0ac3\u0ac4\7\u0180\2\2\u0ac4"+
		"\u0ac6\7\u02a0\2\2\u0ac5\u0ac2\3\2\2\2\u0ac5\u0ac3\3\2\2\2\u0ac6\u0115"+
		"\3\2\2\2\u0ac7\u0ac8\7j\2\2\u0ac8\u0ac9\7\u012d\2\2\u0ac9\u0aca\7\u0255"+
		"\2\2\u0aca\u0acb\7\u011f\2\2\u0acb\u0acc\7\u016f\2\2\u0acc\u0ad6\5\u0356"+
		"\u01ac\2\u0acd\u0ad3\5\u012a\u0096\2\u0ace\u0acf\7\u021c\2\2\u0acf\u0ad3"+
		"\5\u0392\u01ca\2\u0ad0\u0ad3\5\u00f6|\2\u0ad1\u0ad3\t%\2\2\u0ad2\u0acd"+
		"\3\2\2\2\u0ad2\u0ace\3\2\2\2\u0ad2\u0ad0\3\2\2\2\u0ad2\u0ad1\3\2\2\2\u0ad3"+
		"\u0ad4\3\2\2\2\u0ad4\u0ad2\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ad7\3\2"+
		"\2\2\u0ad6\u0ad2\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u0ad9\3\2\2\2\u0ad8"+
		"\u0ada\5\u0114\u008b\2\u0ad9\u0ad8\3\2\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0b02"+
		"\3\2\2\2\u0adb\u0aeb\7\u025f\2\2\u0adc\u0ade\7\u02ac\2\2\u0add\u0adc\3"+
		"\2\2\2\u0add\u0ade\3\2\2\2\u0ade\u0ae7\3\2\2\2\u0adf\u0ae0\7\u0166\2\2"+
		"\u0ae0\u0ae8\7\u00e5\2\2\u0ae1\u0ae2\7\u019f\2\2\u0ae2\u0ae8\7\u010b\2"+
		"\2\u0ae3\u0ae8\7\u01d3\2\2\u0ae4\u0ae8\7\u01e5\2\2\u0ae5\u0ae6\7R\2\2"+
		"\u0ae6\u0ae8\7\u01de\2\2\u0ae7\u0adf\3\2\2\2\u0ae7\u0ae1\3\2\2\2\u0ae7"+
		"\u0ae3\3\2\2\2\u0ae7\u0ae4\3\2\2\2\u0ae7\u0ae5\3\2\2\2\u0ae8\u0aea\3\2"+
		"\2\2\u0ae9\u0add\3\2\2\2\u0aea\u0aed\3\2\2\2\u0aeb\u0ae9\3\2\2\2\u0aeb"+
		"\u0aec\3\2\2\2\u0aec\u0afb\3\2\2\2\u0aed\u0aeb\3\2\2\2\u0aee\u0af3\7\u02a6"+
		"\2\2\u0aef\u0af1\7\u02ac\2\2\u0af0\u0aef\3\2\2\2\u0af0\u0af1\3\2\2\2\u0af1"+
		"\u0af2\3\2\2\2\u0af2\u0af4\5\u0396\u01cc\2\u0af3\u0af0\3\2\2\2\u0af4\u0af5"+
		"\3\2\2\2\u0af5\u0af3\3\2\2\2\u0af5\u0af6\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7"+
		"\u0af9\7\u02a7\2\2\u0af8\u0afa\5\u0118\u008d\2\u0af9\u0af8\3\2\2\2\u0af9"+
		"\u0afa\3\2\2\2\u0afa\u0afc\3\2\2\2\u0afb\u0aee\3\2\2\2\u0afb\u0afc\3\2"+
		"\2\2\u0afc\u0afe\3\2\2\2\u0afd\u0aff\5\u011a\u008e\2\u0afe\u0afd\3\2\2"+
		"\2\u0afe\u0aff\3\2\2\2\u0aff\u0b01\3\2\2\2\u0b00\u0adb\3\2\2\2\u0b01\u0b04"+
		"\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0117\3\2\2\2\u0b04"+
		"\u0b02\3\2\2\2\u0b05\u0b06\t&\2\2\u0b06\u0b07\7\u014b\2\2\u0b07\u0b08"+
		"\7\u024c\2\2\u0b08\u0119\3\2\2\2\u0b09\u0b0a\7\u01a8\2\2\u0b0a\u0b0c\7"+
		"\u00e8\2\2\u0b0b\u0b0d\t\'\2\2\u0b0c\u0b0b\3\2\2\2\u0b0c\u0b0d\3\2\2\2"+
		"\u0b0d\u011b\3\2\2\2\u0b0e\u0b0f\7j\2\2\u0b0f\u0b10\7\u012d\2\2\u0b10"+
		"\u0b11\7\u0255\2\2\u0b11\u0b14\5\u0356\u01ac\2\u0b12\u0b13\7\u0169\2\2"+
		"\u0b13\u0b15\5\u033c\u019f\2\u0b14\u0b12\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15"+
		"\u0b2a\3\2\2\2\u0b16\u0b17\7\u016f\2\2\u0b17\u0b18\7\u019a\2\2\u0b18\u0b1c"+
		"\7\u021d\2\2\u0b19\u0b1a\t(\2\2\u0b1a\u0b1b\7\u01b3\2\2\u0b1b\u0b1d\7"+
		"\u019c\2\2\u0b1c\u0b19\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b2b\3\2\2\2"+
		"\u0b1e\u0b20\5\u0132\u009a\2\u0b1f\u0b1e\3\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20"+
		"\u0b22\3\2\2\2\u0b21\u0b23\t%\2\2\u0b22\u0b21\3\2\2\2\u0b22\u0b23\3\2"+
		"\2\2\u0b23\u0b25\3\2\2\2\u0b24\u0b26\5\u0114\u008b\2\u0b25\u0b24\3\2\2"+
		"\2\u0b25\u0b26\3\2\2\2\u0b26\u0b28\3\2\2\2\u0b27\u0b29\5\u0112\u008a\2"+
		"\u0b28\u0b27\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2b\3\2\2\2\u0b2a\u0b16"+
		"\3\2\2\2\u0b2a\u0b1f\3\2\2\2\u0b2b\u0b3d\3\2\2\2\u0b2c\u0b2d\7\u024a\2"+
		"\2\u0b2d\u0b37\7\u00ee\2\2\u0b2e\u0b32\5\u012a\u0096\2\u0b2f\u0b30\7\u021c"+
		"\2\2\u0b30\u0b32\5\u0392\u01ca\2\u0b31\u0b2e\3\2\2\2\u0b31\u0b2f\3\2\2"+
		"\2\u0b32\u0b33\3\2\2\2\u0b33\u0b31\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b36"+
		"\3\2\2\2\u0b35\u0b31\3\2\2\2\u0b36\u0b39\3\2\2\2\u0b37\u0b35\3\2\2\2\u0b37"+
		"\u0b38\3\2\2\2\u0b38\u0b3e\3\2\2\2\u0b39\u0b37\3\2\2\2\u0b3a\u0b3b\7\u024a"+
		"\2\2\u0b3b\u0b3c\7\u0158\2\2\u0b3c\u0b3e\7\u00ee\2\2\u0b3d\u0b2c\3\2\2"+
		"\2\u0b3d\u0b3a\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b40\3\2\2\2\u0b3f\u0b41"+
		"\5\u011e\u0090\2\u0b40\u0b3f\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b44\3"+
		"\2\2\2\u0b42\u0b43\7\u00cf\2\2\u0b43\u0b45\7\u0244\2\2\u0b44\u0b42\3\2"+
		"\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b49\3\2\2\2\u0b46\u0b47\t\b\2\2\u0b47"+
		"\u0b48\7\u01a9\2\2\u0b48\u0b4a\7\u01cd\2\2\u0b49\u0b46\3\2\2\2\u0b49\u0b4a"+
		"\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b\u0b4c\7\24\2\2\u0b4c\u0b4d\5\u01ea"+
		"\u00f6\2\u0b4d\u0b4e\7\u02b8\2\2\u0b4e\u011d\3\2\2\2\u0b4f\u0b50\7\u014a"+
		"\2\2\u0b50\u0b77\7\u01b8\2\2\u0b51\u0b72\7\u01b8\2\2\u0b52\u0b73\t)\2"+
		"\2\u0b53\u0b54\7\u016f\2\2\u0b54\u0b73\t*\2\2\u0b55\u0b56\7\u0204\2\2"+
		"\u0b56\u0b59\7\u025f\2\2\u0b57\u0b59\7\u014c\2\2\u0b58\u0b55\3\2\2\2\u0b58"+
		"\u0b57\3\2\2\2\u0b59\u0b73\3\2\2\2\u0b5a\u0b5e\7\u025f\2\2\u0b5b\u0b5c"+
		"\7\u019f\2\2\u0b5c\u0b5f\7\u010b\2\2\u0b5d\u0b5f\7\u01d3\2\2\u0b5e\u0b5b"+
		"\3\2\2\2\u0b5e\u0b5d\3\2\2\2\u0b5f\u0b73\3\2\2\2\u0b60\u0b6d\7\u024a\2"+
		"\2\u0b61\u0b63\7\u0082\2\2\u0b62\u0b64\t+\2\2\u0b63\u0b62\3\2\2\2\u0b63"+
		"\u0b64\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b66\7\u01d1\2\2\u0b66\u0b6e"+
		"\7\u01e2\2\2\u0b67\u0b69\t+\2\2\u0b68\u0b67\3\2\2\2\u0b68\u0b69\3\2\2"+
		"\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b6b\7\u01d1\2\2\u0b6b\u0b6c\7\u01e2\2\2"+
		"\u0b6c\u0b6e\7\u02c3\2\2\u0b6d\u0b61\3\2\2\2\u0b6d\u0b68\3\2\2\2\u0b6e"+
		"\u0b73\3\2\2\2\u0b6f\u0b70\7\u024a\2\2\u0b70\u0b71\t,\2\2\u0b71\u0b73"+
		"\7^\2\2\u0b72\u0b52\3\2\2\2\u0b72\u0b53\3\2\2\2\u0b72\u0b58\3\2\2\2\u0b72"+
		"\u0b5a\3\2\2\2\u0b72\u0b60\3\2\2\2\u0b72\u0b6f\3\2\2\2\u0b73\u0b74\3\2"+
		"\2\2\u0b74\u0b72\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0b77\3\2\2\2\u0b76"+
		"\u0b4f\3\2\2\2\u0b76\u0b51\3\2\2\2\u0b77\u011f\3\2\2\2\u0b78\u0b7b\7j"+
		"\2\2\u0b79\u0b7a\7\u00d5\2\2\u0b7a\u0b7c\7\u021f\2\2\u0b7b\u0b79\3\2\2"+
		"\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d\u0b7e\7\u021d\2\2\u0b7e"+
		"\u0b9a\5\u0356\u01ac\2\u0b7f\u0b84\7\u02a6\2\2\u0b80\u0b82\7\u02ac\2\2"+
		"\u0b81\u0b80\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83\u0b85"+
		"\5\u0124\u0093\2\u0b84\u0b81\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b84\3"+
		"\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b95\3\2\2\2\u0b88\u0b8b\7\u02ac\2\2"+
		"\u0b89\u0b8a\7]\2\2\u0b8a\u0b8c\5\u0338\u019d\2\u0b8b\u0b89\3\2\2\2\u0b8b"+
		"\u0b8c\3\2\2\2\u0b8c\u0b91\3\2\2\2\u0b8d\u0b92\5\u0154\u00ab\2\u0b8e\u0b92"+
		"\5\u014c\u00a7\2\u0b8f\u0b92\5\u0152\u00aa\2\u0b90\u0b92\5\u0144\u00a3"+
		"\2\u0b91\u0b8d\3\2\2\2\u0b91\u0b8e\3\2\2\2\u0b91\u0b8f\3\2\2\2\u0b91\u0b90"+
		"\3\2\2\2\u0b92\u0b94\3\2\2\2\u0b93\u0b88\3\2\2\2\u0b94\u0b97\3\2\2\2\u0b95"+
		"\u0b93\3\2\2\2\u0b95\u0b96\3\2\2\2\u0b96\u0b98\3\2\2\2\u0b97\u0b95\3\2"+
		"\2\2\u0b98\u0b99\7\u02a7\2\2\u0b99\u0b9b\3\2\2\2\u0b9a\u0b7f\3\2\2\2\u0b9a"+
		"\u0b9b\3\2\2\2\u0b9b\u0ba0\3\2\2\2\u0b9c\u0b9d\7\u016f\2\2\u0b9d\u0b9e"+
		"\7R\2\2\u0b9e\u0b9f\t-\2\2\u0b9f\u0ba1\7\u01d5\2\2\u0ba0\u0b9c\3\2\2\2"+
		"\u0ba0\u0ba1\3\2\2\2\u0ba1\u0ba3\3\2\2\2\u0ba2\u0ba4\5\u0132\u009a\2\u0ba3"+
		"\u0ba2\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0ba6\3\2\2\2\u0ba5\u0ba7\5\u0128"+
		"\u0095\2\u0ba6\u0ba5\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0ba9\3\2\2\2\u0ba8"+
		"\u0baa\5\u0122\u0092\2\u0ba9\u0ba8\3\2\2\2\u0ba9\u0baa\3\2\2\2\u0baa\u0bac"+
		"\3\2\2\2\u0bab\u0bad\5\u0134\u009b\2\u0bac\u0bab\3\2\2\2\u0bac\u0bad\3"+
		"\2\2\2\u0bad\u0baf\3\2\2\2\u0bae\u0bb0\5\u0136\u009c\2\u0baf\u0bae\3\2"+
		"\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bb3\3\2\2\2\u0bb1\u0bb2\7\24\2\2\u0bb2"+
		"\u0bb4\5\u01ea\u00f6\2\u0bb3\u0bb1\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb5"+
		"\3\2\2\2\u0bb5\u0bb6\7\u02b8\2\2\u0bb6\u0121\3\2\2\2\u0bb7\u0bb8\7\u0183"+
		"\2\2\u0bb8\u0bb9\79\2\2\u0bb9\u0bba\7\u01ac\2\2\u0bba\u0bcd\5\u0366\u01b4"+
		"\2\u0bbb\u0bbc\7\u0100\2\2\u0bbc\u0bbd\7\u02a6\2\2\u0bbd\u0bbe\5\u029c"+
		"\u014f\2\u0bbe\u0bcb\7\u02a7\2\2\u0bbf\u0bc0\7\u020b\2\2\u0bc0\u0bc1\7"+
		"\u00f4\2\2\u0bc1\u0bc6\7\u02a6\2\2\u0bc2\u0bc4\7\u02ac\2\2\u0bc3\u0bc2"+
		"\3\2\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bc7\7\u02c3\2"+
		"\2\u0bc6\u0bc3\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bc6\3\2\2\2\u0bc8\u0bc9"+
		"\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bcc\7\u02a7\2\2\u0bcb\u0bbf\3\2\2"+
		"\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bce\3\2\2\2\u0bcd\u0bbb\3\2\2\2\u0bcd\u0bce"+
		"\3\2\2\2\u0bce\u0bcf\3\2\2\2\u0bcf\u0bfe\7\u02a6\2\2\u0bd0\u0bd2\7\u02ac"+
		"\2\2\u0bd1\u0bd0\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd3\3\2\2\2\u0bd3"+
		"\u0bd4\7\u0183\2\2\u0bd4\u0bd5\7\u02c3\2\2\u0bd5\u0bd6\7\u024c\2\2\u0bd6"+
		"\u0bd7\7\u0111\2\2\u0bd7\u0bd8\7\u0220\2\2\u0bd8\u0be9\7\u02a6\2\2\u0bd9"+
		"\u0bdb\7\u02ac\2\2\u0bda\u0bd9\3\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0bdc"+
		"\3\2\2\2\u0bdc\u0bea\7\u02a2\2\2\u0bdd\u0bdf\7\u02ac\2\2\u0bde\u0bdd\3"+
		"\2\2\2\u0bde\u0bdf\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0bea\5\u02cc\u0167"+
		"\2\u0be1\u0be3\7\u02ac\2\2\u0be2\u0be1\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3"+
		"\u0be4\3\2\2\2\u0be4\u0bea\5\u038a\u01c6\2\u0be5\u0be7\7\u02ac\2\2\u0be6"+
		"\u0be5\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0bea\7\u012f"+
		"\2\2\u0be9\u0bda\3\2\2\2\u0be9\u0bde\3\2\2\2\u0be9\u0be2\3\2\2\2\u0be9"+
		"\u0be6\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0be9\3\2\2\2\u0beb\u0bec\3\2"+
		"\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0bf0\7\u02a7\2\2\u0bee\u0bef\7\u021c\2"+
		"\2\u0bef\u0bf1\5\u0392\u01ca\2\u0bf0\u0bee\3\2\2\2\u0bf0\u0bf1\3\2\2\2"+
		"\u0bf1\u0bf6\3\2\2\2\u0bf2\u0bf3\7\u016f\2\2\u0bf3\u0bf4\7R\2\2\u0bf4"+
		"\u0bf5\t-\2\2\u0bf5\u0bf7\7\u01d5\2\2\u0bf6\u0bf2\3\2\2\2\u0bf6\u0bf7"+
		"\3\2\2\2\u0bf7\u0bf9\3\2\2\2\u0bf8\u0bfa\5\u012e\u0098\2\u0bf9\u0bf8\3"+
		"\2\2\2\u0bf9\u0bfa\3\2\2\2\u0bfa\u0bfc\3\2\2\2\u0bfb\u0bfd\5\u012a\u0096"+
		"\2\u0bfc\u0bfb\3\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0bff\3\2\2\2\u0bfe\u0bd1"+
		"\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0bfe\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01"+
		"\u0c02\3\2\2\2\u0c02\u0c03\7\u02a7\2\2\u0c03\u0123\3\2\2\2\u0c04\u0c05"+
		"\5\u0354\u01ab\2\u0c05\u0c07\5\u0376\u01bc\2\u0c06\u0c08\7\u01fc\2\2\u0c07"+
		"\u0c06\3\2\2\2\u0c07\u0c08\3\2\2\2\u0c08\u0c0b\3\2\2\2\u0c09\u0c0a\7\u0082"+
		"\2\2\u0c0a\u0c0c\5\u029c\u014f\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0c\3\2\2"+
		"\2\u0c0c\u0c20\3\2\2\2\u0c0d\u0c10\7\u00a3\2\2\u0c0e\u0c0f\7\u024a\2\2"+
		"\u0c0f\u0c11\7\u02a2\2\2\u0c10\u0c0e\3\2\2\2\u0c10\u0c11\3\2\2\2\u0c11"+
		"\u0c15\3\2\2\2\u0c12\u0c13\7\u00e3\2\2\u0c13\u0c14\79\2\2\u0c14\u0c16"+
		"\7\u02c3\2\2\u0c15\u0c12\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c18\3\2\2"+
		"\2\u0c17\u0c19\7\u02a2\2\2\u0c18\u0c17\3\2\2\2\u0c18\u0c19\3\2\2\2\u0c19"+
		"\u0c1e\3\2\2\2\u0c1a\u0c1c\7\u0158\2\2\u0c1b\u0c1a\3\2\2\2\u0c1b\u0c1c"+
		"\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1f\7\u01d7\2\2\u0c1e\u0c1b\3\2\2"+
		"\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c21\3\2\2\2\u0c20\u0c0d\3\2\2\2\u0c20\u0c21"+
		"\3\2\2\2\u0c21\u0c24\3\2\2\2\u0c22\u0c23\7\u015e\2\2\u0c23\u0c25\7\u0161"+
		"\2\2\u0c24\u0c22\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c27\3\2\2\2\u0c26"+
		"\u0c28\t\b\2\2\u0c27\u0c26\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0125\3\2"+
		"\2\2\u0c29\u0c2b\7\u02a0\2\2\u0c2a\u0c2c\7\u02c3\2\2\u0c2b\u0c2a\3\2\2"+
		"\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u0127\3\2\2\2\u0c2d\u0c37\7X\2\2\u0c2e\u0c38"+
		"\7$\2\2\u0c2f\u0c35\7\u00cf\2\2\u0c30\u0c36\7\u016c\2\2\u0c31\u0c33\t"+
		".\2\2\u0c32\u0c34\t/\2\2\u0c33\u0c32\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34"+
		"\u0c36\3\2\2\2\u0c35\u0c30\3\2\2\2\u0c35\u0c31\3\2\2\2\u0c36\u0c38\3\2"+
		"\2\2\u0c37\u0c2e\3\2\2\2\u0c37\u0c2f\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38"+
		"\u0c3b\3\2\2\2\u0c39\u0c3b\7\u014f\2\2\u0c3a\u0c2d\3\2\2\2\u0c3a\u0c39"+
		"\3\2\2\2\u0c3b\u0129\3\2\2\2\u0c3c\u0c3d\7\u0187\2\2\u0c3d\u0c44\7\u02a0"+
		"\2\2\u0c3e\u0c3f\7\u0189\2\2\u0c3f\u0c44\7\u02a0\2\2\u0c40\u0c41\7\u00f7"+
		"\2\2\u0c41\u0c44\7\u02a0\2\2\u0c42\u0c44\5\u012c\u0097\2\u0c43\u0c3c\3"+
		"\2\2\2\u0c43\u0c3e\3\2\2\2\u0c43\u0c40\3\2\2\2\u0c43\u0c42\3\2\2\2\u0c44"+
		"\u0c45\3\2\2\2\u0c45\u0c43\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46\u012b\3\2"+
		"\2\2\u0c47\u0c48\7\u020a\2\2\u0c48\u0c60\7\u02a6\2\2\u0c49\u0c4a\7\u00f5"+
		"\2\2\u0c4a\u0c61\5\u0126\u0094\2\u0c4b\u0c4c\7\u014c\2\2\u0c4c\u0c61\5"+
		"\u0126\u0094\2\u0c4d\u0c4e\7\u0134\2\2\u0c4e\u0c61\t\60\2\2\u0c4f\u0c50"+
		"\7\u0188\2\2\u0c50\u0c61\7\u02a0\2\2\u0c51\u0c52\7\u00d1\2\2\u0c52\u0c61"+
		"\7\u02a0\2\2\u0c53\u0c54\7\u00d0\2\2\u0c54\u0c55\7\u00db\2\2\u0c55\u0c61"+
		"\7\u02a0\2\2\u0c56\u0c59\7\u0172\2\2\u0c57\u0c5a\5\u0126\u0094\2\u0c58"+
		"\u0c5a\7\u0161\2\2\u0c59\u0c57\3\2\2\2\u0c59\u0c58\3\2\2\2\u0c5a\u0c61"+
		"\3\2\2\2\u0c5b\u0c5c\7\66\2\2\u0c5c\u0c61\t\61\2\2\u0c5d\u0c5e\7\u00c7"+
		"\2\2\u0c5e\u0c61\t\62\2\2\u0c5f\u0c61\7\u00a3\2\2\u0c60\u0c49\3\2\2\2"+
		"\u0c60\u0c4b\3\2\2\2\u0c60\u0c4d\3\2\2\2\u0c60\u0c4f\3\2\2\2\u0c60\u0c51"+
		"\3\2\2\2\u0c60\u0c53\3\2\2\2\u0c60\u0c56\3\2\2\2\u0c60\u0c5b\3\2\2\2\u0c60"+
		"\u0c5d\3\2\2\2\u0c60\u0c5f\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c60\3\2"+
		"\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c65\7\u02a7\2\2\u0c65"+
		"\u012d\3\2\2\2\u0c66\u0c67\7\u01e2\2\2\u0c67\u0c68\7k\2\2\u0c68\u0c69"+
		"\t\33\2\2\u0c69\u012f\3\2\2\2\u0c6a\u0c6f\5\u012a\u0096\2\u0c6b\u0c6c"+
		"\7\u021c\2\2\u0c6c\u0c6f\5\u0392\u01ca\2\u0c6d\u0c6f\5\u00f6|\2\u0c6e"+
		"\u0c6a\3\2\2\2\u0c6e\u0c6b\3\2\2\2\u0c6e\u0c6d\3\2\2\2\u0c6f\u0c70\3\2"+
		"\2\2\u0c70\u0c6e\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0131\3\2\2\2\u0c72"+
		"\u0c74\5\u012e\u0098\2\u0c73\u0c72\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74\u0c75"+
		"\3\2\2\2\u0c75\u0c77\5\u0130\u0099\2\u0c76\u0c78\5\u0128\u0095\2\u0c77"+
		"\u0c76\3\2\2\2\u0c77\u0c78\3\2\2\2\u0c78\u0133\3\2\2\2\u0c79\u0c7b\t\b"+
		"\2\2\u0c7a\u0c79\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c"+
		"\u0c7d\7\u01d4\2\2\u0c7d\u0c7e\7\u013f\2\2\u0c7e\u0135\3\2\2\2\u0c7f\u0c80"+
		"\7\u00c6\2\2\u0c80\u0c81\7\22\2\2\u0c81\u0c86\7\u02c3\2\2\u0c82\u0c83"+
		"\7\u0158\2\2\u0c83\u0c84\7\u00c6\2\2\u0c84\u0c86\7\22\2\2\u0c85\u0c7f"+
		"\3\2\2\2\u0c85\u0c82\3\2\2\2\u0c86\u0137\3\2\2\2\u0c87\u0c88\7\u0097\2"+
		"\2\u0c88\u0c89\7\u021d\2\2\u0c89\u0c8a\5\u0356\u01ac\2\u0c8a\u0c8b\7\u02b8"+
		"\2\2\u0c8b\u0139\3\2\2\2\u0c8c\u0c8d\7Q\2\2\u0c8d\u0c8e\7\u016f\2\2\u0c8e"+
		"\u0c8f\7O\2\2\u0c8f\u0c90\5\u0356\u01ac\2\u0c90\u0c91\7\u029f\2\2\u0c91"+
		"\u0c92\5\u0354\u01ab\2\u0c92\u0c93\7\u0104\2\2\u0c93\u0c94\5\u038e\u01c8"+
		"\2\u0c94\u013b\3\2\2\2\u0c95\u0c98\7j\2\2\u0c96\u0c97\7\u0177\2\2\u0c97"+
		"\u0c99\7\u01be\2\2\u0c98\u0c96\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u0c9a"+
		"\3\2\2\2\u0c9a\u0c9b\7\u01a7\2\2\u0c9b\u0c9c\7\u0214\2\2\u0c9c\u0c9d\5"+
		"\u035a\u01ae\2\u0c9d\u0ca1\7\u00cf\2\2\u0c9e\u0c9f\5\u0320\u0191\2\u0c9f"+
		"\u0ca0\7\u029f\2\2\u0ca0\u0ca2\3\2\2\2\u0ca1\u0c9e\3\2\2\2\u0ca1\u0ca2"+
		"\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca6\5\u035c\u01af\2\u0ca4\u0ca5\7"+
		"\u02ae\2\2\u0ca5\u0ca7\5\u0352\u01aa\2\u0ca6\u0ca4\3\2\2\2\u0ca6\u0ca7"+
		"\3\2\2\2\u0ca7\u0cc0\3\2\2\2\u0ca8\u0cab\7j\2\2\u0ca9\u0caa\7\u0177\2"+
		"\2\u0caa\u0cac\7\u01be\2\2\u0cab\u0ca9\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac"+
		"\u0cad\3\2\2\2\u0cad\u0cb1\7\u0214\2\2\u0cae\u0caf\5\u0320\u0191\2\u0caf"+
		"\u0cb0\7\u029f\2\2\u0cb0\u0cb2\3\2\2\2\u0cb1\u0cae\3\2\2\2\u0cb1\u0cb2"+
		"\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb4\5\u035a\u01ae\2\u0cb4\u0cb8\7"+
		"\u00cf\2\2\u0cb5\u0cb6\5\u0320\u0191\2\u0cb6\u0cb7\7\u029f\2\2\u0cb7\u0cb9"+
		"\3\2\2\2\u0cb8\u0cb5\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba"+
		"\u0cbd\5\u035c\u01af\2\u0cbb\u0cbc\7\u02ae\2\2\u0cbc\u0cbe\5\u0352\u01aa"+
		"\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0cc0\3\2\2\2\u0cbf\u0c95"+
		"\3\2\2\2\u0cbf\u0ca8\3\2\2\2\u0cc0\u013d\3\2\2\2\u0cc1\u0cc2\7Q\2\2\u0cc2"+
		"\u0cc3\7\u016f\2\2\u0cc3\u0cc4\7\u021d\2\2\u0cc4\u0cc5\5\u0356\u01ac\2"+
		"\u0cc5\u0cc6\7\u0104\2\2\u0cc6\u0cc7\5\u038e\u01c8\2\u0cc7\u013f\3\2\2"+
		"\2\u0cc8\u0cc9\7\16\2\2\u0cc9\u0cca\7\u021d\2\2\u0cca\u0ccf\5\u0356\u01ac"+
		"\2\u0ccb\u0cd0\5\u0142\u00a2\2\u0ccc\u0cd0\5\u0146\u00a4\2\u0ccd\u0cd0"+
		"\5\u0148\u00a5\2\u0cce\u0cd0\5\u014a\u00a6\2\u0ccf\u0ccb\3\2\2\2\u0ccf"+
		"\u0ccc\3\2\2\2\u0ccf\u0ccd\3\2\2\2\u0ccf\u0cce\3\2\2\2\u0cd0\u0141\3\2"+
		"\2\2\u0cd1\u0cd4\7\5\2\2\u0cd2\u0cd3\7]\2\2\u0cd3\u0cd5\5\u0338\u019d"+
		"\2\u0cd4\u0cd2\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cda\3\2\2\2\u0cd6\u0cdb"+
		"\5\u0154\u00ab\2\u0cd7\u0cdb\5\u014c\u00a7\2\u0cd8\u0cdb\5\u0152\u00aa"+
		"\2\u0cd9\u0cdb\5\u0144\u00a3\2\u0cda\u0cd6\3\2\2\2\u0cda\u0cd7\3\2\2\2"+
		"\u0cda\u0cd8\3\2\2\2\u0cda\u0cd9\3\2\2\2\u0cdb\u0143\3\2\2\2\u0cdc\u0cdd"+
		"\7F\2\2\u0cdd\u0cde\7\u02a6\2\2\u0cde\u0cdf\5\u0298\u014d\2\u0cdf\u0ce1"+
		"\7\u02a7\2\2\u0ce0\u0ce2\7\u0091\2\2\u0ce1\u0ce0\3\2\2\2\u0ce1\u0ce2\3"+
		"\2\2\2\u0ce2\u0145\3\2\2\2\u0ce3\u0ce4\7\u0097\2\2\u0ce4\u0ce5\7]\2\2"+
		"\u0ce5\u0ce6\5\u0338\u019d\2\u0ce6\u0147\3\2\2\2\u0ce7\u0ce8\7\u00a1\2"+
		"\2\u0ce8\u0ce9\7]\2\2\u0ce9\u0cea\5\u0338\u019d\2\u0cea\u0149\3\2\2\2"+
		"\u0ceb\u0cec\7\u0091\2\2\u0cec\u0ced\7]\2\2\u0ced\u0cee\5\u0338\u019d"+
		"\2\u0cee\u014b\3\2\2\2\u0cef\u0cf0\7\u00ce\2\2\u0cf0\u0cf1\7\u010b\2\2"+
		"\u0cf1\u0cf2\5\u0366\u01b4\2\u0cf2\u0cf4\5\u014e\u00a8\2\u0cf3\u0cf5\5"+
		"\u0150\u00a9\2\u0cf4\u0cf3\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5\u014d\3\2"+
		"\2\2\u0cf6\u0cf7\7\u01b5\2\2\u0cf7\u0cf8\5\u0356\u01ac\2\u0cf8\u0cf9\5"+
		"\u0366\u01b4\2\u0cf9\u014f\3\2\2\2\u0cfa\u0cfb\7\u016f\2\2\u0cfb\u0cff"+
		"\7\u0089\2\2\u0cfc\u0d00\7>\2\2\u0cfd\u0cfe\7\u01ec\2\2\u0cfe\u0d00\7"+
		"\u0161\2\2\u0cff\u0cfc\3\2\2\2\u0cff\u0cfd\3\2\2\2\u0d00\u0151\3\2\2\2"+
		"\u0d01\u0d02\7\u023e\2\2\u0d02\u0d03\5\u0366\u01b4\2\u0d03\u0153\3\2\2"+
		"\2\u0d04\u0d05\7\u019f\2\2\u0d05\u0d06\7\u010b\2\2\u0d06\u0d07\5\u0366"+
		"\u01b4\2\u0d07\u0155\3\2\2\2\u0d08\u0d09\7\177\2\2\u0d09\u0d0b\5\u016a"+
		"\u00b6\2\u0d0a\u0d08\3\2\2\2\u0d0a\u0d0b\3\2\2\2\u0d0b\u0d0c\3\2\2\2\u0d0c"+
		"\u0d0d\7(\2\2\u0d0d\u0d14\5\u0188\u00c5\2\u0d0e\u0d10\7\u00ae\2\2\u0d0f"+
		"\u0d11\5\u01b8\u00dd\2\u0d10\u0d0f\3\2\2\2\u0d11\u0d12\3\2\2\2\u0d12\u0d10"+
		"\3\2\2\2\u0d12\u0d13\3\2\2\2\u0d13\u0d15\3\2\2\2\u0d14\u0d0e\3\2\2\2\u0d14"+
		"\u0d15\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d17\7\u00a5\2\2\u0d17\u0d18"+
		"\7\u02b8\2\2\u0d18\u0157\3\2\2\2\u0d19\u0d1a\7\35\2\2\u0d1a\u0d1b\t\63"+
		"\2\2\u0d1b\u0159\3\2\2\2\u0d1c\u0d1d\5\u0390\u01c9\2\u0d1d\u0d1e\7\u02ba"+
		"\2\2\u0d1e\u0d1f\5\u029c\u014f\2\u0d1f\u015b\3\2\2\2\u0d20\u0d23\7\u010c"+
		"\2\2\u0d21\u0d24\5\u015e\u00b0\2\u0d22\u0d24\5\u0160\u00b1\2\u0d23\u0d21"+
		"\3\2\2\2\u0d23\u0d22\3\2\2\2\u0d24\u015d\3\2\2\2\u0d25\u0d26\7\u0107\2"+
		"\2\u0d26\u0d27\7\u0141\2\2\u0d27\u0d28\7\u02a2\2\2\u0d28\u015f\3\2\2\2"+
		"\u0d29\u0d2c\7I\2\2\u0d2a\u0d2b\7\u0141\2\2\u0d2b\u0d2d\7\u02a2\2\2\u0d2c"+
		"\u0d2a\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d2f\7\u0113"+
		"\2\2\u0d2f\u0d31\5\u0390\u01c9\2\u0d30\u0d32\5\u0162\u00b2\2\u0d31\u0d30"+
		"\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d35\3\2\2\2\u0d33\u0d34\7\u025f\2"+
		"\2\u0d34\u0d36\7c\2\2\u0d35\u0d33\3\2\2\2\u0d35\u0d36\3\2\2\2\u0d36\u0d38"+
		"\3\2\2\2\u0d37\u0d39\5\u0164\u00b3\2\u0d38\u0d37\3\2\2\2\u0d38\u0d39\3"+
		"\2\2\2\u0d39\u0161\3\2\2\2\u0d3a\u0d3b\7\n\2\2\u0d3b\u0d3c\7\u00f4\2\2"+
		"\u0d3c\u0d3d\7\u02a6\2\2\u0d3d\u0d3e\5\u029a\u014e\2\u0d3e\u0d3f\7\u02a7"+
		"\2\2\u0d3f\u0163\3\2\2\2\u0d40\u0d41\7\u0181\2\2\u0d41\u0d46\7\u02a6\2"+
		"\2\u0d42\u0d47\5\u029a\u014e\2\u0d43\u0d44\7\u029f\2\2\u0d44\u0d45\7\u029f"+
		"\2\2\u0d45\u0d47\7\u029f\2\2\u0d46\u0d42\3\2\2\2\u0d46\u0d43\3\2\2\2\u0d47"+
		"\u0d48\3\2\2\2\u0d48\u0d49\7\u02a7\2\2\u0d49\u0165\3\2\2\2\u0d4a\u0d4e"+
		"\5\u0328\u0195\2\u0d4b\u0d4d\t\64\2\2\u0d4c\u0d4b\3\2\2\2\u0d4d\u0d50"+
		"\3\2\2\2\u0d4e\u0d4c\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u0d52\3\2\2\2\u0d50"+
		"\u0d4e\3\2\2\2\u0d51\u0d53\5\u0374\u01bb\2\u0d52\u0d51\3\2\2\2\u0d52\u0d53"+
		"\3\2\2\2\u0d53\u0d55\3\2\2\2\u0d54\u0d56\5\u0168\u00b5\2\u0d55\u0d54\3"+
		"\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0167\3\2\2\2\u0d57\u0d58\t\65\2\2\u0d58"+
		"\u0d59\5\u029c\u014f\2\u0d59\u0169\3\2\2\2\u0d5a\u0d5c\5\u016c\u00b7\2"+
		"\u0d5b\u0d5a\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5b\3\2\2\2\u0d5d\u0d5e"+
		"\3\2\2\2\u0d5e\u016b\3\2\2\2\u0d5f\u0d6a\5\u016e\u00b8\2\u0d60\u0d6a\5"+
		"\u0170\u00b9\2\u0d61\u0d6a\5\u0172\u00ba\2\u0d62\u0d6a\5\u0176\u00bc\2"+
		"\u0d63\u0d6a\5\u0178\u00bd\2\u0d64\u0d6a\5\u0180\u00c1\2\u0d65\u0d6a\5"+
		"&\24\2\u0d66\u0d6a\5(\25\2\u0d67\u0d6a\5\62\32\2\u0d68\u0d6a\5\60\31\2"+
		"\u0d69\u0d5f\3\2\2\2\u0d69\u0d60\3\2\2\2\u0d69\u0d61\3\2\2\2\u0d69\u0d62"+
		"\3\2\2\2\u0d69\u0d63\3\2\2\2\u0d69\u0d64\3\2\2\2\u0d69\u0d65\3\2\2\2\u0d69"+
		"\u0d66\3\2\2\2\u0d69\u0d67\3\2\2\2\u0d69\u0d68\3\2\2\2\u0d6a\u016d\3\2"+
		"\2\2\u0d6b\u0d6d\5\u0390\u01c9\2\u0d6c\u0d6e\7\\\2\2\u0d6d\u0d6c\3\2\2"+
		"\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d72\5\u0374\u01bb\2"+
		"\u0d70\u0d71\7\u015e\2\2\u0d71\u0d73\7\u0161\2\2\u0d72\u0d70\3\2\2\2\u0d72"+
		"\u0d73\3\2\2\2\u0d73\u0d75\3\2\2\2\u0d74\u0d76\5\u0168\u00b5\2\u0d75\u0d74"+
		"\3\2\2\2\u0d75\u0d76\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d78\7\u02b8\2"+
		"\2\u0d78\u016f\3\2\2\2\u0d79\u0d7a\7\u0210\2\2\u0d7a\u0d7b\5\u0390\u01c9"+
		"\2\u0d7b\u0d7c\7\u0104\2\2\u0d7c\u0d82\5\u0374\u01bb\2\u0d7d\u0d7e\7\u01ac"+
		"\2\2\u0d7e\u0d7f\5\u029c\u014f\2\u0d7f\u0d80\7\u029e\2\2\u0d80\u0d81\5"+
		"\u029c\u014f\2\u0d81\u0d83\3\2\2\2\u0d82\u0d7d\3\2\2\2\u0d82\u0d83\3\2"+
		"\2\2\u0d83\u0d86\3\2\2\2\u0d84\u0d85\7\u015e\2\2\u0d85\u0d87\7\u0161\2"+
		"\2\u0d86\u0d84\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0d88\3\2\2\2\u0d88\u0d89"+
		"\7\u02b8\2\2\u0d89\u0171\3\2\2\2\u0d8a\u0d8b\7p\2\2\u0d8b\u0d97\5\u0390"+
		"\u01c9\2\u0d8c\u0d91\7\u02a6\2\2\u0d8d\u0d8f\7\u02ac\2\2\u0d8e\u0d8d\3"+
		"\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90\u0d92\5\u0174\u00bb"+
		"\2\u0d91\u0d8e\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d91\3\2\2\2\u0d93\u0d94"+
		"\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95\u0d96\7\u02a7\2\2\u0d96\u0d98\3\2\2"+
		"\2\u0d97\u0d8c\3\2\2\2\u0d97\u0d98\3\2\2\2\u0d98\u0d9b\3\2\2\2\u0d99\u0d9a"+
		"\7\u01c9\2\2\u0d9a\u0d9c\5\u0374\u01bb\2\u0d9b\u0d99\3\2\2\2\u0d9b\u0d9c"+
		"\3\2\2\2\u0d9c\u0d9f\3\2\2\2\u0d9d\u0d9e\7\u0104\2\2\u0d9e\u0da0\5\u01e0"+
		"\u00f1\2\u0d9f\u0d9d\3\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0\u0da1\3\2\2\2\u0da1"+
		"\u0da2\7\u02b8\2\2\u0da2\u0173\3\2\2\2\u0da3\u0da8\5\u0328\u0195\2\u0da4"+
		"\u0da6\7\u00f4\2\2\u0da5\u0da4\3\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u0da7"+
		"\3\2\2\2\u0da7\u0da9\5\u0374\u01bb\2\u0da8\u0da5\3\2\2\2\u0da8\u0da9\3"+
		"\2\2\2\u0da9\u0dab\3\2\2\2\u0daa\u0dac\5\u0168\u00b5\2\u0dab\u0daa\3\2"+
		"\2\2\u0dab\u0dac\3\2\2\2\u0dac\u0175\3\2\2\2\u0dad\u0dae\5\u0390\u01c9"+
		"\2\u0dae\u0daf\7\u00ae\2\2\u0daf\u0db0\7\u02b8\2\2\u0db0\u0177\3\2\2\2"+
		"\u0db1\u0dd0\7\u0199\2\2\u0db2\u0dd1\7\u01e8\2\2\u0db3\u0dd1\7\"\2\2\u0db4"+
		"\u0db5\7\u00af\2\2\u0db5\u0db6\7\u02a6\2\2\u0db6\u0db7\5\u0340\u01a1\2"+
		"\u0db7\u0db8\7\u02ac\2\2\u0db8\u0db9\5\u038c\u01c7\2\u0db9\u0dba\7\u02a7"+
		"\2\2\u0dba\u0dd1\3\2\2\2\u0dbb\u0dbc\7\u00f8\2\2\u0dbc\u0dbd\7\u02a6\2"+
		"\2\u0dbd\u0dbe\5\u0390\u01c9\2\u0dbe\u0dbf\7\u02ac\2\2\u0dbf\u0dc0\5\u029c"+
		"\u014f\2\u0dc0\u0dc1\7\u02a7\2\2\u0dc1\u0dd1\3\2\2\2\u0dc2\u0dc3\7\u01c3"+
		"\2\2\u0dc3\u0dc6\7\u02a6\2\2\u0dc4\u0dc7\5\u0390\u01c9\2\u0dc5\u0dc7\7"+
		"\u0082\2\2\u0dc6\u0dc4\3\2\2\2\u0dc6\u0dc5\3\2\2\2\u0dc7\u0dca\3\2\2\2"+
		"\u0dc8\u0dc9\7\u02ac\2\2\u0dc9\u0dcb\5\u0390\u01c9\2\u0dca\u0dc8\3\2\2"+
		"\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u0dca\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd\u0dce"+
		"\3\2\2\2\u0dce\u0dcf\7\u02a7\2\2\u0dcf\u0dd1\3\2\2\2\u0dd0\u0db2\3\2\2"+
		"\2\u0dd0\u0db3\3\2\2\2\u0dd0\u0db4\3\2\2\2\u0dd0\u0dbb\3\2\2\2\u0dd0\u0dc2"+
		"\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2\u0dd3\7\u02b8\2\2\u0dd3\u0179\3\2\2"+
		"\2\u0dd4\u0dd5\7\u01b0\2\2\u0dd5\u0dda\7\u02a6\2\2\u0dd6\u0dd8\7\u02ac"+
		"\2\2\u0dd7\u0dd6\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9"+
		"\u0ddb\5\u017c\u00bf\2\u0dda\u0dd7\3\2\2\2\u0ddb\u0ddc\3\2\2\2\u0ddc\u0dda"+
		"\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u0ddf\7\u02a7\2"+
		"\2\u0ddf\u017b\3\2\2\2\u0de0\u0de2\5\u0354\u01ab\2\u0de1\u0de3\5\u0374"+
		"\u01bb\2\u0de2\u0de1\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3\u0de6\3\2\2\2\u0de4"+
		"\u0de5\7\u015e\2\2\u0de5\u0de7\7\u0161\2\2\u0de6\u0de4\3\2\2\2\u0de6\u0de7"+
		"\3\2\2\2\u0de7\u0de9\3\2\2\2\u0de8\u0dea\5\u0168\u00b5\2\u0de9\u0de8\3"+
		"\2\2\2\u0de9\u0dea\3\2\2\2\u0dea\u017d\3\2\2\2\u0deb\u0dec\7\u01b7\2\2"+
		"\u0dec\u0def\7p\2\2\u0ded\u0dee\7\u01c9\2\2\u0dee\u0df0\5\u0374\u01bb"+
		"\2\u0def\u0ded\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u017f\3\2\2\2\u0df1\u0df2"+
		"\7\u0238\2\2\u0df2\u0df3\5\u0390\u01c9\2\u0df3\u0df8\7\u0104\2\2\u0df4"+
		"\u0df9\5\u0182\u00c2\2\u0df5\u0df9\5\u0186\u00c4\2\u0df6\u0df9\5\u017a"+
		"\u00be\2\u0df7\u0df9\5\u017e\u00c0\2\u0df8\u0df4\3\2\2\2\u0df8\u0df5\3"+
		"\2\2\2\u0df8\u0df6\3\2\2\2\u0df8\u0df7\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa"+
		"\u0dfb\7\u02b8\2\2\u0dfb\u0181\3\2\2\2\u0dfc\u0dfd\7\u021d\2\2\u0dfd\u0dfe"+
		"\7\u0169\2\2\u0dfe\u0e00\5\u0374\u01bb\2\u0dff\u0e01\5\u0184\u00c3\2\u0e00"+
		"\u0dff\3\2\2\2\u0e00\u0e01\3\2\2\2\u0e01\u0e04\3\2\2\2\u0e02\u0e03\7\u015e"+
		"\2\2\u0e03\u0e05\7\u0161\2\2\u0e04\u0e02\3\2\2\2\u0e04\u0e05\3\2\2\2\u0e05"+
		"\u0183\3\2\2\2\u0e06\u0e09\7\u00ed\2\2\u0e07\u0e09\7\u00ee\2\2\u0e08\u0e06"+
		"\3\2\2\2\u0e08\u0e07\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a\u0e0b\79\2\2\u0e0b"+
		"\u0e0c\5\u0374\u01bb\2\u0e0c\u0185\3\2\2\2\u0e0d\u0e11\7\u0251\2\2\u0e0e"+
		"\u0e0f\7\u0252\2\2\u0e0f\u0e11\7\23\2\2\u0e10\u0e0d\3\2\2\2\u0e10\u0e0e"+
		"\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e13\7\u02a6\2\2\u0e13\u0e14\5\u029c"+
		"\u014f\2\u0e14\u0e15\7\u02a7\2\2\u0e15\u0e16\7\u0169\2\2\u0e16\u0e19\5"+
		"\u0374\u01bb\2\u0e17\u0e18\7\u015e\2\2\u0e18\u0e1a\7\u0161\2\2\u0e19\u0e17"+
		"\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a\u0187\3\2\2\2\u0e1b\u0e1c\5\u018c\u00c7"+
		"\2\u0e1c\u0e1d\t\66\2\2\u0e1d\u0e20\3\2\2\2\u0e1e\u0e20\5\u018a\u00c6"+
		"\2\u0e1f\u0e1b\3\2\2\2\u0e1f\u0e1e\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e1f"+
		"\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0189\3\2\2\2\u0e23\u0e24\7\u02b6\2"+
		"\2\u0e24\u0e25\7\u02b6\2\2\u0e25\u0e26\5\u033a\u019e\2\u0e26\u0e27\7\u02b5"+
		"\2\2\u0e27\u0e28\7\u02b5\2\2\u0e28\u018b\3\2\2\2\u0e29\u0e2a\7j\2\2\u0e2a"+
		"\u0e3e\5\u018e\u00c8\2\u0e2b\u0e2c\7\u0235\2\2\u0e2c\u0e3e\5\u018e\u00c8"+
		"\2\u0e2d\u0e3e\5\u01b6\u00dc\2\u0e2e\u0e3e\5\u01bc\u00df\2\u0e2f\u0e3e"+
		"\5\u0190\u00c9\2\u0e30\u0e3e\5\u0192\u00ca\2\u0e31\u0e3e\5\u0194\u00cb"+
		"\2\u0e32\u0e3e\5\u0196\u00cc\2\u0e33\u0e3e\5\u0198\u00cd\2\u0e34\u0e3e"+
		"\5\u019e\u00d0\2\u0e35\u0e3e\5\u01a2\u00d2\2\u0e36\u0e3e\5\u01ac\u00d7"+
		"\2\u0e37\u0e3e\5\u01ae\u00d8\2\u0e38\u0e3e\5\u01b0\u00d9\2\u0e39\u0e3e"+
		"\5\u02bc\u015f\2\u0e3a\u0e3e\5\u01be\u00e0\2\u0e3b\u0e3e\5\u01b2\u00da"+
		"\2\u0e3c\u0e3e\5\u01b4\u00db\2\u0e3d\u0e29\3\2\2\2\u0e3d\u0e2b\3\2\2\2"+
		"\u0e3d\u0e2d\3\2\2\2\u0e3d\u0e2e\3\2\2\2\u0e3d\u0e2f\3\2\2\2\u0e3d\u0e30"+
		"\3\2\2\2\u0e3d\u0e31\3\2\2\2\u0e3d\u0e32\3\2\2\2\u0e3d\u0e33\3\2\2\2\u0e3d"+
		"\u0e34\3\2\2\2\u0e3d\u0e35\3\2\2\2\u0e3d\u0e36\3\2\2\2\u0e3d\u0e37\3\2"+
		"\2\2\u0e3d\u0e38\3\2\2\2\u0e3d\u0e39\3\2\2\2\u0e3d\u0e3a\3\2\2\2\u0e3d"+
		"\u0e3b\3\2\2\2\u0e3d\u0e3c\3\2\2\2\u0e3e\u018d\3\2\2\2\u0e3f\u0e41\n\67"+
		"\2\2\u0e40\u0e3f\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e40\3\2\2\2\u0e42"+
		"\u0e43\3\2\2\2\u0e43\u018f\3\2\2\2\u0e44\u0e47\5\u037e\u01c0\2\u0e45\u0e47"+
		"\5\u037c\u01bf\2\u0e46\u0e44\3\2\2\2\u0e46\u0e45\3\2\2\2\u0e47\u0e48\3"+
		"\2\2\2\u0e48\u0e49\7\u02af\2\2\u0e49\u0e4a\5\u029c\u014f\2\u0e4a\u0191"+
		"\3\2\2\2\u0e4b\u0e4d\7d\2\2\u0e4c\u0e4e\5\u033a\u019e\2\u0e4d\u0e4c\3"+
		"\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e\u0e51\3\2\2\2\u0e4f\u0e50\7\u025a\2\2"+
		"\u0e50\u0e52\5\u0298\u014d\2\u0e51\u0e4f\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52"+
		"\u0193\3\2\2\2\u0e53\u0e55\7\u00b7\2\2\u0e54\u0e56\5\u033a\u019e\2\u0e55"+
		"\u0e54\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e59\3\2\2\2\u0e57\u0e58\7\u025a"+
		"\2\2\u0e58\u0e5a\5\u0298\u014d\2\u0e59\u0e57\3\2\2\2\u0e59\u0e5a\3\2\2"+
		"\2\u0e5a\u0195\3\2\2\2\u0e5b\u0e5c\7\u00d7\2\2\u0e5c\u0e5d\5\u033a\u019e"+
		"\2\u0e5d\u0197\3\2\2\2\u0e5e\u0e5f\7\u00e6\2\2\u0e5f\u0e60\5\u0298\u014d"+
		"\2\u0e60\u0e61\7\u0221\2\2\u0e61\u0e65\5\u0188\u00c5\2\u0e62\u0e64\5\u019a"+
		"\u00ce\2\u0e63\u0e62\3\2\2\2\u0e64\u0e67\3\2\2\2\u0e65\u0e63\3\2\2\2\u0e65"+
		"\u0e66\3\2\2\2\u0e66\u0e69\3\2\2\2\u0e67\u0e65\3\2\2\2\u0e68\u0e6a\5\u019c"+
		"\u00cf\2\u0e69\u0e68\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b"+
		"\u0e6c\7\u00a5\2\2\u0e6c\u0e6d\7\u00e6\2\2\u0e6d\u0199\3\2\2\2\u0e6e\u0e6f"+
		"\7\u009f\2\2\u0e6f\u0e70\5\u0298\u014d\2\u0e70\u0e71\7\u0221\2\2\u0e71"+
		"\u0e72\5\u0188\u00c5\2\u0e72\u019b\3\2\2\2\u0e73\u0e74\7\u009e\2\2\u0e74"+
		"\u0e75\5\u0188\u00c5\2\u0e75\u019d\3\2\2\2\u0e76\u0e78\5\u018a\u00c6\2"+
		"\u0e77\u0e76\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u0e7d\3\2\2\2\u0e79\u0e7a"+
		"\7\u025c\2\2\u0e7a\u0e7e\5\u0298\u014d\2\u0e7b\u0e7c\7\u00cf\2\2\u0e7c"+
		"\u0e7e\5\u01a0\u00d1\2\u0e7d\u0e79\3\2\2\2\u0e7d\u0e7b\3\2\2\2\u0e7d\u0e7e"+
		"\3\2\2\2\u0e7e\u0e7f\3\2\2\2\u0e7f\u0e80\7\u0124\2\2\u0e80\u0e81\5\u0188"+
		"\u00c5\2\u0e81\u0e82\7\u00a5\2\2\u0e82\u0e84\7\u0124\2\2\u0e83\u0e85\5"+
		"\u033a\u019e\2\u0e84\u0e83\3\2\2\2\u0e84\u0e85\3\2\2\2\u0e85\u019f\3\2"+
		"\2\2\u0e86\u0e87\5\u034a\u01a6\2\u0e87\u0e89\7\u00f4\2\2\u0e88\u0e8a\7"+
		"\u01cb\2\2\u0e89\u0e88\3\2\2\2\u0e89\u0e8a\3\2\2\2\u0e8a\u0e8b\3\2\2\2"+
		"\u0e8b\u0e8c\5\u01a8\u00d5\2\u0e8c\u0e8d\7\u029e\2\2\u0e8d\u0e8e\5\u01aa"+
		"\u00d6\2\u0e8e\u0ea0\3\2\2\2\u0e8f\u0e90\5\u034e\u01a8\2\u0e90\u0e9d\7"+
		"\u00f4\2\2\u0e91\u0e97\5\u034c\u01a7\2\u0e92\u0e94\7\u02a6\2\2\u0e93\u0e95"+
		"\5\u029a\u014e\2\u0e94\u0e93\3\2\2\2\u0e94\u0e95\3\2\2\2\u0e95\u0e96\3"+
		"\2\2\2\u0e96\u0e98\7\u02a7\2\2\u0e97\u0e92\3\2\2\2\u0e97\u0e98\3\2\2\2"+
		"\u0e98\u0e9e\3\2\2\2\u0e99\u0e9a\7\u02a6\2\2\u0e9a\u0e9b\5\u01e0\u00f1"+
		"\2\u0e9b\u0e9c\7\u02a7\2\2\u0e9c\u0e9e\3\2\2\2\u0e9d\u0e91\3\2\2\2\u0e9d"+
		"\u0e99\3\2\2\2\u0e9e\u0ea0\3\2\2\2\u0e9f\u0e86\3\2\2\2\u0e9f\u0e8f\3\2"+
		"\2\2\u0ea0\u01a1\3\2\2\2\u0ea1\u0ea2\7\u00cc\2\2\u0ea2\u0ea3\5\u034a\u01a6"+
		"\2\u0ea3\u0ea4\7\u00f4\2\2\u0ea4\u0ea5\5\u01a4\u00d3\2\u0ea5\u0ea8\5\u01be"+
		"\u00e0\2\u0ea6\u0ea7\7\u01da\2\2\u0ea7\u0ea9\7\u00b0\2\2\u0ea8\u0ea6\3"+
		"\2\2\2\u0ea8\u0ea9\3\2\2\2\u0ea9\u01a3\3\2\2\2\u0eaa\u0eab\5\u01a8\u00d5"+
		"\2\u0eab\u0eac\7\u029e\2\2\u0eac\u0ead\5\u01aa\u00d6\2\u0ead\u0eb8\3\2"+
		"\2\2\u0eae\u0eaf\7\u00f1\2\2\u0eaf\u0eb0\7\u0169\2\2\u0eb0\u0eb2\5\u0350"+
		"\u01a9\2\u0eb1\u0eb3\5\u01a6\u00d4\2\u0eb2\u0eb1\3\2\2\2\u0eb2\u0eb3\3"+
		"\2\2\2\u0eb3\u0eb8\3\2\2\2\u0eb4\u0eb5\7\u024c\2\2\u0eb5\u0eb6\7\u0169"+
		"\2\2\u0eb6\u0eb8\5\u034a\u01a6\2\u0eb7\u0eaa\3\2\2\2\u0eb7\u0eae\3\2\2"+
		"\2\u0eb7\u0eb4\3\2\2\2\u0eb8\u01a5\3\2\2\2\u0eb9\u0eba\7)\2\2\u0eba\u0ebb"+
		"\5\u01a8\u00d5\2\u0ebb\u0ebc\7\20\2\2\u0ebc\u0ebd\5\u01aa\u00d6\2\u0ebd"+
		"\u01a7\3\2\2\2\u0ebe\u0ebf\5\u02ae\u0158\2\u0ebf\u01a9\3\2\2\2\u0ec0\u0ec1"+
		"\5\u02ae\u0158\2\u0ec1\u01ab\3\2\2\2\u0ec2\u0ec3\7\u0161\2\2\u0ec3\u01ad"+
		"\3\2\2\2\u0ec4\u0ec6\7\u01ab\2\2\u0ec5\u0ec7\5\u0340\u01a1\2\u0ec6\u0ec5"+
		"\3\2\2\2\u0ec6\u0ec7\3\2\2\2\u0ec7\u01af\3\2\2\2\u0ec8\u0eca\7\u01c9\2"+
		"\2\u0ec9\u0ecb\5\u029c\u014f\2\u0eca\u0ec9\3\2\2\2\u0eca\u0ecb\3\2\2\2"+
		"\u0ecb\u01b1\3\2\2\2\u0ecc\u0ece\7<\2\2\u0ecd\u0ecc\3\2\2\2\u0ecd\u0ece"+
		"\3\2\2\2\u0ece\u0ecf\3\2\2\2\u0ecf\u0ed1\5\u0322\u0192\2\u0ed0\u0ed2\5"+
		"\u036a\u01b6\2\u0ed1\u0ed0\3\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u01b3\3\2"+
		"\2\2\u0ed3\u0ed4\7\u0191\2\2\u0ed4\u0ed5\7\u01d4\2\2\u0ed5\u0ed6\7\u02a6"+
		"\2\2\u0ed6\u0ed7\5\u029c\u014f\2\u0ed7\u0ed8\7\u02a7\2\2\u0ed8\u01b5\3"+
		"\2\2\2\u0ed9\u0eda\7(\2\2\u0eda\u0ee1\5\u0188\u00c5\2\u0edb\u0edd\7\u00ae"+
		"\2\2\u0edc\u0ede\5\u01b8\u00dd\2\u0edd\u0edc\3\2\2\2\u0ede\u0edf\3\2\2"+
		"\2\u0edf\u0edd\3\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0\u0ee2\3\2\2\2\u0ee1\u0edb"+
		"\3\2\2\2\u0ee1\u0ee2\3\2\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0ee5\7\u00a5\2"+
		"\2\u0ee4\u0ee6\5\u033a\u019e\2\u0ee5\u0ee4\3\2\2\2\u0ee5\u0ee6\3\2\2\2"+
		"\u0ee6\u01b7\3\2\2\2\u0ee7\u0ee8\7\u025a\2\2\u0ee8\u0eed\5\u0340\u01a1"+
		"\2\u0ee9\u0eea\7\u0177\2\2\u0eea\u0eec\5\u0340\u01a1\2\u0eeb\u0ee9\3\2"+
		"\2\2\u0eec\u0eef\3\2\2\2\u0eed\u0eeb\3\2\2\2\u0eed\u0eee\3\2\2\2\u0eee"+
		"\u0ef0\3\2\2\2\u0eef\u0eed\3\2\2\2\u0ef0\u0ef1\7\u0221\2\2\u0ef1\u0ef2"+
		"\5\u0188\u00c5\2\u0ef2\u01b9\3\2\2\2\u0ef3\u0ef5\7\177\2\2\u0ef4\u0ef3"+
		"\3\2\2\2\u0ef4\u0ef5\3\2\2\2\u0ef5\u0ef7\3\2\2\2\u0ef6\u0ef8\5\u016c\u00b7"+
		"\2\u0ef7\u0ef6\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0ef7\3\2\2\2\u0ef9\u0efa"+
		"\3\2\2\2\u0efa\u0efc\3\2\2\2\u0efb\u0ef4\3\2\2\2\u0efb\u0efc\3\2\2\2\u0efc"+
		"\u0efd\3\2\2\2\u0efd\u0efe\5\u01b6\u00dc\2\u0efe\u01bb\3\2\2\2\u0eff\u0f01"+
		"\7\177\2\2\u0f00\u0eff\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01\u0f03\3\2\2\2"+
		"\u0f02\u0f04\5\u016c\u00b7\2\u0f03\u0f02\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05"+
		"\u0f03\3\2\2\2\u0f05\u0f06\3\2\2\2\u0f06\u0f07\3\2\2\2\u0f07\u0f08\5\u01b6"+
		"\u00dc\2\u0f08\u01bd\3\2\2\2\u0f09\u0f0e\5\u01c0\u00e1\2\u0f0a\u0f0e\5"+
		"\u01c4\u00e3\2\u0f0b\u0f0e\5\u01c6\u00e4\2\u0f0c\u0f0e\5\u01d0\u00e9\2"+
		"\u0f0d\u0f09\3\2\2\2\u0f0d\u0f0a\3\2\2\2\u0f0d\u0f0b\3\2\2\2\u0f0d\u0f0c"+
		"\3\2\2\2\u0f0e\u01bf\3\2\2\2\u0f0f\u0f10\7\u00b4\2\2\u0f10\u0f11\7\u00e8"+
		"\2\2\u0f11\u0f1b\5\u029c\u014f\2\u0f12\u0f14\5\u0312\u018a\2\u0f13\u0f15"+
		"\5\u02e4\u0173\2\u0f14\u0f13\3\2\2\2\u0f14\u0f15\3\2\2\2\u0f15\u0f1c\3"+
		"\2\2\2\u0f16\u0f18\5\u02e4\u0173\2\u0f17\u0f19\5\u01c2\u00e2\2\u0f18\u0f17"+
		"\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19\u0f1c\3\2\2\2\u0f1a\u0f1c\5\u01c2\u00e2"+
		"\2\u0f1b\u0f12\3\2\2\2\u0f1b\u0f16\3\2\2\2\u0f1b\u0f1a\3\2\2\2\u0f1b\u0f1c"+
		"\3\2\2\2\u0f1c\u01c1\3\2\2\2\u0f1d\u0f1e\t8\2\2\u0f1e\u0f1f\5\u0312\u018a"+
		"\2\u0f1f\u01c3\3\2\2\2\u0f20\u0f28\5\u0270\u0139\2\u0f21\u0f28\5\u027c"+
		"\u013f\2\u0f22\u0f28\5\u01e0\u00f1\2\u0f23\u0f28\5\u0256\u012c\2\u0f24"+
		"\u0f28\5\u025c\u012f\2\u0f25\u0f28\5\u025e\u0130\2\u0f26\u0f28\5\u01de"+
		"\u00f0\2\u0f27\u0f20\3\2\2\2\u0f27\u0f21\3\2\2\2\u0f27\u0f22\3\2\2\2\u0f27"+
		"\u0f23\3\2\2\2\u0f27\u0f24\3\2\2\2\u0f27\u0f25\3\2\2\2\u0f27\u0f26\3\2"+
		"\2\2\u0f28\u01c5\3\2\2\2\u0f29\u0f2e\5\u01c8\u00e5\2\u0f2a\u0f2e\5\u01ca"+
		"\u00e6\2\u0f2b\u0f2e\5\u01cc\u00e7\2\u0f2c\u0f2e\5\u01ce\u00e8\2\u0f2d"+
		"\u0f29\3\2\2\2\u0f2d\u0f2a\3\2\2\2\u0f2d\u0f2b\3\2\2\2\u0f2d\u0f2c\3\2"+
		"\2\2\u0f2e\u01c7\3\2\2\2\u0f2f\u0f30\7K\2\2\u0f30\u0f31\5\u034c\u01a7"+
		"\2\u0f31\u01c9\3\2\2\2\u0f32\u0f33\7\u0170\2\2\u0f33\u0f39\5\u034c\u01a7"+
		"\2\u0f34\u0f36\7\u02a6\2\2\u0f35\u0f37\5\u029a\u014e\2\u0f36\u0f35\3\2"+
		"\2\2\u0f36\u0f37\3\2\2\2\u0f37\u0f38\3\2\2\2\u0f38\u0f3a\7\u02a7\2\2\u0f39"+
		"\u0f34\3\2\2\2\u0f39\u0f3a\3\2\2\2\u0f3a\u01cb\3\2\2\2\u0f3b\u0f3c\7\u00c1"+
		"\2\2\u0f3c\u0f51\5\u034c\u01a7\2\u0f3d\u0f42\7\u0102\2\2\u0f3e\u0f40\7"+
		"\u02ac\2\2\u0f3f\u0f3e\3\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40\u0f41\3\2\2\2"+
		"\u0f41\u0f43\5\u0348\u01a5\2\u0f42\u0f3f\3\2\2\2\u0f43\u0f44\3\2\2\2\u0f44"+
		"\u0f42\3\2\2\2\u0f44\u0f45\3\2\2\2\u0f45\u0f52\3\2\2\2\u0f46\u0f47\78"+
		"\2\2\u0f47\u0f48\7N\2\2\u0f48\u0f4d\7\u0102\2\2\u0f49\u0f4b\7\u02ac\2"+
		"\2\u0f4a\u0f49\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u0f4e"+
		"\5\u0348\u01a5\2\u0f4d\u0f4a\3\2\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u0f4d\3"+
		"\2\2\2\u0f4f\u0f50\3\2\2\2\u0f50\u0f52\3\2\2\2\u0f51\u0f3d\3\2\2\2\u0f51"+
		"\u0f46\3\2\2\2\u0f52\u01cd\3\2\2\2\u0f53\u0f54\7\u0170\2\2\u0f54\u0f55"+
		"\5\u0348\u01a5\2\u0f55\u0f58\7\u00cf\2\2\u0f56\u0f59\5\u01e0\u00f1\2\u0f57"+
		"\u0f59\5\u029c\u014f\2\u0f58\u0f56\3\2\2\2\u0f58\u0f57\3\2\2\2\u0f59\u0f5b"+
		"\3\2\2\2\u0f5a\u0f5c\5\u02e4\u0173\2\u0f5b\u0f5a\3\2\2\2\u0f5b\u0f5c\3"+
		"\2\2\2\u0f5c\u01cf\3\2\2\2\u0f5d\u0f63\5\u01d2\u00ea\2\u0f5e\u0f63\5\u01d4"+
		"\u00eb\2\u0f5f\u0f63\5\u01d6\u00ec\2\u0f60\u0f63\5\u01da\u00ee\2\u0f61"+
		"\u0f63\5\u01dc\u00ef\2\u0f62\u0f5d\3\2\2\2\u0f62\u0f5e\3\2\2\2\u0f62\u0f5f"+
		"\3\2\2\2\u0f62\u0f60\3\2\2\2\u0f62\u0f61\3\2\2\2\u0f63\u01d1\3\2\2\2\u0f64"+
		"\u0f65\7\u01ec\2\2\u0f65\u0f73\7\u022f\2\2\u0f66\u0f67\7\u01ae\2\2\u0f67"+
		"\u0f74\t9\2\2\u0f68\u0f69\7\u0105\2\2\u0f69\u0f6d\7\u0112\2\2\u0f6a\u0f6e"+
		"\7\u01e7\2\2\u0f6b\u0f6c\7\u01ae\2\2\u0f6c\u0f6e\7S\2\2\u0f6d\u0f6a\3"+
		"\2\2\2\u0f6d\u0f6b\3\2\2\2\u0f6e\u0f74\3\2\2\2\u0f6f\u0f70\7\u0249\2\2"+
		"\u0f70\u0f71\7\u01d1\2\2\u0f71\u0f72\7\u01e2\2\2\u0f72\u0f74\5\u031c\u018f"+
		"\2\u0f73\u0f66\3\2\2\2\u0f73\u0f68\3\2\2\2\u0f73\u0f6f\3\2\2\2\u0f73\u0f74"+
		"\3\2\2\2\u0f74\u0f77\3\2\2\2\u0f75\u0f76\7\u0141\2\2\u0f76\u0f78\5\u038e"+
		"\u01c8\2\u0f77\u0f75\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78\u01d3\3\2\2\2\u0f79"+
		"\u0f7a\7\u01ec\2\2\u0f7a\u0f84\t:\2\2\u0f7b\u0f85\7\r\2\2\u0f7c\u0f7e"+
		"\7\u02ac\2\2\u0f7d\u0f7c\3\2\2\2\u0f7d\u0f7e\3\2\2\2\u0f7e\u0f7f\3\2\2"+
		"\2\u0f7f\u0f81\5\u0338\u019d\2\u0f80\u0f7d\3\2\2\2\u0f81\u0f82\3\2\2\2"+
		"\u0f82\u0f80\3\2\2\2\u0f82\u0f83\3\2\2\2\u0f83\u0f85\3\2\2\2\u0f84\u0f7b"+
		"\3\2\2\2\u0f84\u0f80\3\2\2\2\u0f85\u0f86\3\2\2\2\u0f86\u0f87\t\33\2\2"+
		"\u0f87\u01d5\3\2\2\2\u0f88\u0f8a\7R\2\2\u0f89\u0f8b\7\u0260\2\2\u0f8a"+
		"\u0f89\3\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b\u0f99\3\2\2\2\u0f8c\u0f8d\7Q"+
		"\2\2\u0f8d\u0f9a\5\u029c\u014f\2\u0f8e\u0f97\7\u00cd\2\2\u0f8f\u0f90\7"+
		"g\2\2\u0f90\u0f98\5\u029c\u014f\2\u0f91\u0f98\7f\2\2\u0f92\u0f95\5\u029c"+
		"\u014f\2\u0f93\u0f94\7\u02ac\2\2\u0f94\u0f96\5\u029c\u014f\2\u0f95\u0f93"+
		"\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f98\3\2\2\2\u0f97\u0f8f\3\2\2\2\u0f97"+
		"\u0f91\3\2\2\2\u0f97\u0f92\3\2\2\2\u0f98\u0f9a\3\2\2\2\u0f99\u0f8c\3\2"+
		"\2\2\u0f99\u0f8e\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a\u0f9c\3\2\2\2\u0f9b"+
		"\u0f9d\5\u01d8\u00ed\2\u0f9c\u0f9b\3\2\2\2\u0f9c\u0f9d\3\2\2\2\u0f9d\u01d7"+
		"\3\2\2\2\u0f9e\u0fa0\7\u0261\2\2\u0f9f\u0fa1\t;\2\2\u0fa0\u0f9f\3\2\2"+
		"\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa3\3\2\2\2\u0fa2\u0fa4\t<\2\2\u0fa3\u0fa2"+
		"\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4\u01d9\3\2\2\2\u0fa5\u0fa7\7\u01d1\2"+
		"\2\u0fa6\u0fa8\7\u0260\2\2\u0fa7\u0fa6\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8"+
		"\u0fb0\3\2\2\2\u0fa9\u0fab\7\u022d\2\2\u0faa\u0fac\7\u01d9\2\2\u0fab\u0faa"+
		"\3\2\2\2\u0fab\u0fac\3\2\2\2\u0fac\u0fad\3\2\2\2\u0fad\u0fb1\5\u031a\u018e"+
		"\2\u0fae\u0faf\7\u00cd\2\2\u0faf\u0fb1\5\u038e\u01c8\2\u0fb0\u0fa9\3\2"+
		"\2\2\u0fb0\u0fae\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u01db\3\2\2\2\u0fb2"+
		"\u0fb3\7\u01d9\2\2\u0fb3\u0fb4\5\u031a\u018e\2\u0fb4\u01dd\3\2\2\2\u0fb5"+
		"\u0fb6\7\u00b9\2\2\u0fb6\u0fbb\7\u0193\2\2\u0fb7\u0fb8\7\u01ec\2\2\u0fb8"+
		"\u0fb9\7\u0206\2\2\u0fb9\u0fba\7\u02ba\2\2\u0fba\u0fbc\5\u038e\u01c8\2"+
		"\u0fbb\u0fb7\3\2\2\2\u0fbb\u0fbc\3\2\2\2\u0fbc\u0fbf\3\2\2\2\u0fbd\u0fbe"+
		"\7\u0102\2\2\u0fbe\u0fc0\5\u0356\u01ac\2\u0fbf\u0fbd\3\2\2\2\u0fbf\u0fc0"+
		"\3\2\2\2\u0fc0\u0fc1\3\2\2\2\u0fc1\u0fc7\7\u00cf\2\2\u0fc2\u0fc8\5\u01e0"+
		"\u00f1\2\u0fc3\u0fc8\5\u0256\u012c\2\u0fc4\u0fc8\5\u025c\u012f\2\u0fc5"+
		"\u0fc8\5\u025e\u0130\2\u0fc6\u0fc8\5\u0270\u0139\2\u0fc7\u0fc2\3\2\2\2"+
		"\u0fc7\u0fc3\3\2\2\2\u0fc7\u0fc4\3\2\2\2\u0fc7\u0fc5\3\2\2\2\u0fc7\u0fc6"+
		"\3\2\2\2\u0fc8\u01df\3\2\2\2\u0fc9\u0fcb\5\u01e2\u00f2\2\u0fca\u0fc9\3"+
		"\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fd1\5\u01ea\u00f6"+
		"\2\u0fcd\u0fd0\5\u0250\u0129\2\u0fce\u0fd0\5\u024c\u0127\2\u0fcf\u0fcd"+
		"\3\2\2\2\u0fcf\u0fce\3\2\2\2\u0fd0\u0fd3\3\2\2\2\u0fd1\u0fcf\3\2\2\2\u0fd1"+
		"\u0fd2\3\2\2\2\u0fd2\u01e1\3\2\2\2\u0fd3\u0fd1\3\2\2\2\u0fd4\u0fd9\7\u025f"+
		"\2\2\u0fd5\u0fd7\7\u02ac\2\2\u0fd6\u0fd5\3\2\2\2\u0fd6\u0fd7\3\2\2\2\u0fd7"+
		"\u0fd8\3\2\2\2\u0fd8\u0fda\5\u01e4\u00f3\2\u0fd9\u0fd6\3\2\2\2\u0fda\u0fdb"+
		"\3\2\2\2\u0fdb\u0fd9\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc\u01e3\3\2\2\2\u0fdd"+
		"\u0fdf\5\u0332\u019a\2\u0fde\u0fe0\5\u0366\u01b4\2\u0fdf\u0fde\3\2\2\2"+
		"\u0fdf\u0fe0\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0fe2\7\24\2\2\u0fe2\u0fe3"+
		"\7\u02a6\2\2\u0fe3\u0fe5\5\u01ea\u00f6\2\u0fe4\u0fe6\5\u024c\u0127\2\u0fe5"+
		"\u0fe4\3\2\2\2\u0fe5\u0fe6\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7\u0fe9\7\u02a7"+
		"\2\2\u0fe8\u0fea\5\u01e6\u00f4\2\u0fe9\u0fe8\3\2\2\2\u0fe9\u0fea\3\2\2"+
		"\2\u0fea\u0fec\3\2\2\2\u0feb\u0fed\5\u01e8\u00f5\2\u0fec\u0feb\3\2\2\2"+
		"\u0fec\u0fed\3\2\2\2\u0fed\u01e5\3\2\2\2\u0fee\u0fef\7\u01df\2\2\u0fef"+
		"\u0ff0\t=\2\2\u0ff0\u0ff1\7\u00c4\2\2\u0ff1\u0ff2\79\2\2\u0ff2\u0ff4\5"+
		"\u0354\u01ab\2\u0ff3\u0ff5\7\25\2\2\u0ff4\u0ff3\3\2\2\2\u0ff4\u0ff5\3"+
		"\2\2\2\u0ff5\u0ff7\3\2\2\2\u0ff6\u0ff8\7\u008c\2\2\u0ff7\u0ff6\3\2\2\2"+
		"\u0ff7\u0ff8\3\2\2\2\u0ff8\u0ffb\3\2\2\2\u0ff9\u0ffa\7\u0162\2\2\u0ffa"+
		"\u0ffc\7\u00c4\2\2\u0ffb\u0ff9\3\2\2\2\u0ffb\u0ffc\3\2\2\2\u0ffc\u0fff"+
		"\3\2\2\2\u0ffd\u0ffe\7\u0162\2\2\u0ffe\u1000\7\u010d\2\2\u0fff\u0ffd\3"+
		"\2\2\2\u0fff\u1000\3\2\2\2\u1000\u1013\3\2\2\2\u1001\u1002\7\u02ac\2\2"+
		"\u1002\u1004\5\u0354\u01ab\2\u1003\u1005\7\25\2\2\u1004\u1003\3\2\2\2"+
		"\u1004\u1005\3\2\2\2\u1005\u1007\3\2\2\2\u1006\u1008\7\u008c\2\2\u1007"+
		"\u1006\3\2\2\2\u1007\u1008\3\2\2\2\u1008\u100b\3\2\2\2\u1009\u100a\7\u0162"+
		"\2\2\u100a\u100c\7\u00c4\2\2\u100b\u1009\3\2\2\2\u100b\u100c\3\2\2\2\u100c"+
		"\u100f\3\2\2\2\u100d\u100e\7\u0162\2\2\u100e\u1010\7\u010d\2\2\u100f\u100d"+
		"\3\2\2\2\u100f\u1010\3\2\2\2\u1010\u1012\3\2\2\2\u1011\u1001\3\2\2\2\u1012"+
		"\u1015\3\2\2\2\u1013\u1011\3\2\2\2\u1013\u1014\3\2\2\2\u1014\u1016\3\2"+
		"\2\2\u1015\u1013\3\2\2\2\u1016\u1017\7\u01ec\2\2\u1017\u1018\5\u0354\u01ab"+
		"\2\u1018\u01e7\3\2\2\2\u1019\u101a\7r\2\2\u101a\u101b\5\u0364\u01b3\2"+
		"\u101b\u101c\7\u01ec\2\2\u101c\u101d\5\u0354\u01ab\2\u101d\u101e\7\u022d"+
		"\2\2\u101e\u101f\5\u029c\u014f\2\u101f\u1020\7\u0082\2\2\u1020\u1021\5"+
		"\u029c\u014f\2\u1021\u01e9\3\2\2\2\u1022\u1026\5\u01ec\u00f7\2\u1023\u1025"+
		"\5\u01ee\u00f8\2\u1024\u1023\3\2\2\2\u1025\u1028\3\2\2\2\u1026\u1024\3"+
		"\2\2\2\u1026\u1027\3\2\2\2\u1027\u01eb\3\2\2\2\u1028\u1026\3\2\2\2\u1029"+
		"\u102f\5\u01f0\u00f9\2\u102a\u102b\7\u02a6\2\2\u102b\u102c\5\u01ea\u00f6"+
		"\2\u102c\u102d\7\u02a7\2\2\u102d\u102f\3\2\2\2\u102e\u1029\3\2\2\2\u102e"+
		"\u102a\3\2\2\2\u102f\u01ed\3\2\2\2\u1030\u1032\7\u023d\2\2\u1031\u1033"+
		"\7\r\2\2\u1032\u1031\3\2\2\2\u1032\u1033\3\2\2\2\u1033\u1037\3\2\2\2\u1034"+
		"\u1037\7\u00ff\2\2\u1035\u1037\7\u0137\2\2\u1036\u1030\3\2\2\2\u1036\u1034"+
		"\3\2\2\2\u1036\u1035\3\2\2\2\u1037\u1038\3\2\2\2\u1038\u1039\5\u01ec\u00f7"+
		"\2\u1039\u01ef";
	private static final String _serializedATNSegment2 =
		"\3\2\2\2\u103a\u103c\7\u01e3\2\2\u103b\u103d\t>\2\2\u103c\u103b\3\2\2"+
		"\2\u103c\u103d\3\2\2\2\u103d\u1047\3\2\2\2\u103e\u1048\7\u02a9\2\2\u103f"+
		"\u1041\7\u02ac\2\2\u1040\u103f\3\2\2\2\u1040\u1041\3\2\2\2\u1041\u1042"+
		"\3\2\2\2\u1042\u1044\5\u01f2\u00fa\2\u1043\u1040\3\2\2\2\u1044\u1045\3"+
		"\2\2\2\u1045\u1043\3\2\2\2\u1045\u1046\3\2\2\2\u1046\u1048\3\2\2\2\u1047"+
		"\u103e\3\2\2\2\u1047\u1043\3\2\2\2\u1048\u104a\3\2\2\2\u1049\u104b\5\u0312"+
		"\u018a\2\u104a\u1049\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104c\3\2\2\2\u104c"+
		"\u104e\5\u01f4\u00fb\2\u104d\u104f\5\u0310\u0189\2\u104e\u104d\3\2\2\2"+
		"\u104e\u104f\3\2\2\2\u104f\u1051\3\2\2\2\u1050\u1052\5\u021e\u0110\2\u1051"+
		"\u1050\3\2\2\2\u1051\u1052\3\2\2\2\u1052\u1054\3\2\2\2\u1053\u1055\5\u0222"+
		"\u0112\2\u1054\u1053\3\2\2\2\u1054\u1055\3\2\2\2\u1055\u1057\3\2\2\2\u1056"+
		"\u1058\5\u022e\u0118\2\u1057\u1056\3\2\2\2\u1057\u1058\3\2\2\2\u1058\u01f1"+
		"\3\2\2\2\u1059\u105b\5\u01f6\u00fc\2\u105a\u105c\5\u030c\u0187\2\u105b"+
		"\u105a\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u01f3\3\2\2\2\u105d\u105e\7\u00d2"+
		"\2\2\u105e\u105f\5\u01f8\u00fd\2\u105f\u01f5\3\2\2\2\u1060\u1061\5\u0356"+
		"\u01ac\2\u1061\u1062\7\u029f\2\2\u1062\u1063\7\u02a9\2\2\u1063\u106b\3"+
		"\2\2\2\u1064\u1065\5\u0396\u01cc\2\u1065\u1066\7\u029f\2\2\u1066\u1068"+
		"\3\2\2\2\u1067\u1064\3\2\2\2\u1067\u1068\3\2\2\2\u1068\u1069\3\2\2\2\u1069"+
		"\u106b\5\u029c\u014f\2\u106a\u1060\3\2\2\2\u106a\u1067\3\2\2\2\u106b\u01f7"+
		"\3\2\2\2\u106c\u106e\7\u02ac\2\2\u106d\u106c\3\2\2\2\u106d\u106e\3\2\2"+
		"\2\u106e\u106f\3\2\2\2\u106f\u1071\5\u01fa\u00fe\2\u1070\u106d\3\2\2\2"+
		"\u1071\u1072\3\2\2\2\u1072\u1070\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u01f9"+
		"\3\2\2\2\u1074\u1078\5\u01fc\u00ff\2\u1075\u1077\5\u0200\u0101\2\u1076"+
		"\u1075\3\2\2\2\u1077\u107a\3\2\2\2\u1078\u1076\3\2\2\2\u1078\u1079\3\2"+
		"\2\2\u1079\u107d\3\2\2\2\u107a\u1078\3\2\2\2\u107b\u107e\5\u020c\u0107"+
		"\2\u107c\u107e\5\u0218\u010d\2\u107d\u107b\3\2\2\2\u107d\u107c\3\2\2\2"+
		"\u107d\u107e\3\2\2\2\u107e\u01fb\3\2\2\2\u107f\u1083\5\u01fe\u0100\2\u1080"+
		"\u1082\5\u020a\u0106\2\u1081\u1080\3\2\2\2\u1082\u1085\3\2\2\2\u1083\u1081"+
		"\3\2\2\2\u1083\u1084\3\2\2\2\u1084\u1087\3\2\2\2\u1085\u1083\3\2\2\2\u1086"+
		"\u1088\5\u030e\u0188\2\u1087\u1086\3\2\2\2\u1087\u1088\3\2\2\2\u1088\u01fd"+
		"\3\2\2\2\u1089\u108c\5\u028e\u0148\2\u108a\u108d\5\u020c\u0107\2\u108b"+
		"\u108d\5\u0218\u010d\2\u108c\u108a\3\2\2\2\u108c\u108b\3\2\2\2\u108c\u108d"+
		"\3\2\2\2\u108d\u10a1\3\2\2\2\u108e\u108f\7\u02a6\2\2\u108f\u1093\5\u01fa"+
		"\u00fe\2\u1090\u1092\5\u01ee\u00f8\2\u1091\u1090\3\2\2\2\u1092\u1095\3"+
		"\2\2\2\u1093\u1091\3\2\2\2\u1093\u1094\3\2\2\2\u1094\u1096\3\2\2\2\u1095"+
		"\u1093\3\2\2\2\u1096\u1099\7\u02a7\2\2\u1097\u109a\5\u020c\u0107\2\u1098"+
		"\u109a\5\u0218\u010d\2\u1099\u1097\3\2\2\2\u1099\u1098\3\2\2\2\u1099\u109a"+
		"\3\2\2\2\u109a\u10a1\3\2\2\2\u109b\u109c\7\u016e\2\2\u109c\u109d\7\u02a6"+
		"\2\2\u109d\u109e\5\u028e\u0148\2\u109e\u109f\7\u02a7\2\2\u109f\u10a1\3"+
		"\2\2\2\u10a0\u1089\3\2\2\2\u10a0\u108e\3\2\2\2\u10a0\u109b\3\2\2\2\u10a1"+
		"\u01ff\3\2\2\2\u10a2\u10a4\5\u0208\u0105\2\u10a3\u10a2\3\2\2\2\u10a3\u10a4"+
		"\3\2\2\2\u10a4\u10a6\3\2\2\2\u10a5\u10a7\t?\2\2\u10a6\u10a5\3\2\2\2\u10a6"+
		"\u10a7\3\2\2\2\u10a7\u10aa\3\2\2\2\u10a8\u10ab\7\u00f9\2\2\u10a9\u10ab"+
		"\5\u0206\u0104\2\u10aa\u10a8\3\2\2\2\u10aa\u10a9\3\2\2\2\u10aa\u10ab\3"+
		"\2\2\2\u10ab\u10ac\3\2\2\2\u10ac\u10ad\7\u0109\2\2\u10ad\u10af\5\u01fc"+
		"\u00ff\2\u10ae\u10b0\5\u0208\u0105\2\u10af\u10ae\3\2\2\2\u10af\u10b0\3"+
		"\2\2\2\u10b0\u10b5\3\2\2\2\u10b1\u10b4\5\u0202\u0102\2\u10b2\u10b4\5\u0204"+
		"\u0103\2\u10b3\u10b1\3\2\2\2\u10b3\u10b2\3\2\2\2\u10b4\u10b7\3\2\2\2\u10b5"+
		"\u10b3\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u0201\3\2\2\2\u10b7\u10b5\3\2"+
		"\2\2\u10b8\u10b9\7\u016f\2\2\u10b9\u10ba\5\u0298\u014d\2\u10ba\u0203\3"+
		"\2\2\2\u10bb\u10bc\7\u024a\2\2\u10bc\u10bd\5\u0366\u01b4\2\u10bd\u0205"+
		"\3\2\2\2\u10be\u10c0\t@\2\2\u10bf\u10c1\7\u0179\2\2\u10c0\u10bf\3\2\2"+
		"\2\u10c0\u10c1\3\2\2\2\u10c1\u0207\3\2\2\2\u10c2\u10c3\7\u0183\2\2\u10c3"+
		"\u10cb\79\2\2\u10c4\u10c7\7\u02a6\2\2\u10c5\u10c8\5\u01ea\u00f6\2\u10c6"+
		"\u10c8\5\u029a\u014e\2\u10c7\u10c5\3\2\2\2\u10c7\u10c6\3\2\2\2\u10c7\u10c8"+
		"\3\2\2\2\u10c8\u10c9\3\2\2\2\u10c9\u10cc\7\u02a7\2\2\u10ca\u10cc\5\u029a"+
		"\u014e\2\u10cb\u10c4\3\2\2\2\u10cb\u10ca\3\2\2\2\u10cc\u0209\3\2\2\2\u10cd"+
		"\u10ce\7\u0253\2\2\u10ce\u10cf\7)\2\2\u10cf\u10d0\tA\2\2\u10d0\u10d6\5"+
		"\u029c\u014f\2\u10d1\u10d2\7\24\2\2\u10d2\u10d3\7\u0169\2\2\u10d3\u10d4"+
		"\tB\2\2\u10d4\u10d6\5\u029c\u014f\2\u10d5\u10cd\3\2\2\2\u10d5\u10d1\3"+
		"\2\2\2\u10d6\u020b\3\2\2\2\u10d7\u10d9\7\u0192\2\2\u10d8\u10da\7\u0270"+
		"\2\2\u10d9\u10d8\3\2\2\2\u10d9\u10da\3\2\2\2\u10da\u10db\3\2\2\2\u10db"+
		"\u10e0\7\u02a6\2\2\u10dc\u10de\7\u02ac\2\2\u10dd\u10dc\3\2\2\2\u10dd\u10de"+
		"\3\2\2\2\u10de\u10df\3\2\2\2\u10df\u10e1\5\u020e\u0108\2\u10e0\u10dd\3"+
		"\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e0\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3"+
		"\u10e4\3\2\2\2\u10e4\u10e5\5\u0210\u0109\2\u10e5\u10e6\5\u0212\u010a\2"+
		"\u10e6\u10e7\7\u02a7\2\2\u10e7\u020d\3\2\2\2\u10e8\u10e9\5\u0330\u0199"+
		"\2\u10e9\u10ea\7\u02a6\2\2\u10ea\u10eb\5\u029c\u014f\2\u10eb\u10ed\7\u02a7"+
		"\2\2\u10ec\u10ee\5\u030c\u0187\2\u10ed\u10ec\3\2\2\2\u10ed\u10ee\3\2\2"+
		"\2\u10ee\u020f\3\2\2\2\u10ef\u10f2\7\u00cf\2\2\u10f0\u10f3\5\u0354\u01ab"+
		"\2\u10f1\u10f3\5\u0366\u01b4\2\u10f2\u10f0\3\2\2\2\u10f2\u10f1\3\2\2\2"+
		"\u10f3\u0211\3\2\2\2\u10f4\u10f5\7\u00f4\2\2\u10f5\u1107\7\u02a6\2\2\u10f6"+
		"\u1108\5\u01ea\u00f6\2\u10f7\u10f9\7\u02ac\2\2\u10f8\u10f7\3\2\2\2\u10f8"+
		"\u10f9\3\2\2\2\u10f9\u10fa\3\2\2\2\u10fa\u10fc\7\21\2\2\u10fb\u10f8\3"+
		"\2\2\2\u10fc\u10fd\3\2\2\2\u10fd\u10fb\3\2\2\2\u10fd\u10fe\3\2\2\2\u10fe"+
		"\u1108\3\2\2\2\u10ff\u1101\7\u02ac\2\2\u1100\u10ff\3\2\2\2\u1100\u1101"+
		"\3\2\2\2\u1101\u1102\3\2\2\2\u1102\u1104\5\u0214\u010b\2\u1103\u1100\3"+
		"\2\2\2\u1104\u1105\3\2\2\2\u1105\u1103\3\2\2\2\u1105\u1106\3\2\2\2\u1106"+
		"\u1108\3\2\2\2\u1107\u10f6\3\2\2\2\u1107\u10fb\3\2\2\2\u1107\u1103\3\2"+
		"\2\2\u1108\u1109\3\2\2\2\u1109\u110a\7\u02a7\2\2\u110a\u0213\3\2\2\2\u110b"+
		"\u110d\5\u0216\u010c\2\u110c\u110e\5\u030c\u0187\2\u110d\u110c\3\2\2\2"+
		"\u110d\u110e\3\2\2\2\u110e\u0215\3\2\2\2\u110f\u1116\5\u029c\u014f\2\u1110"+
		"\u1112\7\u02a6\2\2\u1111\u1113\5\u029a\u014e\2\u1112\u1111\3\2\2\2\u1112"+
		"\u1113\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1116\7\u02a7\2\2\u1115\u110f"+
		"\3\2\2\2\u1115\u1110\3\2\2\2\u1116\u0217\3\2\2\2\u1117\u111a\7\u0241\2"+
		"\2\u1118\u1119\tC\2\2\u1119\u111b\7\u0162\2\2\u111a\u1118\3\2\2\2\u111a"+
		"\u111b\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u111f\7\u02a6\2\2\u111d\u1120"+
		"\5\u0354\u01ab\2\u111e\u1120\5\u0366\u01b4\2\u111f\u111d\3\2\2\2\u111f"+
		"\u111e\3\2\2\2\u1120\u1121\3\2\2\2\u1121\u1122\5\u0210\u0109\2\u1122\u1123"+
		"\5\u021a\u010e\2\u1123\u1124\7\u02a7\2\2\u1124\u0219\3\2\2\2\u1125\u1126"+
		"\7\u00f4\2\2\u1126\u112b\7\u02a6\2\2\u1127\u1129\7\u02ac\2\2\u1128\u1127"+
		"\3\2\2\2\u1128\u1129\3\2\2\2\u1129\u112a\3\2\2\2\u112a\u112c\5\u021c\u010f"+
		"\2\u112b\u1128\3\2\2\2\u112c\u112d\3\2\2\2\u112d\u112b\3\2\2\2\u112d\u112e"+
		"\3\2\2\2\u112e\u112f\3\2\2\2\u112f\u1130\7\u02a7\2\2\u1130\u021b\3\2\2"+
		"\2\u1131\u1134\5\u0354\u01ab\2\u1132\u1134\5\u0366\u01b4\2\u1133\u1131"+
		"\3\2\2\2\u1133\u1132\3\2\2\2\u1134\u1144\3\2\2\2\u1135\u1142\7\24\2\2"+
		"\u1136\u1143\5\u0388\u01c5\2\u1137\u113c\7\u02a6\2\2\u1138\u113a\7\u02ac"+
		"\2\2\u1139\u1138\3\2\2\2\u1139\u113a\3\2\2\2\u113a\u113b\3\2\2\2\u113b"+
		"\u113d\5\u0388\u01c5\2\u113c\u1139\3\2\2\2\u113d\u113e\3\2\2\2\u113e\u113c"+
		"\3\2\2\2\u113e\u113f\3\2\2\2\u113f\u1140\3\2\2\2\u1140\u1141\7\u02a7\2"+
		"\2\u1141\u1143\3\2\2\2\u1142\u1136\3\2\2\2\u1142\u1137\3\2\2\2\u1143\u1145"+
		"\3\2\2\2\u1144\u1135\3\2\2\2\u1144\u1145\3\2\2\2\u1145\u021d\3\2\2\2\u1146"+
		"\u1147\7[\2\2\u1147\u1149\79\2\2\u1148\u114a\7\u0151\2\2\u1149\u1148\3"+
		"\2\2\2\u1149\u114a\3\2\2\2\u114a\u114b\3\2\2\2\u114b\u114d\5\u0298\u014d"+
		"\2\u114c\u114e\5\u0220\u0111\2\u114d\u114c\3\2\2\2\u114d\u114e\3\2\2\2"+
		"\u114e\u1158\3\2\2\2\u114f\u1150\5\u0220\u0111\2\u1150\u1151\7[\2\2\u1151"+
		"\u1153\79\2\2\u1152\u1154\7\u0151\2\2\u1153\u1152\3\2\2\2\u1153\u1154"+
		"\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1156\5\u0298\u014d\2\u1156\u1158\3"+
		"\2\2\2\u1157\u1146\3\2\2\2\u1157\u114f\3\2\2\2\u1158\u021f\3\2\2\2\u1159"+
		"\u115a\7\u0204\2\2\u115a\u115b\7\u025f\2\2\u115b\u115c\5\u0298\u014d\2"+
		"\u115c\u0221\3\2\2\2\u115d\u115e\7\u00d9\2\2\u115e\u1163\79\2\2\u115f"+
		"\u1161\7\u02ac\2\2\u1160\u115f\3\2\2\2\u1160\u1161\3\2\2\2\u1161\u1162"+
		"\3\2\2\2\u1162\u1164\5\u0224\u0113\2\u1163\u1160\3\2\2\2\u1164\u1165\3"+
		"\2\2\2\u1165\u1163\3\2\2\2\u1165\u1166\3\2\2\2\u1166\u1168\3\2\2\2\u1167"+
		"\u1169\5\u022c\u0117\2\u1168\u1167\3\2\2\2\u1168\u1169\3\2\2\2\u1169\u1178"+
		"\3\2\2\2\u116a\u1175\5\u022c\u0117\2\u116b\u116c\7\u00d9\2\2\u116c\u1171"+
		"\79\2\2\u116d\u116f\7\u02ac\2\2\u116e\u116d\3\2\2\2\u116e\u116f\3\2\2"+
		"\2\u116f\u1170\3\2\2\2\u1170\u1172\5\u0224\u0113\2\u1171\u116e\3\2\2\2"+
		"\u1172\u1173\3\2\2\2\u1173\u1171\3\2\2\2\u1173\u1174\3\2\2\2\u1174\u1176"+
		"\3\2\2\2\u1175\u116b\3\2\2\2\u1175\u1176\3\2\2\2\u1176\u1178\3\2\2\2\u1177"+
		"\u115d\3\2\2\2\u1177\u116a\3\2\2\2\u1178\u0223\3\2\2\2\u1179\u117d\5\u0228"+
		"\u0115\2\u117a\u117d\5\u0226\u0114\2\u117b\u117d\5\u029c\u014f\2\u117c"+
		"\u1179\3\2\2\2\u117c\u117a\3\2\2\2\u117c\u117b\3\2\2\2\u117d\u0225\3\2"+
		"\2\2\u117e\u117f\tD\2\2\u117f\u1184\7\u02a6\2\2\u1180\u1182\7\u02ac\2"+
		"\2\u1181\u1180\3\2\2\2\u1181\u1182\3\2\2\2\u1182\u1183\3\2\2\2\u1183\u1185"+
		"\5\u022a\u0116\2\u1184\u1181\3\2\2\2\u1185\u1186\3\2\2\2\u1186\u1184\3"+
		"\2\2\2\u1186\u1187\3\2\2\2\u1187\u1188\3\2\2\2\u1188\u1189\7\u02a7\2\2"+
		"\u1189\u0227\3\2\2\2\u118a\u118b\7\u00da\2\2\u118b\u118c\7\u01ed\2\2\u118c"+
		"\u1191\7\u02a6\2\2\u118d\u118f\7\u02ac\2\2\u118e\u118d\3\2\2\2\u118e\u118f"+
		"\3\2\2\2\u118f\u1190\3\2\2\2\u1190\u1192\5\u022a\u0116\2\u1191\u118e\3"+
		"\2\2\2\u1192\u1193\3\2\2\2\u1193\u1191\3\2\2\2\u1193\u1194\3\2\2\2\u1194"+
		"\u1195\3\2\2\2\u1195\u1196\7\u02a7\2\2\u1196\u0229\3\2\2\2\u1197\u119f"+
		"\5\u0226\u0114\2\u1198\u119a\7\u02a6\2\2\u1199\u119b\5\u029a\u014e\2\u119a"+
		"\u1199\3\2\2\2\u119a\u119b\3\2\2\2\u119b\u119c\3\2\2\2\u119c\u119f\7\u02a7"+
		"\2\2\u119d\u119f\5\u029c\u014f\2\u119e\u1197\3\2\2\2\u119e\u1198\3\2\2"+
		"\2\u119e\u119d\3\2\2\2\u119f\u022b\3\2\2\2\u11a0\u11a1\7\u00de\2\2\u11a1"+
		"\u11a2\5\u0298\u014d\2\u11a2\u022d\3\2\2\2\u11a3\u11a7\7\u013b\2\2\u11a4"+
		"\u11a6\5\u0230\u0119\2\u11a5\u11a4\3\2\2\2\u11a6\u11a9\3\2\2\2\u11a7\u11a5"+
		"\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8\u11ab\3\2\2\2\u11a9\u11a7\3\2\2\2\u11aa"+
		"\u11ac\5\u0232\u011a\2\u11ab\u11aa\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11b0"+
		"\3\2\2\2\u11ad\u11af\5\u0234\u011b\2\u11ae\u11ad\3\2\2\2\u11af\u11b2\3"+
		"\2\2\2\u11b0\u11ae\3\2\2\2\u11b0\u11b1\3\2\2\2\u11b1\u11b3\3\2\2\2\u11b2"+
		"\u11b0\3\2\2\2\u11b3\u11b4\5\u0236\u011c\2\u11b4\u022f\3\2\2\2\u11b5\u11b6"+
		"\tE\2\2\u11b6\u11be\7\u0145\2\2\u11b7\u11bb\7\u023e\2\2\u11b8\u11bc\7"+
		"\u008f\2\2\u11b9\u11ba\7\u01f5\2\2\u11ba\u11bc\7\u01b4\2\2\u11bb\u11b8"+
		"\3\2\2\2\u11bb\u11b9\3\2\2\2\u11bc\u11be\3\2\2\2\u11bd\u11b5\3\2\2\2\u11bd"+
		"\u11b7\3\2\2\2\u11be\u0231\3\2\2\2\u11bf\u11c0\7\u01c9\2\2\u11c0\u11c1"+
		"\tF\2\2\u11c1\u11c2\7\u01d5\2\2\u11c2\u0233\3\2\2\2\u11c3\u11c4\7\u01b4"+
		"\2\2\u11c4\u11c5\5\u032a\u0196\2\u11c5\u11c6\7\u016f\2\2\u11c6\u11c7\7"+
		"\u02a6\2\2\u11c7\u11c8\5\u01ea\u00f6\2\u11c8\u11c9\7\u02a7\2\2\u11c9\u11cd"+
		"\5\u0238\u011d\2\u11ca\u11cc\5\u0230\u0119\2\u11cb\u11ca\3\2\2\2\u11cc"+
		"\u11cf\3\2\2\2\u11cd\u11cb\3\2\2\2\u11cd\u11ce\3\2\2\2\u11ce\u0235\3\2"+
		"\2\2\u11cf\u11cd\3\2\2\2\u11d0\u11d1\7\u0126\2\2\u11d1\u11d3\5\u032c\u0197"+
		"\2\u11d2\u11d0\3\2\2\2\u11d2\u11d3\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11d8"+
		"\5\u0238\u011d\2\u11d5\u11d7\5\u0230\u0119\2\u11d6\u11d5\3\2\2\2\u11d7"+
		"\u11da\3\2\2\2\u11d8\u11d6\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11db\3\2"+
		"\2\2\u11da\u11d8\3\2\2\2\u11db\u11dc\5\u0240\u0121\2\u11dc\u0237\3\2\2"+
		"\2\u11dd\u11df\5\u023a\u011e\2\u11de\u11dd\3\2\2\2\u11de\u11df\3\2\2\2"+
		"\u11df\u11e0\3\2\2\2\u11e0\u11e1\7\u008f\2\2\u11e1\u11e2\79\2\2\u11e2"+
		"\u11e3\5\u023c\u011f\2\u11e3\u11e4\7\u0131\2\2\u11e4\u11e5\5\u023c\u011f"+
		"\2\u11e5\u0239\3\2\2\2\u11e6\u11e7\7\u0183\2\2\u11e7\u11e8\79\2\2\u11e8"+
		"\u11e9\5\u023c\u011f\2\u11e9\u023b\3\2\2\2\u11ea\u11ef\7\u02a6\2\2\u11eb"+
		"\u11ed\7\u02ac\2\2\u11ec\u11eb\3\2\2\2\u11ec\u11ed\3\2\2\2\u11ed\u11ee"+
		"\3\2\2\2\u11ee\u11f0\5\u023e\u0120\2\u11ef\u11ec\3\2\2\2\u11f0\u11f1\3"+
		"\2\2\2\u11f1\u11ef\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u11f3\3\2\2\2\u11f3"+
		"\u11f4\7\u02a7\2\2\u11f4\u023d\3\2\2\2\u11f5\u11f8\5\u029c\u014f\2\u11f6"+
		"\u11f8\5\u01f0\u00f9\2\u11f7\u11f5\3\2\2\2\u11f7\u11f6\3\2\2\2\u11f8\u11fa"+
		"\3\2\2\2\u11f9\u11fb\5\u030c\u0187\2\u11fa\u11f9\3\2\2\2\u11fa\u11fb\3"+
		"\2\2\2\u11fb\u023f\3\2\2\2\u11fc\u11fe\5\u0242\u0122\2\u11fd\u11fc\3\2"+
		"\2\2\u11fd\u11fe\3\2\2\2\u11fe\u11ff\3\2\2\2\u11ff\u1206\7\u02a6\2\2\u1200"+
		"\u1202\7\u02ac\2\2\u1201\u1200\3\2\2\2\u1201\u1202\3\2\2\2\u1202\u1203"+
		"\3\2\2\2\u1203\u1205\5\u0244\u0123\2\u1204\u1201\3\2\2\2\u1205\u1208\3"+
		"\2\2\2\u1206\u1204\3\2\2\2\u1206\u1207\3\2\2\2\u1207\u1209\3\2\2\2\u1208"+
		"\u1206\3\2\2\2\u1209\u120a\7\u02a7\2\2\u120a\u0241\3\2\2\2\u120b\u1211"+
		"\7\u01d6\2\2\u120c\u1212\7\u0244\2\2\u120d\u120f\7\u0245\2\2\u120e\u1210"+
		"\7\r\2\2\u120f\u120e\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1212\3\2\2\2\u1211"+
		"\u120c\3\2\2\2\u1211\u120d\3\2\2\2\u1211\u1212\3\2\2\2\u1212\u1215\3\2"+
		"\2\2\u1213\u1214\tG\2\2\u1214\u1216\7\u0175\2\2\u1215\u1213\3\2\2\2\u1215"+
		"\u1216\3\2\2\2\u1216\u1218\3\2\2\2\u1217\u1219\5\u0248\u0125\2\u1218\u1217"+
		"\3\2\2\2\u1218\u1219\3\2\2\2\u1219\u0243\3\2\2\2\u121a\u1220\7\u0244\2"+
		"\2\u121b\u121d\7\u0245\2\2\u121c\u121e\7\r\2\2\u121d\u121c\3\2\2\2\u121d"+
		"\u121e\3\2\2\2\u121e\u1220\3\2\2\2\u121f\u121a\3\2\2\2\u121f\u121b\3\2"+
		"\2\2\u121f\u1220\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1223\5\u0246\u0124"+
		"\2\u1222\u1224\5\u024c\u0127\2\u1223\u1222\3\2\2\2\u1223\u1224\3\2\2\2"+
		"\u1224\u1225\3\2\2\2\u1225\u1226\7\u02ba\2\2\u1226\u1227\5\u029c\u014f"+
		"\2\u1227\u0245\3\2\2\2\u1228\u1229\5\u02b2\u015a\2\u1229\u0247\3\2\2\2"+
		"\u122a\u122b\7\u0106\2\2\u122b\u122c\7\u02a6\2\2\u122c\u122d\5\u029c\u014f"+
		"\2\u122d\u122f\7\u02a7\2\2\u122e\u1230\5\u024a\u0126\2\u122f\u122e\3\2"+
		"\2\2\u122f\u1230\3\2\2\2\u1230\u0249\3\2\2\2\u1231\u1232\7\u0242\2\2\u1232"+
		"\u1233\7\u02a6\2\2\u1233\u1234\5\u0298\u014d\2\u1234\u1235\7\u02a7\2\2"+
		"\u1235\u024b\3\2\2\2\u1236\u1238\7\u0175\2\2\u1237\u1239\7\u01f2\2\2\u1238"+
		"\u1237\3\2\2\2\u1238\u1239\3\2\2\2\u1239\u123a\3\2\2\2\u123a\u123f\79"+
		"\2\2\u123b\u123d\7\u02ac\2\2\u123c\u123b\3\2\2\2\u123c\u123d\3\2\2\2\u123d"+
		"\u123e\3\2\2\2\u123e\u1240\5\u024e\u0128\2\u123f\u123c\3\2\2\2\u1240\u1241"+
		"\3\2\2\2\u1241\u123f\3\2\2\2\u1241\u1242\3\2\2\2\u1242\u024d\3\2\2\2\u1243"+
		"\u1245\5\u029c\u014f\2\u1244\u1246\tH\2\2\u1245\u1244\3\2\2\2\u1245\u1246"+
		"\3\2\2\2\u1246\u1249\3\2\2\2\u1247\u1248\7\u0162\2\2\u1248\u124a\tI\2"+
		"\2\u1249\u1247\3\2\2\2\u1249\u124a\3\2\2\2\u124a\u024f\3\2\2\2\u124b\u124c"+
		"\7\u00cf\2\2\u124c\u124e\7\u0244\2\2\u124d\u124f\5\u0252\u012a\2\u124e"+
		"\u124d\3\2\2\2\u124e\u124f\3\2\2\2\u124f\u1251\3\2\2\2\u1250\u1252\5\u0254"+
		"\u012b\2\u1251\u1250\3\2\2\2\u1251\u1252\3\2\2\2\u1252\u0251\3\2\2\2\u1253"+
		"\u1254\7\u0169\2\2\u1254\u1255\5\u0364\u01b3\2\u1255\u0253\3\2\2\2\u1256"+
		"\u1257\7\u01f7\2\2\u1257\u125c\7\u011c\2\2\u1258\u125c\7\u0160\2\2\u1259"+
		"\u125a\7\u0256\2\2\u125a\u125c\5\u029c\u014f\2\u125b\u1256\3\2\2\2\u125b"+
		"\u1258\3\2\2\2\u125b\u1259\3\2\2\2\u125c\u0255\3\2\2\2\u125d\u125e\7\u0244"+
		"\2\2\u125e\u125f\5\u0284\u0143\2\u125f\u1261\5\u0258\u012d\2\u1260\u1262"+
		"\5\u0310\u0189\2\u1261\u1260\3\2\2\2\u1261\u1262\3\2\2\2\u1262\u1264\3"+
		"\2\2\2\u1263\u1265\5\u0286\u0144\2\u1264\u1263\3\2\2\2\u1264\u1265\3\2"+
		"\2\2\u1265\u1267\3\2\2\2\u1266\u1268\5\u0288\u0145\2\u1267\u1266\3\2\2"+
		"\2\u1267\u1268\3\2\2\2\u1268\u0257\3\2\2\2\u1269\u1279\7\u01ec\2\2\u126a"+
		"\u126c\7\u02ac\2\2\u126b\u126a\3\2\2\2\u126b\u126c\3\2\2\2\u126c\u126d"+
		"\3\2\2\2\u126d\u126f\5\u025a\u012e\2\u126e\u126b\3\2\2\2\u126f\u1270\3"+
		"\2\2\2\u1270\u126e\3\2\2\2\u1270\u1271\3\2\2\2\u1271\u127a\3\2\2\2\u1272"+
		"\u1273\7\u024d\2\2\u1273\u1274\7\u02a6\2\2\u1274\u1275\5\u0390\u01c9\2"+
		"\u1275\u1276\7\u02a7\2\2\u1276\u1277\7\u02ba\2\2\u1277\u1278\5\u029c\u014f"+
		"\2\u1278\u127a\3\2\2\2\u1279\u126e\3\2\2\2\u1279\u1272\3\2\2\2\u127a\u0259"+
		"\3\2\2\2\u127b\u127c\5\u0354\u01ab\2\u127c\u127d\7\u02ba\2\2\u127d\u127e"+
		"\5\u029c\u014f\2\u127e\u1284\3\2\2\2\u127f\u1280\5\u0366\u01b4\2\u1280"+
		"\u1281\7\u02ba\2\2\u1281\u1282\5\u01ea\u00f6\2\u1282\u1284\3\2\2\2\u1283"+
		"\u127b\3\2\2\2\u1283\u127f\3\2\2\2\u1284\u025b\3\2\2\2\u1285\u1287\7\u0089"+
		"\2\2\u1286\u1288\7\u00d2\2\2\u1287\u1286\3\2\2\2\u1287\u1288\3\2\2\2\u1288"+
		"\u1289\3\2\2\2\u1289\u128b\5\u0284\u0143\2\u128a\u128c\5\u0310\u0189\2"+
		"\u128b\u128a\3\2\2\2\u128b\u128c\3\2\2\2\u128c\u128e\3\2\2\2\u128d\u128f"+
		"\5\u0286\u0144\2\u128e\u128d\3\2\2\2\u128e\u128f\3\2\2\2\u128f\u1291\3"+
		"\2\2\2\u1290\u1292\5\u0288\u0145\2\u1291\u1290\3\2\2\2\u1291\u1292\3\2"+
		"\2\2\u1292\u025d\3\2\2\2\u1293\u1296\7\u00fb\2\2\u1294\u1297\5\u0260\u0131"+
		"\2\u1295\u1297\5\u0262\u0132\2\u1296\u1294\3\2\2\2\u1296\u1295\3\2\2\2"+
		"\u1297\u025f\3\2\2\2\u1298\u129e\5\u026c\u0137\2\u1299\u129b\5\u026e\u0138"+
		"\2\u129a\u129c\5\u0286\u0144\2\u129b\u129a\3\2\2\2\u129b\u129c\3\2\2\2"+
		"\u129c\u129f\3\2\2\2\u129d\u129f\5\u01e0\u00f1\2\u129e\u1299\3\2\2\2\u129e"+
		"\u129d\3\2\2\2\u129f\u12a1\3\2\2\2\u12a0\u12a2\5\u0288\u0145\2\u12a1\u12a0"+
		"\3\2\2\2\u12a1\u12a2\3\2\2\2\u12a2\u0261\3\2\2\2\u12a3\u12a5\7\r\2\2\u12a4"+
		"\u12a6\5\u0264\u0133\2\u12a5\u12a4\3\2\2\2\u12a6\u12a7\3\2\2\2\u12a7\u12a5"+
		"\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12ab\3\2\2\2\u12a9\u12ab\5\u0266\u0134"+
		"\2\u12aa\u12a3\3\2\2\2\u12aa\u12a9\3\2\2\2\u12ab\u12ac\3\2\2\2\u12ac\u12ad"+
		"\5\u01e0\u00f1\2\u12ad\u0263\3\2\2\2\u12ae\u12b0\5\u026c\u0137\2\u12af"+
		"\u12b1\5\u026e\u0138\2\u12b0\u12af\3\2\2\2\u12b0\u12b1\3\2\2\2\u12b1\u12b3"+
		"\3\2\2\2\u12b2\u12b4\5\u0288\u0145\2\u12b3\u12b2\3\2\2\2\u12b3\u12b4\3"+
		"\2\2\2\u12b4\u0265\3\2\2\2\u12b5\u12b7\tJ\2\2\u12b6\u12b5\3\2\2\2\u12b6"+
		"\u12b7\3\2\2\2\u12b7\u12b9\3\2\2\2\u12b8\u12ba\5\u0268\u0135\2\u12b9\u12b8"+
		"\3\2\2\2\u12ba\u12bb\3\2\2\2\u12bb\u12b9\3\2\2\2\u12bb\u12bc\3\2\2\2\u12bc"+
		"\u12be\3\2\2\2\u12bd\u12bf\5\u026a\u0136\2\u12be\u12bd\3\2\2\2\u12be\u12bf"+
		"\3\2\2\2\u12bf\u0267\3\2\2\2\u12c0\u12c1\7\u025a\2\2\u12c1\u12c2\5\u0298"+
		"\u014d\2\u12c2\u12c4\7\u0221\2\2\u12c3\u12c5\5\u0264\u0133\2\u12c4\u12c3"+
		"\3\2\2\2\u12c5\u12c6\3\2\2\2\u12c6\u12c4\3\2\2\2\u12c6\u12c7\3\2\2\2\u12c7"+
		"\u0269\3\2\2\2\u12c8\u12ca\7\u009e\2\2\u12c9\u12cb\5\u0264\u0133\2\u12ca"+
		"\u12c9\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc\u12ca\3\2\2\2\u12cc\u12cd\3\2"+
		"\2\2\u12cd\u026b\3\2\2\2\u12ce\u12cf\7\u0102\2\2\u12cf\u12d1\5\u0284\u0143"+
		"\2\u12d0\u12d2\5\u0366\u01b4\2\u12d1\u12d0\3\2\2\2\u12d1\u12d2\3\2\2\2"+
		"\u12d2\u026d\3\2\2\2\u12d3\u12d4\7\u024c\2\2\u12d4\u12d6\7\u02a6\2\2\u12d5"+
		"\u12d7\5\u029a\u014e\2\u12d6\u12d5\3\2\2\2\u12d6\u12d7\3\2\2\2\u12d7\u12d8"+
		"\3\2\2\2\u12d8\u12d9\7\u02a7\2\2\u12d9\u026f\3\2\2\2\u12da\u12db\7\u0133"+
		"\2\2\u12db\u12dc\7\u0102\2\2\u12dc\u12de\5\u0356\u01ac\2\u12dd\u12df\5"+
		"\u030e\u0188\2\u12de\u12dd\3\2\2\2\u12de\u12df\3\2\2\2\u12df\u12e0\3\2"+
		"\2\2\u12e0\u12e1\7\u024a\2\2\u12e1\u12e2\5\u027a\u013e\2\u12e2\u12e3\7"+
		"\u016f\2\2\u12e3\u12e4\7\u02a6\2\2\u12e4\u12e5\5\u0298\u014d\2\u12e5\u12ee"+
		"\7\u02a7\2\2\u12e6\u12e8\5\u0272\u013a\2\u12e7\u12e9\5\u0278\u013d\2\u12e8"+
		"\u12e7\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12ef\3\2\2\2\u12ea\u12ec\5\u0278"+
		"\u013d\2\u12eb\u12ed\5\u0272\u013a\2\u12ec\u12eb\3\2\2\2\u12ec\u12ed\3"+
		"\2\2\2\u12ed\u12ef\3\2\2\2\u12ee\u12e6\3\2\2\2\u12ee\u12ea\3\2\2\2\u12ee"+
		"\u12ef\3\2\2\2\u12ef\u12f1\3\2\2\2\u12f0\u12f2\5\u0288\u0145\2\u12f1\u12f0"+
		"\3\2\2\2\u12f1\u12f2\3\2\2\2\u12f2\u0271\3\2\2\2\u12f3\u12f4\7\u025a\2"+
		"\2\u12f4\u12f5\7\u012c\2\2\u12f5\u12f6\7\u0221\2\2\u12f6\u12f7\7\u0244"+
		"\2\2\u12f7\u12f8\7\u01ec\2\2\u12f8\u12fd\5\u0274\u013b\2\u12f9\u12fa\7"+
		"\u02ac\2\2\u12fa\u12fc\5\u0274\u013b\2\u12fb\u12f9\3\2\2\2\u12fc\u12ff"+
		"\3\2\2\2\u12fd\u12fb\3\2\2\2\u12fd\u12fe\3\2\2\2\u12fe\u1301\3\2\2\2\u12ff"+
		"\u12fd\3\2\2\2\u1300\u1302\5\u0310\u0189\2\u1301\u1300\3\2\2\2\u1301\u1302"+
		"\3\2\2\2\u1302\u1304\3\2\2\2\u1303\u1305\5\u0276\u013c\2\u1304\u1303\3"+
		"\2\2\2\u1304\u1305\3\2\2\2\u1305\u0273\3\2\2\2\u1306\u1307\5\u0354\u01ab"+
		"\2\u1307\u1308\7\u02ba\2\2\u1308\u1309\5\u029c\u014f\2\u1309\u0275\3\2"+
		"\2\2\u130a\u130b\7\u0089\2\2\u130b\u130c\5\u0310\u0189\2\u130c\u0277\3"+
		"\2\2\2\u130d\u130e\7\u025a\2\2\u130e\u130f\7\u015e\2\2\u130f\u1310\7\u012c"+
		"\2\2\u1310\u1311\7\u0221\2\2\u1311\u1313\7\u00fb\2\2\u1312\u1314\5\u0366"+
		"\u01b4\2\u1313\u1312\3\2\2\2\u1313\u1314\3\2\2\2\u1314\u1315\3\2\2\2\u1315"+
		"\u1316\7\u024c\2\2\u1316\u1318\7\u02a6\2\2\u1317\u1319\5\u029a\u014e\2"+
		"\u1318\u1317\3\2\2\2\u1318\u1319\3\2\2\2\u1319\u131a\3\2\2\2\u131a\u131c"+
		"\7\u02a7\2\2\u131b\u131d\5\u0310\u0189\2\u131c\u131b\3\2\2\2\u131c\u131d"+
		"\3\2\2\2\u131d\u0279\3\2\2\2\u131e\u1324\5\u0356\u01ac\2\u131f\u1320\7"+
		"\u02a6\2\2\u1320\u1321\5\u01e0\u00f1\2\u1321\u1322\7\u02a7\2\2\u1322\u1324"+
		"\3\2\2\2\u1323\u131e\3\2\2\2\u1323\u131f\3\2\2\2\u1324\u1326\3\2\2\2\u1325"+
		"\u1327\5\u030e\u0188\2\u1326\u1325\3\2\2\2\u1326\u1327\3\2\2\2\u1327\u027b"+
		"\3\2\2\2\u1328\u1329\7\u011d\2\2\u1329\u132a\7\u021d\2\2\u132a\u132f\5"+
		"\u0280\u0141\2\u132b\u132c\7\u02ac\2\2\u132c\u132e\5\u0280\u0141\2\u132d"+
		"\u132b\3\2\2\2\u132e\u1331\3\2\2\2\u132f\u132d\3\2\2\2\u132f\u1330\3\2"+
		"\2\2\u1330\u1332\3\2\2\2\u1331\u132f\3\2\2\2\u1332\u1333\7\u00f4\2\2\u1333"+
		"\u1334\5\u0282\u0142\2\u1334\u1336\7\u013c\2\2\u1335\u1337\5\u027e\u0140"+
		"\2\u1336\u1335\3\2\2\2\u1336\u1337\3\2\2\2\u1337\u027d\3\2\2\2\u1338\u1339"+
		"\7\u0256\2\2\u1339\u133c\5\u029c\u014f\2\u133a\u133c\7\u0160\2\2\u133b"+
		"\u1338\3\2\2\2\u133b\u133a\3\2\2\2\u133c\u027f\3\2\2\2\u133d\u133f\5\u0356"+
		"\u01ac\2\u133e\u1340\5\u030a\u0186\2\u133f\u133e\3\2\2\2\u133f\u1340\3"+
		"\2\2\2\u1340\u0281\3\2\2\2\u1341\u1342\7\u01d4\2\2\u1342\u134e\7\u01ef"+
		"\2\2\u1343\u1344\7\u01d4\2\2\u1344\u134e\7\u00b3\2\2\u1345\u1347\7\u01ef"+
		"\2\2\u1346\u1348\7\u0244\2\2\u1347\u1346\3\2\2\2\u1347\u1348\3\2\2\2\u1348"+
		"\u134e\3\2\2\2\u1349\u134a\7\u01ef\2\2\u134a\u134b\7\u01d4\2\2\u134b\u134e"+
		"\7\u00b3\2\2\u134c\u134e\7\u00b3\2\2\u134d\u1341\3\2\2\2\u134d\u1343\3"+
		"\2\2\2\u134d\u1345\3\2\2\2\u134d\u1349\3\2\2\2\u134d\u134c\3\2\2\2\u134e"+
		"\u0283\3\2\2\2\u134f\u1356\5\u028e\u0148\2\u1350\u1351\7\u016e\2\2\u1351"+
		"\u1352\7\u02a6\2\2\u1352\u1353\5\u028e\u0148\2\u1353\u1354\7\u02a7\2\2"+
		"\u1354\u1356\3\2\2\2\u1355\u134f\3\2\2\2\u1355\u1350\3\2\2\2\u1356\u1358"+
		"\3\2\2\2\u1357\u1359\5\u030e\u0188\2\u1358\u1357\3\2\2\2\u1358\u1359\3"+
		"\2\2\2\u1359\u0285\3\2\2\2\u135a\u135b\t8\2\2\u135b\u135c\5\u029a\u014e"+
		"\2\u135c\u135d\5\u0312\u018a\2\u135d\u0287\3\2\2\2\u135e\u135f\7\u011f"+
		"\2\2\u135f\u1361\7\u00aa\2\2\u1360\u1362\5\u028a\u0146\2\u1361\u1360\3"+
		"\2\2\2\u1361\u1362\3\2\2\2\u1362\u1364\3\2\2\2\u1363\u1365\5\u029c\u014f"+
		"\2\u1364\u1363\3\2\2\2\u1364\u1365\3\2\2\2\u1365\u1367\3\2\2\2\u1366\u1368"+
		"\5\u028c\u0147\2\u1367\u1366\3\2\2\2\u1367\u1368\3\2\2\2\u1368\u0289\3"+
		"\2\2\2\u1369\u136a\7\u0102\2\2\u136a\u136b\5\u0356\u01ac\2\u136b\u028b"+
		"\3\2\2\2\u136c\u136d\7\u01b9\2\2\u136d\u1370\7\u0118\2\2\u136e\u1371\7"+
		"\u023f\2\2\u136f\u1371\5\u029c\u014f\2\u1370\u136e\3\2\2\2\u1370\u136f"+
		"\3\2\2\2\u1371\u028d\3\2\2\2\u1372\u137f\5\u0290\u0149\2\u1373\u1374\7"+
		"\u02a6\2\2\u1374\u1376\5\u01e0\u00f1\2\u1375\u1377\5\u0292\u014a\2\u1376"+
		"\u1375\3\2\2\2\u1376\u1377\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u1379\7\u02a7"+
		"\2\2\u1379\u137f\3\2\2\2\u137a\u137c\5\u0356\u01ac\2\u137b\u137d\5\u0294"+
		"\u014b\2\u137c\u137b\3\2\2\2\u137c\u137d\3\2\2\2\u137d\u137f\3\2\2\2\u137e"+
		"\u1372\3\2\2\2\u137e\u1373\3\2\2\2\u137e\u137a\3\2\2\2\u137f\u028f\3\2"+
		"\2\2\u1380\u138d\tK\2\2\u1381\u1382\7\u02a6\2\2\u1382\u1383\5\u01ea\u00f6"+
		"\2\u1383\u1384\7\u02a7\2\2\u1384\u138e\3\2\2\2\u1385\u1386\7\u02a6\2\2"+
		"\u1386\u1387\5\u029c\u014f\2\u1387\u138b\7\u02a7\2\2\u1388\u1389\7\u02a6"+
		"\2\2\u1389\u138a\7\u02aa\2\2\u138a\u138c\7\u02a7\2\2\u138b\u1388\3\2\2"+
		"\2\u138b\u138c\3\2\2\2\u138c\u138e\3\2\2\2\u138d\u1381\3\2\2\2\u138d\u1385"+
		"\3\2\2\2\u138e\u0291\3\2\2\2\u138f\u1398\7\u025f\2\2\u1390\u1391\7\u01ae"+
		"\2\2\u1391\u1399\7\u016e\2\2\u1392\u1393\7F\2\2\u1393\u1396\7\u0173\2"+
		"\2\u1394\u1395\7]\2\2\u1395\u1397\5\u0338\u019d\2\u1396\u1394\3\2\2\2"+
		"\u1396\u1397\3\2\2\2\u1397\u1399\3\2\2\2\u1398\u1390\3\2\2\2\u1398\u1392"+
		"\3\2\2\2\u1399\u0293\3\2\2\2\u139a\u139c\7\u01d8\2\2\u139b\u139d\7\60"+
		"\2\2\u139c\u139b\3\2\2\2\u139c\u139d\3\2\2\2\u139d\u139e\3\2\2\2\u139e"+
		"\u139f\7\u02a6\2\2\u139f\u13a2\5\u029c\u014f\2\u13a0\u13a1\7\u02ac\2\2"+
		"\u13a1\u13a3\5\u029c\u014f\2\u13a2\u13a0\3\2\2\2\u13a2\u13a3\3\2\2\2\u13a3"+
		"\u13a4\3\2\2\2\u13a4\u13a6\7\u02a7\2\2\u13a5\u13a7\5\u0296\u014c\2\u13a6"+
		"\u13a5\3\2\2\2\u13a6\u13a7\3\2\2\2\u13a7\u0295\3\2\2\2\u13a8\u13a9\7\u01e1"+
		"\2\2\u13a9\u13aa\7\u02a6\2\2\u13aa\u13ab\5\u029c\u014f\2\u13ab\u13ac\7"+
		"\u02a7\2\2\u13ac\u0297\3\2\2\2\u13ad\u13ae\5\u029c\u014f\2\u13ae\u0299"+
		"\3\2\2\2\u13af\u13b4\5\u029c\u014f\2\u13b0\u13b1\7\u02ac\2\2\u13b1\u13b3"+
		"\5\u029c\u014f\2\u13b2\u13b0\3\2\2\2\u13b3\u13b6\3\2\2\2\u13b4\u13b2\3"+
		"\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u029b\3\2\2\2\u13b6\u13b4\3\2\2\2\u13b7"+
		"\u13ba\5\u029e\u0150\2\u13b8\u13ba\5\u02a0\u0151\2\u13b9\u13b7\3\2\2\2"+
		"\u13b9\u13b8\3\2\2\2\u13ba\u029d\3\2\2\2\u13bb\u13bc\7p\2\2\u13bc\u13bd"+
		"\7\u02a6\2\2\u13bd\u13be\5\u01ea\u00f6\2\u13be\u13bf\7\u02a7\2\2\u13bf"+
		"\u029f\3\2\2\2\u13c0\u13c1\b\u0151\1\2\u13c1\u13e3\5\u02a2\u0152\2\u13c2"+
		"\u13c4\7\u0104\2\2\u13c3\u13c5\7\u015e\2\2\u13c4\u13c3\3\2\2\2\u13c4\u13c5"+
		"\3\2\2\2\u13c5\u13df\3\2\2\2\u13c6\u13e0\7\u0161\2\2\u13c7\u13e0\7\u0142"+
		"\2\2\u13c8\u13e0\7\u019d\2\2\u13c9\u13e0\7\u00f2\2\2\u13ca\u13cb\7\f\2"+
		"\2\u13cb\u13e0\7\u01ec\2\2\u13cc\u13e0\7\u00a0\2\2\u13cd\u13cf\7\u0169"+
		"\2\2\u13ce\u13d0\7\u0238\2\2\u13cf\u13ce\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0"+
		"\u13d1\3\2\2\2\u13d1\u13d3\7\u02a6\2\2\u13d2\u13d4\7\u016e\2\2\u13d3\u13d2"+
		"\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4\u13d5\3\2\2\2\u13d5\u13da\5\u0374\u01bb"+
		"\2\u13d6\u13d7\7\u02ac\2\2\u13d7\u13d9\5\u0374\u01bb\2\u13d8\u13d6\3\2"+
		"\2\2\u13d9\u13dc\3\2\2\2\u13da\u13d8\3\2\2\2\u13da\u13db\3\2\2\2\u13db"+
		"\u13dd\3\2\2\2\u13dc\u13da\3\2\2\2\u13dd\u13de\7\u02a7\2\2\u13de\u13e0"+
		"\3\2\2\2\u13df\u13c6\3\2\2\2\u13df\u13c7\3\2\2\2\u13df\u13c8\3\2\2\2\u13df"+
		"\u13c9\3\2\2\2\u13df\u13ca\3\2\2\2\u13df\u13cc\3\2\2\2\u13df\u13cd\3\2"+
		"\2\2\u13e0\u13e2\3\2\2\2\u13e1\u13c2\3\2\2\2\u13e2\u13e5\3\2\2\2\u13e3"+
		"\u13e1\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4\u13e9\3\2\2\2\u13e5\u13e3\3\2"+
		"\2\2\u13e6\u13e7\7\u015e\2\2\u13e7\u13e9\5\u02a0\u0151\5\u13e8\u13c0\3"+
		"\2\2\2\u13e8\u13e6\3\2\2\2\u13e9\u13f2\3\2\2\2\u13ea\u13eb\f\4\2\2\u13eb"+
		"\u13ec\7\20\2\2\u13ec\u13f1\5\u02a0\u0151\5\u13ed\u13ee\f\3\2\2\u13ee"+
		"\u13ef\7\u0177\2\2\u13ef\u13f1\5\u02a0\u0151\4\u13f0\u13ea\3\2\2\2\u13f0"+
		"\u13ed\3\2\2\2\u13f1\u13f4\3\2\2\2\u13f2\u13f0\3\2\2\2\u13f2\u13f3\3\2"+
		"\2\2\u13f3\u02a1\3\2\2\2\u13f4\u13f2\3\2\2\2\u13f5\u13fb\5\u02a4\u0153"+
		"\2\u13f6\u13f8\tL\2\2\u13f7\u13f9\7\u0169\2\2\u13f8\u13f7\3\2\2\2\u13f8"+
		"\u13f9\3\2\2\2\u13f9\u13fa\3\2\2\2\u13fa\u13fc\5\u02ae\u0158\2\u13fb\u13f6"+
		"\3\2\2\2\u13fb\u13fc\3\2\2\2\u13fc\u02a3\3\2\2\2\u13fd\u13fe\b\u0153\1"+
		"\2\u13fe\u13ff\5\u02a6\u0154\2\u13ff\u1406\3\2\2\2\u1400\u1401\f\4\2\2"+
		"\u1401\u1402\5\u02a8\u0155\2\u1402\u1403\5\u02a4\u0153\5\u1403\u1405\3"+
		"\2\2\2\u1404\u1400\3\2\2\2\u1405\u1408\3\2\2\2\u1406\u1404\3\2\2\2\u1406"+
		"\u1407\3\2\2\2\u1407\u02a5\3\2\2\2\u1408\u1406\3\2\2\2\u1409\u1419\5\u02ae"+
		"\u0158\2\u140a\u140c\7\u015e\2\2\u140b\u140a\3\2\2\2\u140b\u140c\3\2\2"+
		"\2\u140c\u1417\3\2\2\2\u140d\u140e\7\u00f4\2\2\u140e\u1418\5\u02aa\u0156"+
		"\2\u140f\u1410\7)\2\2\u1410\u1418\5\u02ac\u0157\2\u1411\u1412\tM\2\2\u1412"+
		"\u1415\5\u02ae\u0158\2\u1413\u1414\7\u00ab\2\2\u1414\u1416\5\u02ae\u0158"+
		"\2\u1415\u1413\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1418\3\2\2\2\u1417\u140d"+
		"\3\2\2\2\u1417\u140f\3\2\2\2\u1417\u1411\3\2\2\2\u1418\u141a\3\2\2\2\u1419"+
		"\u140b\3\2\2\2\u1419\u141a\3\2\2\2\u141a\u02a7\3\2\2\2\u141b\u142a\7\u02ba"+
		"\2\2\u141c\u1424\7\u02b1\2\2\u141d\u141e\7\u02b6\2\2\u141e\u1424\7\u02b5"+
		"\2\2\u141f\u1420\7\u02b4\2\2\u1420\u1424\7\u02ba\2\2\u1421\u1422\7\u02b2"+
		"\2\2\u1422\u1424\7\u02ba\2\2\u1423\u141c\3\2\2\2\u1423\u141d\3\2\2\2\u1423"+
		"\u141f\3\2\2\2\u1423\u1421\3\2\2\2\u1424\u142a\3\2\2\2\u1425\u1427\tN"+
		"\2\2\u1426\u1428\7\u02ba\2\2\u1427\u1426\3\2\2\2\u1427\u1428\3\2\2\2\u1428"+
		"\u142a\3\2\2\2\u1429\u141b\3\2\2\2\u1429\u1423\3\2\2\2\u1429\u1425\3\2"+
		"\2\2\u142a\u02a9\3\2\2\2\u142b\u142c\7\u02a6\2\2\u142c\u142d\5\u01ea\u00f6"+
		"\2\u142d\u142e\7\u02a7\2\2\u142e\u143e\3\2\2\2\u142f\u1430\7\u02a6\2\2"+
		"\u1430\u1435\5\u02ae\u0158\2\u1431\u1432\7\u02ac\2\2\u1432\u1434\5\u02ae"+
		"\u0158\2\u1433\u1431\3\2\2\2\u1434\u1437\3\2\2\2\u1435\u1433\3\2\2\2\u1435"+
		"\u1436\3\2\2\2\u1436\u1438\3\2\2\2\u1437\u1435\3\2\2\2\u1438\u1439\7\u02a7"+
		"\2\2\u1439\u143e\3\2\2\2\u143a\u143e\5\u0388\u01c5\2\u143b\u143e\5\u037c"+
		"\u01bf\2\u143c\u143e\5\u037e\u01c0\2\u143d\u142b\3\2\2\2\u143d\u142f\3"+
		"\2\2\2\u143d\u143a\3\2\2\2\u143d\u143b\3\2\2\2\u143d\u143c\3\2\2\2\u143e"+
		"\u02ab\3\2\2\2\u143f\u1440\5\u02ae\u0158\2\u1440\u1441\7\20\2\2\u1441"+
		"\u1442\5\u02ae\u0158\2\u1442\u02ad\3\2\2\2\u1443\u1444\b\u0158\1\2\u1444"+
		"\u144d\5\u02b2\u015a\2\u1445\u144a\7\30\2\2\u1446\u144b\7\u011b\2\2\u1447"+
		"\u1448\7\u0228\2\2\u1448\u1449\7\u0274\2\2\u1449\u144b\5\u02ae\u0158\2"+
		"\u144a\u1446\3\2\2\2\u144a\u1447\3\2\2\2\u144b\u144e\3\2\2\2\u144c\u144e"+
		"\5\u02b0\u0159\2\u144d\u1445\3\2\2\2\u144d\u144c\3\2\2\2\u144d\u144e\3"+
		"\2\2\2\u144e\u145b\3\2\2\2\u144f\u1450\f\5\2\2\u1450\u1451\tO\2\2\u1451"+
		"\u145a\5\u02ae\u0158\6\u1452\u1453\f\4\2\2\u1453\u1454\tP\2\2\u1454\u145a"+
		"\5\u02ae\u0158\5\u1455\u1456\f\3\2\2\u1456\u1457\7\u02b9\2\2\u1457\u1458"+
		"\7\u02b9\2\2\u1458\u145a\5\u02ae\u0158\4\u1459\u144f\3\2\2\2\u1459\u1452"+
		"\3\2\2\2\u1459\u1455\3\2\2\2\u145a\u145d\3\2\2\2\u145b\u1459\3\2\2\2\u145b"+
		"\u145c\3\2\2\2\u145c\u02af\3\2\2\2\u145d\u145b\3\2\2\2\u145e\u1463\7w"+
		"\2\2\u145f\u1460\7\u02a6\2\2\u1460\u1461\5\u02ae\u0158\2\u1461\u1462\7"+
		"\u02a7\2\2\u1462\u1464\3\2\2\2\u1463\u145f\3\2\2\2\u1463\u1464\3\2\2\2"+
		"\u1464\u1465\3\2\2\2\u1465\u1466\7\u022d\2\2\u1466\u146b\7\u01e0\2\2\u1467"+
		"\u1468\7\u02a6\2\2\u1468\u1469\5\u02ae\u0158\2\u1469\u146a\7\u02a7\2\2"+
		"\u146a\u146c\3\2\2\2\u146b\u1467\3\2\2\2\u146b\u146c\3\2\2\2\u146c\u1477"+
		"\3\2\2\2\u146d\u1472\7\u0271\2\2\u146e\u146f\7\u02a6\2\2\u146f\u1470\5"+
		"\u02ae\u0158\2\u1470\u1471\7\u02a7\2\2\u1471\u1473\3\2\2\2\u1472\u146e"+
		"\3\2\2\2\u1472\u1473\3\2\2\2\u1473\u1474\3\2\2\2\u1474\u1475\7\u022d\2"+
		"\2\u1475\u1477\7\u013e\2\2\u1476\u145e\3\2\2\2\u1476\u146d\3\2\2\2\u1477"+
		"\u02b1\3\2\2\2\u1478\u147d\5\u02ba\u015e\2\u1479\u147a\7\u02bb\2\2\u147a"+
		"\u147b\5\u02b4\u015b\2\u147b\u147c\7\u02bc\2\2\u147c\u147e\3\2\2\2\u147d"+
		"\u1479\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u02b3\3\2\2\2\u147f\u1482\7\21"+
		"\2\2\u1480\u1482\5\u029c\u014f\2\u1481\u147f\3\2\2\2\u1481\u1480\3\2\2"+
		"\2\u1482\u148a\3\2\2\2\u1483\u1486\7\u02ac\2\2\u1484\u1487\7\21\2\2\u1485"+
		"\u1487\5\u029c\u014f\2\u1486\u1484\3\2\2\2\u1486\u1485\3\2\2\2\u1487\u1489"+
		"\3\2\2\2\u1488\u1483\3\2\2\2\u1489\u148c\3\2\2\2\u148a\u1488\3\2\2\2\u148a"+
		"\u148b\3\2\2\2\u148b\u1497\3\2\2\2\u148c\u148a\3\2\2\2\u148d\u1492\5\u02b6"+
		"\u015c\2\u148e\u148f\7\u02ac\2\2\u148f\u1491\5\u02b6\u015c\2\u1490\u148e"+
		"\3\2\2\2\u1491\u1494\3\2\2\2\u1492\u1490\3\2\2\2\u1492\u1493\3\2\2\2\u1493"+
		"\u1497\3\2\2\2\u1494\u1492\3\2\2\2\u1495\u1497\5\u02b8\u015d\2\u1496\u1481"+
		"\3\2\2\2\u1496\u148d\3\2\2\2\u1496\u1495\3\2\2\2\u1497\u02b5\3\2\2\2\u1498"+
		"\u1499\7\u00cf\2\2\u1499\u14ab\5\u0354\u01ab\2\u149a\u149b\7\u00f4\2\2"+
		"\u149b\u149d\7\u02a6\2\2\u149c\u149e\5\u029a\u014e\2\u149d\u149c\3\2\2"+
		"\2\u149d\u149e\3\2\2\2\u149e\u149f\3\2\2\2\u149f\u14ac\7\u02a7\2\2\u14a0"+
		"\u14a1\7\u0117\2\2\u14a1\u14a3\5\u029c\u014f\2\u14a2\u14a0\3\2\2\2\u14a2"+
		"\u14a3\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u14a5\7\u00d2\2\2\u14a5\u14a6"+
		"\5\u029c\u014f\2\u14a6\u14a7\7\u022d\2\2\u14a7\u14a8\5\u029c\u014f\2\u14a8"+
		"\u14a9\tQ\2\2\u14a9\u14aa\5\u029c\u014f\2\u14aa\u14ac\3\2\2\2\u14ab\u149a"+
		"\3\2\2\2\u14ab\u14a2\3\2\2\2\u14ac\u02b7\3\2\2\2\u14ad\u14ae\7\u00cf\2"+
		"\2\u14ae\u14af\5\u0366\u01b4\2\u14af\u14b0\7\u00f4\2\2\u14b0\u14b7\7\u02a6"+
		"\2\2\u14b1\u14b8\5\u01ea\u00f6\2\u14b2\u14b4\7\u02a6\2\2\u14b3\u14b5\5"+
		"\u029a\u014e\2\u14b4\u14b3\3\2\2\2\u14b4\u14b5\3\2\2\2\u14b5\u14b6\3\2"+
		"\2\2\u14b6\u14b8\7\u02a7\2\2\u14b7\u14b1\3\2\2\2\u14b7\u14b2\3\2\2\2\u14b8"+
		"\u14b9\3\2\2\2\u14b9\u14ba\7\u02a7\2\2\u14ba\u02b9\3\2\2\2\u14bb\u14bc"+
		"\tP\2\2\u14bc\u14cc\5\u02ba\u015e\2\u14bd\u14be\7\u01a0\2\2\u14be\u14cc"+
		"\5\u02ba\u015e\2\u14bf\u14c0\7Z\2\2\u14c0\u14cc\5\u02ba\u015e\2\u14c1"+
		"\u14c2\7\u014b\2\2\u14c2\u14cc\5\u02ba\u015e\2\u14c3\u14c4\7\u0093\2\2"+
		"\u14c4\u14cc\5\u02ba\u015e\2\u14c5\u14c6\7\r\2\2\u14c6\u14cc\5\u02ba\u015e"+
		"\2\u14c7\u14cc\5\u02bc\u015f\2\u14c8\u14cc\5\u02ca\u0166\2\u14c9\u14cc"+
		"\5\u02ce\u0168\2\u14ca\u14cc\5\u02c8\u0165\2\u14cb\u14bb\3\2\2\2\u14cb"+
		"\u14bd\3\2\2\2\u14cb\u14bf\3\2\2\2\u14cb\u14c1\3\2\2\2\u14cb\u14c3\3\2"+
		"\2\2\u14cb\u14c5\3\2\2\2\u14cb\u14c7\3\2\2\2\u14cb\u14c8\3\2\2\2\u14cb"+
		"\u14c9\3\2\2\2\u14cb\u14ca\3\2\2\2\u14cc\u02bb\3\2\2\2\u14cd\u14d0\5\u02c2"+
		"\u0162\2\u14ce\u14d0\5\u02be\u0160\2\u14cf\u14cd\3\2\2\2\u14cf\u14ce\3"+
		"\2\2\2\u14d0\u02bd\3\2\2\2\u14d1\u14d3\5\u033a\u019e\2\u14d2\u14d1\3\2"+
		"\2\2\u14d2\u14d3\3\2\2\2\u14d3\u14d4\3\2\2\2\u14d4\u14d5\7?\2\2\u14d5"+
		"\u14d7\5\u029c\u014f\2\u14d6\u14d8\5\u02c0\u0161\2\u14d7\u14d6\3\2\2\2"+
		"\u14d8\u14d9\3\2\2\2\u14d9\u14d7\3\2\2\2\u14d9\u14da\3\2\2\2\u14da\u14dc"+
		"\3\2\2\2\u14db\u14dd\5\u02c6\u0164\2\u14dc\u14db\3\2\2\2\u14dc\u14dd\3"+
		"\2\2\2\u14dd\u14de\3\2\2\2\u14de\u14e0\7\u00a5\2\2\u14df\u14e1\7?\2\2"+
		"\u14e0\u14df\3\2\2\2\u14e0\u14e1\3\2\2\2\u14e1\u14e3\3\2\2\2\u14e2\u14e4"+
		"\5\u033a\u019e\2\u14e3\u14e2\3\2\2\2\u14e3\u14e4\3\2\2\2\u14e4\u02bf\3"+
		"\2\2\2\u14e5\u14e6\7\u025a\2\2\u14e6\u14e7\5\u029c\u014f\2\u14e7\u14ea"+
		"\7\u0221\2\2\u14e8\u14eb\5\u0188\u00c5\2\u14e9\u14eb\5\u029c\u014f\2\u14ea"+
		"\u14e8\3\2\2\2\u14ea\u14e9\3\2\2\2\u14eb\u02c1\3\2\2\2\u14ec\u14ee\5\u033a"+
		"\u019e\2\u14ed\u14ec\3\2\2\2\u14ed\u14ee\3\2\2\2\u14ee\u14ef\3\2\2\2\u14ef"+
		"\u14f1\7?\2\2\u14f0\u14f2\5\u02c4\u0163\2\u14f1\u14f0\3\2\2\2\u14f2\u14f3"+
		"\3\2\2\2\u14f3\u14f1\3\2\2\2\u14f3\u14f4\3\2\2\2\u14f4\u14f6\3\2\2\2\u14f5"+
		"\u14f7\5\u02c6\u0164\2\u14f6\u14f5\3\2\2\2\u14f6\u14f7\3\2\2\2\u14f7\u14f8"+
		"\3\2\2\2\u14f8\u14fa\7\u00a5\2\2\u14f9\u14fb\7?\2\2\u14fa\u14f9\3\2\2"+
		"\2\u14fa\u14fb\3\2\2\2\u14fb\u14fd\3\2\2\2\u14fc\u14fe\5\u033a\u019e\2"+
		"\u14fd\u14fc\3\2\2\2\u14fd\u14fe\3\2\2\2\u14fe\u02c3\3\2\2\2\u14ff\u1500"+
		"\7\u025a\2\2\u1500\u1501\5\u029c\u014f\2\u1501\u1504\7\u0221\2\2\u1502"+
		"\u1505\5\u0188\u00c5\2\u1503\u1505\5\u029c\u014f\2\u1504\u1502\3\2\2\2"+
		"\u1504\u1503\3\2\2\2\u1505\u02c5\3\2\2\2\u1506\u1509\7\u009e\2\2\u1507"+
		"\u150a\5\u0188\u00c5\2\u1508\u150a\5\u029c\u014f\2\u1509\u1507\3\2\2\2"+
		"\u1509\u1508\3\2\2\2\u150a\u02c7\3\2\2\2\u150b\u150c\5\u0382\u01c2\2\u150c"+
		"\u150d\5\u0394\u01cb\2\u150d\u151f\3\2\2\2\u150e\u151f\5\u037c\u01bf\2"+
		"\u150f\u151f\5\u0388\u01c5\2\u1510\u151f\5\u037e\u01c0\2\u1511\u1512\7"+
		"\u02a6\2\2\u1512\u1513\5\u01ea\u00f6\2\u1513\u1517\7\u02a7\2\2\u1514\u1516"+
		"\5\u01ee\u00f8\2\u1515\u1514\3\2\2\2\u1516\u1519\3\2\2\2\u1517\u1515\3"+
		"\2\2\2\u1517\u1518\3\2\2\2\u1518\u151f\3\2\2\2\u1519\u1517\3\2\2\2\u151a"+
		"\u151b\7\u02a6\2\2\u151b\u151c\5\u029a\u014e\2\u151c\u151d\7\u02a7\2\2"+
		"\u151d\u151f\3\2\2\2\u151e\u150b\3\2\2\2\u151e\u150e\3\2\2\2\u151e\u150f"+
		"\3\2\2\2\u151e\u1510\3\2\2\2\u151e\u1511\3\2\2\2\u151e\u151a\3\2\2\2\u151f"+
		"\u02c9\3\2\2\2\u1520\u1529\tR\2\2\u1521\u1522\7\u02a6\2\2\u1522\u1523"+
		"\5\u01ea\u00f6\2\u1523\u1524\7\u02a7\2\2\u1524\u152a\3\2\2\2\u1525\u1526"+
		"\7\u02a6\2\2\u1526\u1527\5\u029c\u014f\2\u1527\u1528\7\u02a7\2\2\u1528"+
		"\u152a\3\2\2\2\u1529\u1521\3\2\2\2\u1529\u1525\3\2\2\2\u152a\u02cb\3\2"+
		"\2\2\u152b\u152c\7\u0291\2\2\u152c\u152d\7\u02a6\2\2\u152d\u152e\5\u029c"+
		"\u014f\2\u152e\u152f\7\u02ac\2\2\u152f\u1532\5\u029c\u014f\2\u1530\u1531"+
		"\7\u02ac\2\2\u1531\u1533\5\u029c\u014f\2\u1532\u1530\3\2\2\2\u1532\u1533"+
		"\3\2\2\2\u1533\u1534\3\2\2\2\u1534\u1535\7\u02a7\2\2\u1535\u1572\3\2\2"+
		"\2\u1536\u1537\7\u0292\2\2\u1537\u153b\7\u02a6\2\2\u1538\u153c\5\u0382"+
		"\u01c2\2\u1539\u153c\5\u02ce\u0168\2\u153a\u153c\5\u029c\u014f\2\u153b"+
		"\u1538\3\2\2\2\u153b\u1539\3\2\2\2\u153b\u153a\3\2\2\2\u153c\u153f\3\2"+
		"\2\2\u153d\u153e\7\u02ac\2\2\u153e\u1540\5\u038e\u01c8\2\u153f\u153d\3"+
		"\2\2\2\u153f\u1540\3\2\2\2\u1540\u1543\3\2\2\2\u1541\u1542\7\u02ac\2\2"+
		"\u1542\u1544\5\u038e\u01c8\2\u1543\u1541\3\2\2\2\u1543\u1544\3\2\2\2\u1544"+
		"\u1545\3\2\2\2\u1545\u1546\7\u02a7\2\2\u1546\u1572\3\2\2\2\u1547\u1548"+
		"\7\u0285\2\2\u1548\u1549\7\u02a6\2\2\u1549\u154a\5\u029a\u014e\2\u154a"+
		"\u154b\7\u02a7\2\2\u154b\u1572\3\2\2\2\u154c\u154d\7G\2\2\u154d\u154e"+
		"\7\u02a6\2\2\u154e\u154f\5\u02ae\u0158\2\u154f\u1550\7\u024a\2\2\u1550"+
		"\u1551\7\u0146\2\2\u1551\u1552\7\u02a7\2\2\u1552\u1572\3\2\2\2\u1553\u1554"+
		"\7\u028c\2\2\u1554\u1555\7\u02a6\2\2\u1555\u1556\5\u029c\u014f\2\u1556"+
		"\u1557\7\u02ac\2\2\u1557\u1558\5\u029c\u014f\2\u1558\u1559\7\u02a7\2\2"+
		"\u1559\u1572\3\2\2\2\u155a\u155b\7\u0293\2\2\u155b\u1563\7\u02a6\2\2\u155c"+
		"\u155e\tS\2\2\u155d\u155c\3\2\2\2\u155d\u155e\3\2\2\2\u155e\u1560\3\2"+
		"\2\2\u155f\u1561\5\u038e\u01c8\2\u1560\u155f\3\2\2\2\u1560\u1561\3\2\2"+
		"\2\u1561\u1562\3\2\2\2\u1562\u1564\7\u00d2\2\2\u1563\u155d\3\2\2\2\u1563"+
		"\u1564\3\2\2\2\u1564\u1565\3\2\2\2\u1565\u1566\5\u02ae\u0158\2\u1566\u1567"+
		"\7\u02a7\2\2\u1567\u1572\3\2\2\2\u1568\u1569\7\u029a\2\2\u1569\u156a\7"+
		"\u02a6\2\2\u156a\u156d\5\u029c\u014f\2\u156b\u156c\7\u02ac\2\2\u156c\u156e"+
		"\5\u038e\u01c8\2\u156d\u156b\3\2\2\2\u156d\u156e\3\2\2\2\u156e\u156f\3"+
		"\2\2\2\u156f\u1570\7\u02a7\2\2\u1570\u1572\3\2\2\2\u1571\u152b\3\2\2\2"+
		"\u1571\u1536\3\2\2\2\u1571\u1547\3\2\2\2\u1571\u154c\3\2\2\2\u1571\u1553"+
		"\3\2\2\2\u1571\u155a\3\2\2\2\u1571\u1568\3\2\2\2\u1572\u02cd\3\2\2\2\u1573"+
		"\u1577\5\u02cc\u0167\2\u1574\u1577\5\u02d0\u0169\2\u1575\u1577\5\u02d4"+
		"\u016b\2\u1576\u1573\3\2\2\2\u1576\u1574\3\2\2\2\u1576\u1575\3\2\2\2\u1577"+
		"\u02cf\3\2\2\2\u1578\u157b\5\u02d2\u016a\2\u1579\u157c\5\u02b6\u015c\2"+
		"\u157a\u157c\5\u02b8\u015d\2\u157b\u1579\3\2\2\2\u157b\u157a\3\2\2\2\u157b"+
		"\u157c\3\2\2\2\u157c\u02d1\3\2\2\2\u157d\u157e\7\u0294\2\2\u157e\u1580"+
		"\7\u02a6\2\2\u157f\u1581\tT\2\2\u1580\u157f\3\2\2\2\u1580\u1581\3\2\2"+
		"\2\u1581\u1582\3\2\2\2\u1582\u1583\5\u029c\u014f\2\u1583\u1584\7\u02a7"+
		"\2\2\u1584\u15b8\3\2\2\2\u1585\u1586\7i\2\2\u1586\u158e\7\u02a6\2\2\u1587"+
		"\u158f\7\u02a9\2\2\u1588\u158a\t>\2\2\u1589\u1588\3\2\2\2\u1589\u158a"+
		"\3\2\2\2\u158a\u158b\3\2\2\2\u158b\u158d\5\u02ae\u0158\2\u158c\u1589\3"+
		"\2\2\2\u158c\u158d\3\2\2\2\u158d\u158f\3\2\2\2\u158e\u1587\3\2\2\2\u158e"+
		"\u158c\3\2\2\2\u158f\u1590\3\2\2\2\u1590\u1592\7\u02a7\2\2\u1591\u1593"+
		"\5\u02dc\u016f\2\u1592\u1591\3\2\2\2\u1592\u1593\3\2\2\2\u1593\u15b8\3"+
		"\2\2\2\u1594\u1595\7\u028f\2\2\u1595\u1596\7\u02a6\2\2\u1596\u1599\5\u029c"+
		"\u014f\2\u1597\u1598\7\u02ac\2\2\u1598\u159a\7\u02a0\2\2\u1599\u1597\3"+
		"\2\2\2\u1599\u159a\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u159c\7\u02a7\2\2"+
		"\u159c\u15b8\3\2\2\2\u159d\u159e\7\u0282\2\2\u159e\u15a0\7\u02a6\2\2\u159f"+
		"\u15a1\tT\2\2\u15a0\u159f\3\2\2\2\u15a0\u15a1\3\2\2\2\u15a1\u15a2\3\2"+
		"\2\2\u15a2\u15a3\5\u029c\u014f\2\u15a3\u15a4\7\u02a7\2\2\u15a4\u15b8\3"+
		"\2\2\2\u15a5\u15a6\7\u0288\2\2\u15a6\u15a8\7\u02a6\2\2\u15a7\u15a9\tT"+
		"\2\2\u15a8\u15a7\3\2\2\2\u15a8\u15a9\3\2\2\2\u15a9\u15aa\3\2\2\2\u15aa"+
		"\u15ab\5\u029c\u014f\2\u15ab\u15ac\7\u02a7\2\2\u15ac\u15b8\3\2\2\2\u15ad"+
		"\u15ae\7\u0298\2\2\u15ae\u15af\7\u02a6\2\2\u15af\u15b0\5\u029a\u014e\2"+
		"\u15b0\u15b1\7\u02a7\2\2\u15b1\u15b8\3\2\2\2\u15b2\u15b3\7\u0299\2\2\u15b3"+
		"\u15b4\7\u02a6\2\2\u15b4\u15b5\5\u029a\u014e\2\u15b5\u15b6\7\u02a7\2\2"+
		"\u15b6\u15b8\3\2\2\2\u15b7\u157d\3\2\2\2\u15b7\u1585\3\2\2\2\u15b7\u1594"+
		"\3\2\2\2\u15b7\u159d\3\2\2\2\u15b7\u15a5\3\2\2\2\u15b7\u15ad\3\2\2\2\u15b7"+
		"\u15b2\3\2\2\2\u15b8\u02d3\3\2\2\2\u15b9\u15ba\5\u02d6\u016c\2\u15ba\u15bc"+
		"\5\u036c\u01b7\2\u15bb\u15bd\5\u02dc\u016f\2\u15bc\u15bb\3\2\2\2\u15bc"+
		"\u15bd\3\2\2\2\u15bd\u16f5\3\2\2\2\u15be\u15bf\5\u0396\u01cc\2\u15bf\u15c1"+
		"\5\u036e\u01b8\2\u15c0\u15c2\5\u02e4\u0173\2\u15c1\u15c0\3\2\2\2\u15c1"+
		"\u15c2\3\2\2\2\u15c2\u16f5\3\2\2\2\u15c3\u15c4\7i\2\2\u15c4\u15ca\7\u02a6"+
		"\2\2\u15c5\u15cb\7\u02a9\2\2\u15c6\u15c8\t>\2\2\u15c7\u15c6\3\2\2\2\u15c7"+
		"\u15c8\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9\u15cb\5\u02ae\u0158\2\u15ca\u15c5"+
		"\3\2\2\2\u15ca\u15c7\3\2\2\2\u15cb\u15cc\3\2\2\2\u15cc\u15ce\7\u02a7\2"+
		"\2\u15cd\u15cf\5\u02dc\u016f\2\u15ce\u15cd\3\2\2\2\u15ce\u15cf\3\2\2\2"+
		"\u15cf\u16f5\3\2\2\2\u15d0\u15d1\tU\2\2\u15d1\u15d8\7\u02a6\2\2\u15d2"+
		"\u15d3\7\u0140\2\2\u15d3\u15d4\7\u02a6\2\2\u15d4\u15d5\5\u01ea\u00f6\2"+
		"\u15d5\u15d6\7\u02a7\2\2\u15d6\u15d9\3\2\2\2\u15d7\u15d9\5\u02ae\u0158"+
		"\2\u15d8\u15d2\3\2\2\2\u15d8\u15d7\3\2\2\2\u15d9\u15da\3\2\2\2\u15da\u15db"+
		"\7\24\2\2\u15db\u15dc\5\u0374\u01bb\2\u15dc\u15dd\7\u02a7\2\2\u15dd\u16f5"+
		"\3\2\2\2\u15de\u15df\7M\2\2\u15df\u15e0\7\u02a6\2\2\u15e0\u15e6\5\u0382"+
		"\u01c2\2\u15e1\u15e4\7\u02ac\2\2\u15e2\u15e5\5\u038a\u01c6\2\u15e3\u15e5"+
		"\5\u038e\u01c8\2\u15e4\u15e2\3\2\2\2\u15e4\u15e3\3\2\2\2\u15e5\u15e7\3"+
		"\2\2\2\u15e6\u15e1\3\2\2\2\u15e6\u15e7\3\2\2\2\u15e7\u15e8\3\2\2\2\u15e8"+
		"\u15e9\7\u02a7\2\2\u15e9\u16f5\3\2\2\2\u15ea\u15eb\7N\2\2\u15eb\u15ed"+
		"\7\u02a6\2\2\u15ec\u15ee\tV\2\2\u15ed\u15ec\3\2\2\2\u15ed\u15ee\3\2\2"+
		"\2\u15ee\u15ef\3\2\2\2\u15ef\u15f1\5\u02ae\u0158\2\u15f0\u15f2\5\u02e8"+
		"\u0175\2\u15f1\u15f0\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2\u15f3\3\2\2\2\u15f3"+
		"\u15f4\7\u02a7\2\2\u15f4\u16f5\3\2\2\2\u15f5\u15f6\5\u02d8\u016d\2\u15f6"+
		"\u15f8\5\u036a\u01b6\2\u15f7\u15f9\5\u02ea\u0176\2\u15f8\u15f7\3\2\2\2"+
		"\u15f9\u15fa\3\2\2\2\u15fa\u15f8\3\2\2\2\u15fa\u15fb\3\2\2\2\u15fb\u16f5"+
		"\3\2\2\2\u15fc\u15fd\5\u034c\u01a7\2\u15fd\u15fe\tW\2\2\u15fe\u16f5\3"+
		"\2\2\2\u15ff\u1600\7\u0080\2\2\u1600\u1601\7\u02a6\2\2\u1601\u1603\5\u02ae"+
		"\u0158\2\u1602\u1604\tX\2\2\u1603\u1602\3\2\2\2\u1603\u1604\3\2\2\2\u1604"+
		"\u1605\3\2\2\2\u1605\u1606\7\u02a7\2\2\u1606\u16f5\3\2\2\2\u1607\u1608"+
		"\7\u00bd\2\2\u1608\u1609\7\u02a6\2\2\u1609\u160a\5\u0396\u01cc\2\u160a"+
		"\u160b\7\u00d2\2\2\u160b\u160c\5\u02ae\u0158\2\u160c\u160d\7\u02a7\2\2"+
		"\u160d\u16f5\3\2\2\2\u160e\u160f\tY\2\2\u160f\u1611\5\u036c\u01b7\2\u1610"+
		"\u1612\5\u0370\u01b9\2\u1611\u1610\3\2\2\2\u1611\u1612\3\2\2\2\u1612\u1613"+
		"\3\2\2\2\u1613\u1614\5\u02dc\u016f\2\u1614\u16f5\3\2\2\2\u1615\u1616\5"+
		"\u02da\u016e\2\u1616\u1617\7\u02a6\2\2\u1617\u1619\5\u029a\u014e\2\u1618"+
		"\u161a\5\u02ec\u0177\2\u1619\u1618\3\2\2\2\u1619\u161a\3\2\2\2\u161a\u161c"+
		"\3\2\2\2\u161b\u161d\5\u02e4\u0173\2\u161c\u161b\3\2\2\2\u161c\u161d\3"+
		"\2\2\2\u161d\u161e\3\2\2\2\u161e\u161f\7\u02a7\2\2\u161f\u16f5\3\2\2\2"+
		"\u1620\u1621\7\u0230\2\2\u1621\u1622\7\u02a6\2\2\u1622\u1625\5\u029c\u014f"+
		"\2\u1623\u1624\7\u024a\2\2\u1624\u1626\tZ\2\2\u1625\u1623\3\2\2\2\u1625"+
		"\u1626\3\2\2\2\u1626\u162b\3\2\2\2\u1627\u1628\7\u02ac\2\2\u1628\u162a"+
		"\5\u029c\u014f\2\u1629\u1627\3\2\2\2\u162a\u162d\3\2\2\2\u162b\u1629\3"+
		"\2\2\2\u162b\u162c\3\2\2\2\u162c\u162e\3\2\2\2\u162d\u162b\3\2\2\2\u162e"+
		"\u162f\7\u02a7\2\2\u162f\u16f5\3\2\2\2\u1630\u1631\7\u0232\2\2\u1631\u1632"+
		"\7\u02a6\2\2\u1632\u1633\5\u029c\u014f\2\u1633\u1635\7\24\2\2\u1634\u1636"+
		"\7\u01b7\2\2\u1635\u1634\3\2\2\2\u1635\u1636\3\2\2\2\u1636\u1637\3\2\2"+
		"\2\u1637\u1638\5\u0374\u01bb\2\u1638\u1639\7\u02a7\2\2\u1639\u16f5\3\2"+
		"\2\2\u163a\u163b\7\u0293\2\2\u163b\u1643\7\u02a6\2\2\u163c\u163e\tS\2"+
		"\2\u163d\u163c\3\2\2\2\u163d\u163e\3\2\2\2\u163e\u1640\3\2\2\2\u163f\u1641"+
		"\5\u038e\u01c8\2\u1640\u163f\3\2\2\2\u1640\u1641\3\2\2\2\u1641\u1642\3"+
		"\2\2\2\u1642\u1644\7\u00d2\2\2\u1643\u163d\3\2\2\2\u1643\u1644\3\2\2\2"+
		"\u1644\u1645\3\2\2\2\u1645\u1646\5\u02ae\u0158\2\u1646\u1647\7\u02a7\2"+
		"\2\u1647\u16f5\3\2\2\2\u1648\u1649\7\u0262\2\2\u1649\u164a\7\u02a6\2\2"+
		"\u164a\u164c\5\u029c\u014f\2\u164b\u164d\5\u024c\u0127\2\u164c\u164b\3"+
		"\2\2\2\u164c\u164d\3\2\2\2\u164d\u164e\3\2\2\2\u164e\u1651\7\u02a7\2\2"+
		"\u164f\u1650\7\u029f\2\2\u1650\u1652\5\u0380\u01c1\2\u1651\u164f\3\2\2"+
		"\2\u1651\u1652\3\2\2\2\u1652\u16f5\3\2\2\2\u1653\u1654\t[\2\2\u1654\u1659"+
		"\7\u02a6\2\2\u1655\u1657\7\u02ac\2\2\u1656\u1655\3\2\2\2\u1656\u1657\3"+
		"\2\2\2\u1657\u1658\3\2\2\2\u1658\u165a\5\u02f8\u017d\2\u1659\u1656\3\2"+
		"\2\2\u165a\u165b\3\2\2\2\u165b\u1659\3\2\2\2\u165b\u165c\3\2\2\2\u165c"+
		"\u165d\3\2\2\2\u165d\u1660\7\u02a7\2\2\u165e\u165f\7\u029f\2\2\u165f\u1661"+
		"\5\u0380\u01c1\2\u1660\u165e\3\2\2\2\u1660\u1661\3\2\2\2\u1661\u16f5\3"+
		"\2\2\2\u1662\u1663\7\u0266\2\2\u1663\u1665\7\u02a6\2\2\u1664\u1666\t\\"+
		"\2\2\u1665\u1664\3\2\2\2\u1665\u1666\3\2\2\2\u1666\u1668\3\2\2\2\u1667"+
		"\u1669\t]\2\2\u1668\u1667\3\2\2\2\u1668\u1669\3\2\2\2\u1669\u166a\3\2"+
		"\2\2\u166a\u166d\5\u029c\u014f\2\u166b\u166c\7\u02ac\2\2\u166c\u166e\5"+
		"\u02f0\u0179\2\u166d\u166b\3\2\2\2\u166d\u166e\3\2\2\2\u166e\u1676\3\2"+
		"\2\2\u166f\u1670\7\u02ac\2\2\u1670\u1672\5\u029c\u014f\2\u1671\u1673\5"+
		"\u030c\u0187\2\u1672\u1671\3\2\2\2\u1672\u1673\3\2\2\2\u1673\u1675\3\2"+
		"\2\2\u1674\u166f\3\2\2\2\u1675\u1678\3\2\2\2\u1676\u1674\3\2\2\2\u1676"+
		"\u1677\3\2\2\2\u1677\u1679\3\2\2\2\u1678\u1676\3\2\2\2\u1679\u167c\7\u02a7"+
		"\2\2\u167a\u167b\7\u029f\2\2\u167b\u167d\5\u0380\u01c1\2\u167c\u167a\3"+
		"\2\2\2\u167c\u167d\3\2\2\2\u167d\u16f5\3\2\2\2\u167e\u167f\7\u0267\2\2"+
		"\u167f\u1680\7\u02a6\2\2\u1680\u1682\5\u029c\u014f\2\u1681\u1683\5\u02ee"+
		"\u0178\2\u1682\u1681\3\2\2\2\u1682\u1683\3\2\2\2\u1683\u1684\3\2\2\2\u1684"+
		"\u1685\7\u02a7\2\2\u1685\u16f5\3\2\2\2\u1686\u1687\7\u026a\2\2\u1687\u1688"+
		"\7\u02a6\2\2\u1688\u1689\t^\2\2\u1689\u168b\5\u02ae\u0158\2\u168a\u168c"+
		"\7\u0258\2\2\u168b\u168a\3\2\2\2\u168b\u168c\3\2\2\2\u168c\u168d\3\2\2"+
		"\2\u168d\u1690\7\u02a7\2\2\u168e\u168f\7\u029f\2\2\u168f\u1691\5\u0380"+
		"\u01c1\2\u1690\u168e\3\2\2\2\u1690\u1691\3\2\2\2\u1691\u16f5\3\2\2\2\u1692"+
		"\u1693\7\u026b\2\2\u1693\u1698\7\u02a6\2\2\u1694\u1695\7\u0141\2\2\u1695"+
		"\u1699\5\u0390\u01c9\2\u1696\u1697\7\u00ac\2\2\u1697\u1699\5\u02ae\u0158"+
		"\2\u1698\u1694\3\2\2\2\u1698\u1696\3\2\2\2\u1699\u169c\3\2\2\2\u169a\u169b"+
		"\7\u02ac\2\2\u169b\u169d\5\u02ae\u0158\2\u169c\u169a\3\2\2\2\u169c\u169d"+
		"\3\2\2\2\u169d\u169e\3\2\2\2\u169e\u16a1\7\u02a7\2\2\u169f\u16a0\7\u029f"+
		"\2\2\u16a0\u16a2\5\u0380\u01c1\2\u16a1\u169f\3\2\2\2\u16a1\u16a2\3\2\2"+
		"\2\u16a2\u16f5\3\2\2\2\u16a3\u16a4\7\u026c\2\2\u16a4\u16a5\7\u02a6\2\2"+
		"\u16a5\u16a7\5\u02ae\u0158\2\u16a6\u16a8\5\u02ee\u0178\2\u16a7\u16a6\3"+
		"\2\2\2\u16a7\u16a8\3\2\2\2\u16a8\u16a9\3\2\2\2\u16a9\u16aa\7\u01c8\2\2"+
		"\u16aa\u16ae\7b\2\2\u16ab\u16ac\7\u0161\2\2\u16ac\u16ad\7\u016f\2\2\u16ad"+
		"\u16af\7\u00a0\2\2\u16ae\u16ab\3\2\2\2\u16ae\u16af\3\2\2\2\u16af\u16b0"+
		"\3\2\2\2\u16b0\u16b3\7\u02a7\2\2\u16b1\u16b2\7\u029f\2\2\u16b2\u16b4\5"+
		"\u0380\u01c1\2\u16b3\u16b1\3\2\2\2\u16b3\u16b4\3\2\2\2\u16b4\u16f5\3\2"+
		"\2\2\u16b5\u16b6\7\u026d\2\2\u16b6\u16b7\7\u02a6\2\2\u16b7\u16ba\5\u02ae"+
		"\u0158\2\u16b8\u16b9\7\u02ac\2\2\u16b9\u16bb\5\u02fa\u017e\2\u16ba\u16b8"+
		"\3\2\2\2\u16ba\u16bb\3\2\2\2\u16bb\u16be\3\2\2\2\u16bc\u16bd\7\u02ac\2"+
		"\2\u16bd\u16bf\5\u02fc\u017f\2\u16be\u16bc\3\2\2\2\u16be\u16bf\3\2\2\2"+
		"\u16bf\u16c0\3\2\2\2\u16c0\u16c3\7\u02a7\2\2\u16c1\u16c2\7\u029f\2\2\u16c2"+
		"\u16c4\5\u0380\u01c1\2\u16c3\u16c1\3\2\2\2\u16c3\u16c4\3\2\2\2\u16c4\u16f5"+
		"\3\2\2\2\u16c5\u16c6\7\u026e\2\2\u16c6\u16c7\7\u02a6\2\2\u16c7\u16c8\t"+
		"^\2\2\u16c8\u16cb\5\u02ae\u0158\2\u16c9\u16ca\7\24\2\2\u16ca\u16cc\5\u0374"+
		"\u01bb\2\u16cb\u16c9\3\2\2\2\u16cb\u16cc\3\2\2\2\u16cc\u16ce\3\2\2\2\u16cd"+
		"\u16cf\5\u02fe\u0180\2\u16ce\u16cd\3\2\2\2\u16ce\u16cf\3\2\2\2\u16cf\u16d1"+
		"\3\2\2\2\u16d0\u16d2\5\u0300\u0181\2\u16d1\u16d0\3\2\2\2\u16d1\u16d2\3"+
		"\2\2\2\u16d2\u16d4\3\2\2\2\u16d3\u16d5\5\u0302\u0182\2\u16d4\u16d3\3\2"+
		"\2\2\u16d4\u16d5\3\2\2\2\u16d5\u16d8\3\2\2\2\u16d6\u16d7\t_\2\2\u16d7"+
		"\u16d9\7\u0083\2\2\u16d8\u16d6\3\2\2\2\u16d8\u16d9\3\2\2\2\u16d9\u16da"+
		"\3\2\2\2\u16da\u16dd\7\u02a7\2\2\u16db\u16dc\7\u029f\2\2\u16dc\u16de\5"+
		"\u0380\u01c1\2\u16dd\u16db\3\2\2\2\u16dd\u16de\3\2\2\2\u16de\u16f5\3\2"+
		"\2\2\u16df\u16e0\7\u026f\2\2\u16e0\u16e2\7\u02a6\2\2\u16e1\u16e3\5\u02f2"+
		"\u017a\2\u16e2\u16e1\3\2\2\2\u16e2\u16e3\3\2\2\2\u16e3\u16e4\3\2\2\2\u16e4"+
		"\u16e6\5\u02ae\u0158\2\u16e5\u16e7\5\u02ee\u0178\2\u16e6\u16e5\3\2\2\2"+
		"\u16e6\u16e7\3\2\2\2\u16e7\u16ed\3\2\2\2\u16e8\u16e9\7P\2\2\u16e9\u16ea"+
		"\5\u02f4\u017b\2\u16ea\u16eb\7\u02ac\2\2\u16eb\u16ec\5\u02f4\u017b\2\u16ec"+
		"\u16ee\3\2\2\2\u16ed\u16e8\3\2\2\2\u16ed\u16ee\3\2\2\2\u16ee\u16ef\3\2"+
		"\2\2\u16ef\u16f2\7\u02a7\2\2\u16f0\u16f1\7\u029f\2\2\u16f1\u16f3\5\u0380"+
		"\u01c1\2\u16f2\u16f0\3\2\2\2\u16f2\u16f3\3\2\2\2\u16f3\u16f5\3\2\2\2\u16f4"+
		"\u15b9\3\2\2\2\u16f4\u15be\3\2\2\2\u16f4\u15c3\3\2\2\2\u16f4\u15d0\3\2"+
		"\2\2\u16f4\u15de\3\2\2\2\u16f4\u15ea\3\2\2\2\u16f4\u15f5\3\2\2\2\u16f4"+
		"\u15fc\3\2\2\2\u16f4\u15ff\3\2\2\2\u16f4\u1607\3\2\2\2\u16f4\u160e\3\2"+
		"\2\2\u16f4\u1615\3\2\2\2\u16f4\u1620\3\2\2\2\u16f4\u1630\3\2\2\2\u16f4"+
		"\u163a\3\2\2\2\u16f4\u1648\3\2\2\2\u16f4\u1653\3\2\2\2\u16f4\u1662\3\2"+
		"\2\2\u16f4\u167e\3\2\2\2\u16f4\u1686\3\2\2\2\u16f4\u1692\3\2\2\2\u16f4"+
		"\u16a3\3\2\2\2\u16f4\u16b5\3\2\2\2\u16f4\u16c5\3\2\2\2\u16f4\u16df\3\2"+
		"\2\2\u16f5\u02d5\3\2\2\2\u16f6\u16f7\t`\2\2\u16f7\u02d7\3\2\2\2\u16f8"+
		"\u16f9\ta\2\2\u16f9\u02d9\3\2\2\2\u16fa\u16fb\tb\2\2\u16fb\u02db\3\2\2"+
		"\2\u16fc\u16fd\7\u017c\2\2\u16fd\u16ff\7\u02a6\2\2\u16fe\u1700\5\u0208"+
		"\u0105\2\u16ff\u16fe\3\2\2\2\u16ff\u1700\3\2\2\2\u1700\u1705\3\2\2\2\u1701"+
		"\u1703\5\u024c\u0127\2\u1702\u1704\5\u02de\u0170\2\u1703\u1702\3\2\2\2"+
		"\u1703\u1704\3\2\2\2\u1704\u1706\3\2\2\2\u1705\u1701\3\2\2\2\u1705\u1706"+
		"\3\2\2\2\u1706\u1707\3\2\2\2\u1707\u1708\7\u02a7\2\2\u1708\u02dd\3\2\2"+
		"\2\u1709\u1710\5\u02e0\u0171\2\u170a\u170b\7)\2\2\u170b\u170c\5\u02e2"+
		"\u0172\2\u170c\u170d\7\20\2\2\u170d\u170e\5\u02e2\u0172\2\u170e\u1711"+
		"\3\2\2\2\u170f\u1711\5\u02e2\u0172\2\u1710\u170a\3\2\2\2\u1710\u170f\3"+
		"\2\2\2\u1711\u02df\3\2\2\2\u1712\u1713\tc\2\2\u1713\u02e1\3\2\2\2\u1714"+
		"\u1715\7\u0239\2\2\u1715\u171c\7\u019b\2\2\u1716\u1717\7n\2\2\u1717\u171c"+
		"\7\u01d4\2\2\u1718\u1719\5\u02ae\u0158\2\u1719\u171a\td\2\2\u171a\u171c"+
		"\3\2\2\2\u171b\u1714\3\2\2\2\u171b\u1716\3\2\2\2\u171b\u1718\3\2\2\2\u171c"+
		"\u02e3\3\2\2\2\u171d\u1727\7\u024a\2\2\u171e\u1728\7\u02a9\2\2\u171f\u1721"+
		"\7\u02ac\2\2\u1720\u171f\3\2\2\2\u1720\u1721\3\2\2\2\u1721\u1722\3\2\2"+
		"\2\u1722\u1724\5\u02e6\u0174\2\u1723\u1720\3\2\2\2\u1724\u1725\3\2\2\2"+
		"\u1725\u1723\3\2\2\2\u1725\u1726\3\2\2\2\u1726\u1728\3\2\2\2\u1727\u171e"+
		"\3\2\2\2\u1727\u1723\3\2\2\2\u1728\u02e5\3\2\2\2\u1729\u172b\7\u00f4\2"+
		"\2\u172a\u172c\7\u017b\2\2\u172b\u172a\3\2\2\2\u172b\u172c\3\2\2\2\u172c"+
		"\u172f\3\2\2\2\u172d\u172f\7\u017b\2\2\u172e\u1729\3\2\2\2\u172e\u172d"+
		"\3\2\2\2\u172e\u172f\3\2\2\2\u172f\u1730\3\2\2\2\u1730\u1732\5\u01f6\u00fc"+
		"\2\u1731\u1733\5\u030c\u0187\2\u1732\u1731\3\2\2\2\u1732\u1733\3\2\2\2"+
		"\u1733\u02e7\3\2\2\2\u1734\u1735\7\u0175\2\2\u1735\u1736\79\2\2\u1736"+
		"\u1737\5\u02ae\u0158\2\u1737\u02e9\3\2\2\2\u1738\u1739\7\u025d\2\2\u1739"+
		"\u173a\7\u00d9\2\2\u173a\u173b\7\u02a6\2\2\u173b\u173c\5\u024c\u0127\2"+
		"\u173c\u173d\7\u02a7\2\2\u173d\u1740\3\2\2\2\u173e\u1740\5\u02dc\u016f"+
		"\2\u173f\u1738\3\2\2\2\u173f\u173e\3\2\2\2\u1740\u02eb\3\2\2\2\u1741\u1757"+
		"\7h\2\2\u1742\u1744\7\u013b\2\2\u1743\u1745\7\37\2\2\u1744\u1743\3\2\2"+
		"\2\u1744\u1745\3\2\2\2\u1745\u1758\3\2\2\2\u1746\u174b\7\u02a6\2\2\u1747"+
		"\u1749\7\u02ac\2\2\u1748\u1747\3\2\2\2\u1748\u1749\3\2\2\2\u1749\u174a"+
		"\3\2\2\2\u174a\u174c\5\u0316\u018c\2\u174b\u1748\3\2\2\2\u174c\u174d\3"+
		"\2\2\2\u174d\u174b\3\2\2\2\u174d\u174e\3\2\2\2\u174e\u174f\3\2\2\2\u174f"+
		"\u1750\7\u02a7\2\2\u1750\u1751\7\u024c\2\2\u1751\u1753\7\u02a6\2\2\u1752"+
		"\u1754\5\u029a\u014e\2\u1753\u1752\3\2\2\2\u1753\u1754\3\2\2\2\u1754\u1755"+
		"\3\2\2\2\u1755\u1756\7\u02a7\2\2\u1756\u1758\3\2\2\2\u1757\u1742\3\2\2"+
		"\2\u1757\u1746\3\2\2\2\u1758\u02ed\3\2\2\2\u1759\u175c\7\u0184\2\2\u175a"+
		"\u175b\79\2\2\u175b\u175d\7\u024d\2\2\u175c\u175a\3\2\2\2\u175c\u175d"+
		"\3\2\2\2\u175d\u175e\3\2\2\2\u175e\u1760\5\u029c\u014f\2\u175f\u1761\5"+
		"\u030c\u0187\2\u1760\u175f\3\2\2\2\u1760\u1761\3\2\2\2\u1761\u1762\3\2"+
		"\2\2\u1762\u1763\7\u02ac\2\2\u1763\u1765\5\u029c\u014f\2\u1764\u1766\5"+
		"\u030c\u0187\2\u1765\u1764\3\2\2\2\u1765\u1766\3\2\2\2\u1766\u02ef\3\2"+
		"\2\2\u1767\u1768\7\u0263\2\2\u1768\u176a\7\u02a6\2\2\u1769\u176b\t\\\2"+
		"\2\u176a\u1769\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u176d\3\2\2\2\u176c\u176e"+
		"\te\2\2\u176d\u176c\3\2\2\2\u176d\u176e\3\2\2\2\u176e\u1773\3\2\2\2\u176f"+
		"\u1771\7\u02ac\2\2\u1770\u176f\3\2\2\2\u1770\u1771\3\2\2\2\u1771\u1772"+
		"\3\2\2\2\u1772\u1774\5\u02f8\u017d\2\u1773\u1770\3\2\2\2\u1774\u1775\3"+
		"\2\2\2\u1775\u1773\3\2\2\2\u1775\u1776\3\2\2\2\u1776\u1777\3\2\2\2\u1777"+
		"\u1778\7\u02a7\2\2\u1778\u02f1\3\2\2\2\u1779\u177a\7\u0269\2\2\u177a\u177e"+
		"\7\u02a6\2\2\u177b\u177c\5\u02ae\u0158\2\u177c\u177d\5\u030c\u0187\2\u177d"+
		"\u177f\3\2\2\2\u177e\u177b\3\2\2\2\u177e\u177f\3\2\2\2\u177f\u1786\3\2"+
		"\2\2\u1780\u1781\7\u02ac\2\2\u1781\u1782\5\u02ae\u0158\2\u1782\u1783\5"+
		"\u030c\u0187\2\u1783\u1785\3\2\2\2\u1784\u1780\3\2\2\2\u1785\u1788\3\2"+
		"\2\2\u1786\u1784\3\2\2\2\u1786\u1787\3\2\2\2\u1787\u178a\3\2\2\2\u1788"+
		"\u1786\3\2\2\2\u1789\u178b\5\u02f6\u017c\2\u178a\u1789\3\2\2\2\u178a\u178b"+
		"\3\2\2\2\u178b\u178c\3\2\2\2\u178c\u178d\7\u02a7\2\2\u178d\u02f3\3\2\2"+
		"\2\u178e\u1799\5\u0314\u018b\2\u178f\u1790\7\u00cf\2\2\u1790\u179a\7\u0176"+
		"\2\2\u1791\u1794\5\u0374\u01bb\2\u1792\u1793\7\u0186\2\2\u1793\u1795\5"+
		"\u02ae\u0158\2\u1794\u1792\3\2\2\2\u1794\u1795\3\2\2\2\u1795\u1797\3\2"+
		"\2\2\u1796\u1798\5\u02f6\u017c\2\u1797\u1796\3\2\2\2\u1797\u1798\3\2\2"+
		"\2\u1798\u179a\3\2\2\2\u1799\u178f\3\2\2\2\u1799\u1791\3\2\2\2\u179a\u02f5"+
		"\3\2\2\2\u179b\u179c\7\u0082\2\2\u179c\u179d\5\u02ae\u0158\2\u179d\u02f7"+
		"\3\2\2\2\u179e\u17a5\5\u029c\u014f\2\u179f\u17a3\7\24\2\2\u17a0\u17a4"+
		"\5\u0392\u01ca\2\u17a1\u17a2\7\u00ac\2\2\u17a2\u17a4\5\u02ae\u0158\2\u17a3"+
		"\u17a0\3\2\2\2\u17a3\u17a1\3\2\2\2\u17a4\u17a6\3\2\2\2\u17a5\u179f\3\2"+
		"\2\2\u17a5\u17a6\3\2\2\2\u17a6\u02f9\3\2\2\2\u17a7\u17ab\7\u0254\2\2\u17a8"+
		"\u17a9\7\u0158\2\2\u17a9\u17ac\7\u024d\2\2\u17aa\u17ac\5\u029c\u014f\2"+
		"\u17ab\u17a8\3\2\2\2\u17ab\u17aa\3\2\2\2\u17ac\u02fb\3\2\2\2\u17ad\u17b3"+
		"\7\u0203\2\2\u17ae\u17b4\7\u0272\2\2\u17af\u17b1\7\u0158\2\2\u17b0\u17b2"+
		"\7\u024d\2\2\u17b1\u17b0\3\2\2\2\u17b1\u17b2\3\2\2\2\u17b2\u17b4\3\2\2"+
		"\2\u17b3\u17ae\3\2\2\2\u17b3\u17af\3\2\2\2\u17b4\u02fd\3\2\2\2\u17b5\u17b6"+
		"\7\u00a2\2\2\u17b6\u17b7\5\u02ae\u0158\2\u17b7\u02ff\3\2\2\2\u17b8\u17b9"+
		"\7\u0254\2\2\u17b9\u17ba\5\u02ae\u0158\2\u17ba\u0301\3\2\2\2\u17bb\u17bc"+
		"\7\u0158\2\2\u17bc\u17c4\7\u00ec\2\2\u17bd\u17c1\7\u00ec\2\2\u17be\u17bf"+
		"\7\u01f6\2\2\u17bf\u17c0\7\u02ba\2\2\u17c0\u17c2\5\u02ae\u0158\2\u17c1"+
		"\u17be\3\2\2\2\u17c1\u17c2\3\2\2\2\u17c2\u17c4\3\2\2\2\u17c3\u17bb\3\2"+
		"\2\2\u17c3\u17bd\3\2\2\2\u17c4\u0303\3\2\2\2\u17c5\u17ce\7\u02ad\2\2\u17c6"+
		"\u17ce\7\u00b7\2\2\u17c7\u17ce\7\u02c1\2\2\u17c8\u17c9\7\u01f0\2\2\u17c9"+
		"\u17ce\tf\2\2\u17ca\u17ce\7\u02c2\2\2\u17cb\u17ce\5\u0306\u0184\2\u17cc"+
		"\u17ce\5\u0308\u0185\2\u17cd\u17c5\3\2\2\2\u17cd\u17c6\3\2\2\2\u17cd\u17c7"+
		"\3\2\2\2\u17cd\u17c8\3\2\2\2\u17cd\u17ca\3\2\2\2\u17cd\u17cb\3\2\2\2\u17cd"+
		"\u17cc\3\2\2\2\u17ce\u0305\3\2\2\2\u17cf\u17d0\7\u0259\2\2\u17d0\u17d6"+
		"\tg\2\2\u17d1\u17d2\7\u00b7\2\2\u17d2\u17d3\th\2\2\u17d3\u17d7\ti\2\2"+
		"\u17d4\u17d5\7d\2\2\u17d5\u17d7\tj\2\2\u17d6\u17d1\3\2\2\2\u17d6\u17d4"+
		"\3\2\2\2\u17d7\u0307\3\2\2\2\u17d8\u17d9\7\u01ec\2\2\u17d9\u17df\5\u0396"+
		"\u01cc\2\u17da\u17e0\7\u02a2\2\2\u17db\u17e0\7\u016f\2\2\u17dc\u17e0\7"+
		"\u0168\2\2\u17dd\u17e0\5\u038a\u01c6\2\u17de\u17e0\5\u0396\u01cc\2\u17df"+
		"\u17da\3\2\2\2\u17df\u17db\3\2\2\2\u17df\u17dc\3\2\2\2\u17df\u17dd\3\2"+
		"\2\2\u17df\u17de\3\2\2\2\u17e0\u0309\3\2\2\2\u17e1\u17e3\tk\2\2\u17e2"+
		"\u17e4\7\u00cf\2\2\u17e3\u17e2\3\2\2\2\u17e3\u17e4\3\2\2\2\u17e4\u17e5"+
		"\3\2\2\2\u17e5\u17e7\7\u02a6\2\2\u17e6\u17e8\5\u029a\u014e\2\u17e7\u17e6"+
		"\3\2\2\2\u17e7\u17e8\3\2\2\2\u17e8\u17e9\3\2\2\2\u17e9\u17ea\7\u02a7\2"+
		"\2\u17ea\u030b\3\2\2\2\u17eb\u17ed\7\24\2\2\u17ec\u17eb\3\2\2\2\u17ec"+
		"\u17ed\3\2\2\2\u17ed\u17f0\3\2\2\2\u17ee\u17f1\5\u0390\u01c9\2\u17ef\u17f1"+
		"\5\u038e\u01c8\2\u17f0\u17ee\3\2\2\2\u17f0\u17ef\3\2\2\2\u17f1\u17f4\3"+
		"\2\2\2\u17f2\u17f4\7\24\2\2\u17f3\u17ec\3\2\2\2\u17f3\u17f2\3\2\2\2\u17f4"+
		"\u030d\3\2\2\2\u17f5\u17f8\5\u0390\u01c9\2\u17f6\u17f8\5\u038e\u01c8\2"+
		"\u17f7\u17f5\3\2\2\2\u17f7\u17f6\3\2\2\2\u17f8\u030f\3\2\2\2\u17f9\u17fe"+
		"\7\u025b\2\2\u17fa\u17fb\7n\2\2\u17fb\u17fc\7\u0169\2\2\u17fc\u17ff\5"+
		"\u034c\u01a7\2\u17fd\u17ff\5\u029c\u014f\2\u17fe\u17fa\3\2\2\2\u17fe\u17fd"+
		"\3\2\2\2\u17ff\u0311\3\2\2\2\u1800\u1801\78\2\2\u1801\u1803\7N\2\2\u1802"+
		"\u1800\3\2\2\2\u1802\u1803\3\2\2\2\u1803\u1804\3\2\2\2\u1804\u1809\7\u0102"+
		"\2\2\u1805\u1807\7\u02ac\2\2\u1806\u1805\3\2\2\2\u1806\u1807\3\2\2\2\u1807"+
		"\u1808\3\2\2\2\u1808\u180a\5\u0348\u01a5\2\u1809\u1806\3\2\2\2\u180a\u180b"+
		"\3\2\2\2\u180b\u1809\3\2\2\2\u180b\u180c\3\2\2\2\u180c\u0313\3\2\2\2\u180d"+
		"\u1810\5\u0390\u01c9\2\u180e\u1810\5\u038e\u01c8\2\u180f\u180d\3\2\2\2"+
		"\u180f\u180e\3\2\2\2\u1810\u0315\3\2\2\2\u1811\u1812\5\u0390\u01c9\2\u1812"+
		"\u0317\3\2\2\2\u1813\u1814\5\u0390\u01c9\2\u1814\u0319\3\2\2\2\u1815\u1816"+
		"\5\u0390\u01c9\2\u1816\u031b\3\2\2\2\u1817\u1818\5\u0390\u01c9\2\u1818"+
		"\u031d\3\2\2\2\u1819\u181a\5\u0390\u01c9\2\u181a\u031f\3\2\2\2\u181b\u181c"+
		"\5\u0390\u01c9\2\u181c\u0321\3\2\2\2\u181d\u1822\5\u0390\u01c9\2\u181e"+
		"\u181f\7\u029f\2\2\u181f\u1821\5\u0392\u01ca\2\u1820\u181e\3\2\2\2\u1821"+
		"\u1824\3\2\2\2\u1822\u1820\3\2\2\2\u1822\u1823\3\2\2\2\u1823\u1827\3\2"+
		"\2\2\u1824\u1822\3\2\2\2\u1825\u1826\7\u02ae\2\2\u1826\u1828\5\u0352\u01aa"+
		"\2\u1827\u1825\3\2\2\2\u1827\u1828\3\2\2\2\u1828\u0323\3\2\2\2\u1829\u182a"+
		"\5\u0390\u01c9\2\u182a\u0325\3\2\2\2\u182b\u182e\5\u0390\u01c9\2\u182c"+
		"\u182d\7\u029f\2\2\u182d\u182f\5\u0392\u01ca\2\u182e\u182c\3\2\2\2\u182e"+
		"\u182f\3\2\2\2\u182f\u0327\3\2\2\2\u1830\u1831\5\u0390\u01c9\2\u1831\u0329"+
		"\3\2\2\2\u1832\u1833\5\u0390\u01c9\2\u1833\u032b\3\2\2\2\u1834\u1835\5"+
		"\u0390\u01c9\2\u1835\u032d\3\2\2\2\u1836\u1839\5\u0390\u01c9\2\u1837\u1838"+
		"\7\u029f\2\2\u1838\u183a\5\u0392\u01ca\2\u1839\u1837\3\2\2\2\u1839\u183a"+
		"\3\2\2\2\u183a\u032f\3\2\2\2\u183b\u1840\5\u0390\u01c9\2\u183c\u183d\7"+
		"\u029f\2\2\u183d\u183f\5\u0392\u01ca\2\u183e\u183c\3\2\2\2\u183f\u1842"+
		"\3\2\2\2\u1840\u183e\3\2\2\2\u1840\u1841\3\2\2\2\u1841\u0331\3\2\2\2\u1842"+
		"\u1840\3\2\2\2\u1843\u1844\5\u0390\u01c9\2\u1844\u0333\3\2\2\2\u1845\u1847"+
		"\5\u0392\u01ca\2\u1846\u1848\5\u00bc_\2\u1847\u1846\3\2\2\2\u1847\u1848"+
		"\3\2\2\2\u1848\u0335\3\2\2\2\u1849\u184c\5\u0392\u01ca\2\u184a\u184c\7"+
		"[\2\2\u184b\u1849\3\2\2\2\u184b\u184a\3\2\2\2\u184c\u0337\3\2\2\2\u184d"+
		"\u1852\5\u0390\u01c9\2\u184e\u184f\7\u029f\2\2\u184f\u1851\5\u0392\u01ca"+
		"\2\u1850\u184e\3\2\2\2\u1851\u1854\3\2\2\2\u1852\u1850\3\2\2\2\u1852\u1853"+
		"\3\2\2\2\u1853\u1857\3\2\2\2\u1854\u1852\3\2\2\2\u1855\u1856\7\u02ae\2"+
		"\2\u1856\u1858\5\u0352\u01aa\2\u1857\u1855\3\2\2\2\u1857\u1858\3\2\2\2"+
		"\u1858\u0339\3\2\2\2\u1859\u185a\5\u0392\u01ca\2\u185a\u033b\3\2\2\2\u185b"+
		"\u1860\5\u0392\u01ca\2\u185c\u185d\7\u029f\2\2\u185d\u185f\5\u0392\u01ca"+
		"\2\u185e\u185c\3\2\2\2\u185f\u1862\3\2\2\2\u1860\u185e\3\2\2\2\u1860\u1861"+
		"\3\2\2\2\u1861\u033d\3\2\2\2\u1862\u1860\3\2\2\2\u1863\u1868\5\u0392\u01ca"+
		"\2\u1864\u1865\7\u029f\2\2\u1865\u1867\5\u0392\u01ca\2\u1866\u1864\3\2"+
		"\2\2\u1867\u186a\3\2\2\2\u1868\u1866\3\2\2\2\u1868\u1869\3\2\2\2\u1869"+
		"\u033f\3\2\2\2\u186a\u1868\3\2\2\2\u186b\u1870\5\u0390\u01c9\2\u186c\u186d"+
		"\7\u029f\2\2\u186d\u186f\5\u0392\u01ca\2\u186e\u186c\3\2\2\2\u186f\u1872"+
		"\3\2\2\2\u1870\u186e\3\2\2\2\u1870\u1871\3\2\2\2\u1871\u0341\3\2\2\2\u1872"+
		"\u1870\3\2\2\2\u1873\u1876\5\u0390\u01c9\2\u1874\u1875\7\u029f\2\2\u1875"+
		"\u1877\5\u0392\u01ca\2\u1876\u1874\3\2\2\2\u1876\u1877\3\2\2\2\u1877\u0343"+
		"\3\2\2\2\u1878\u187b\5\u0390\u01c9\2\u1879\u187a\7\u029f\2\2\u187a\u187c"+
		"\5\u0392\u01ca\2\u187b\u1879\3\2\2\2\u187b\u187c\3\2\2\2\u187c\u0345\3"+
		"\2\2\2\u187d\u1880\5\u0390\u01c9\2\u187e\u187f\7\u029f\2\2\u187f\u1881"+
		"\5\u0392\u01ca\2\u1880\u187e\3\2\2\2\u1880\u1881\3\2\2\2\u1881\u0347\3"+
		"\2\2\2\u1882\u1883\7\u02bd\2\2\u1883\u1885\5\u0358\u01ad\2\u1884\u1882"+
		"\3\2\2\2\u1884\u1885\3\2\2\2\u1885\u1886\3\2\2\2\u1886\u1889\5\u0392\u01ca"+
		"\2\u1887\u1888\7\u029f\2\2\u1888\u188a\5\u0392\u01ca\2\u1889\u1887\3\2"+
		"\2\2\u1889\u188a\3\2\2\2\u188a\u188d\3\2\2\2\u188b\u188d\5\u037c\u01bf"+
		"\2\u188c\u1884\3\2\2\2\u188c\u188b\3\2\2\2\u188d\u0349\3\2\2\2\u188e\u1891"+
		"\5\u0390\u01c9\2\u188f\u1890\7\u029f\2\2\u1890\u1892\5\u0392\u01ca\2\u1891"+
		"\u188f\3\2\2\2\u1891\u1892\3\2\2\2\u1892\u034b\3\2\2\2\u1893\u1896\5\u037e"+
		"\u01c0\2\u1894\u1896\5\u037c\u01bf\2\u1895\u1893\3\2\2\2\u1895\u1894\3"+
		"\2\2\2\u1896\u034d\3\2\2\2\u1897\u189a\5\u0390\u01c9\2\u1898\u189a\5\u037c"+
		"\u01bf\2\u1899\u1897\3\2\2\2\u1899\u1898\3\2\2\2\u189a\u034f\3\2\2\2\u189b"+
		"\u189e\5\u0390\u01c9\2\u189c\u189d\7\u029f\2\2\u189d\u189f\5\u0392\u01ca"+
		"\2\u189e\u189c\3\2\2\2\u189e\u189f\3\2\2\2\u189f\u0351\3\2\2\2\u18a0\u18a1"+
		"\5\u0390\u01c9\2\u18a1\u0353\3\2\2\2\u18a2\u18a7\5\u0390\u01c9\2\u18a3"+
		"\u18a4\7\u029f\2\2\u18a4\u18a6\5\u0392\u01ca\2\u18a5\u18a3\3\2\2\2\u18a6"+
		"\u18a9\3\2\2\2\u18a7\u18a5\3\2\2\2\u18a7\u18a8\3\2\2\2\u18a8\u0355\3\2"+
		"\2\2\u18a9\u18a7\3\2\2\2\u18aa\u18ad\5\u0390\u01c9\2\u18ab\u18ac\7\u029f"+
		"\2\2\u18ac\u18ae\5\u0392\u01ca\2\u18ad\u18ab\3\2\2\2\u18ad\u18ae\3\2\2"+
		"\2\u18ae\u18b2\3\2\2\2\u18af\u18b0\7\u02ae\2\2\u18b0\u18b3\5\u0352\u01aa"+
		"\2\u18b1\u18b3\5\u030a\u0186\2\u18b2\u18af\3\2\2\2\u18b2\u18b1\3\2\2\2"+
		"\u18b2\u18b3\3\2\2\2\u18b3\u0357\3\2\2\2\u18b4\u18b9\5\u0392\u01ca\2\u18b5"+
		"\u18b6\7\u029f\2\2\u18b6\u18b8\5\u0392\u01ca\2\u18b7\u18b5\3\2\2\2\u18b8"+
		"\u18bb\3\2\2\2\u18b9\u18b7\3\2\2\2\u18b9\u18ba\3\2\2\2\u18ba\u0359\3\2"+
		"\2\2\u18bb\u18b9\3\2\2\2\u18bc\u18bd\5\u0390\u01c9\2\u18bd\u035b\3\2\2"+
		"\2\u18be\u18bf\5\u0392\u01ca\2\u18bf\u035d\3\2\2\2\u18c0\u18c1\5\u0392"+
		"\u01ca\2\u18c1\u035f\3\2\2\2\u18c2\u18c3\5\u0392\u01ca\2\u18c3\u0361\3"+
		"\2\2\2\u18c4\u18dd\5\u0356\u01ac\2\u18c5\u18ca\7\u0248\2\2\u18c6\u18c8"+
		"\7\u02ac\2\2\u18c7\u18c6\3\2\2\2\u18c7\u18c8\3\2\2\2\u18c8\u18c9\3\2\2"+
		"\2\u18c9\u18cb\5\u0360\u01b1\2\u18ca\u18c7\3\2\2\2\u18cb\u18cc\3\2\2\2"+
		"\u18cc\u18ca\3\2\2\2\u18cc\u18cd\3\2\2\2\u18cd\u18dd\3\2\2\2\u18ce\u18cf"+
		"\7\u0090\2\2\u18cf\u18dd\5\u035e\u01b0\2\u18d0\u18d1\7\u009a\2\2\u18d1"+
		"\u18dd\5\u035c\u01af\2\u18d2\u18d3\7\u0136\2\2\u18d3\u18d4\7\u013b\2\2"+
		"\u18d4\u18dd\5\u035c\u01af\2\u18d5\u18d6\7\u0107\2\2\u18d6\u18d7\tl\2"+
		"\2\u18d7\u18dd\5\u035c\u01af\2\u18d8\u18d9\7\u0202\2\2\u18d9\u18da\7\u0231"+
		"\2\2\u18da\u18db\7\u01a5\2\2\u18db\u18dd\5\u035c\u01af\2\u18dc\u18c4\3"+
		"\2\2\2\u18dc\u18c5\3\2\2\2\u18dc\u18ce\3\2\2\2\u18dc\u18d0\3\2\2\2\u18dc"+
		"\u18d2\3\2\2\2\u18dc\u18d5\3\2\2\2\u18dc\u18d8\3\2\2\2\u18dd\u0363\3\2"+
		"\2\2\u18de\u18e0\7\u02ac\2\2\u18df\u18de\3\2\2\2\u18df\u18e0\3\2\2\2\u18e0"+
		"\u18e1\3\2\2\2\u18e1\u18e3\5\u0354\u01ab\2\u18e2\u18df\3\2\2\2\u18e3\u18e4"+
		"\3\2\2\2\u18e4\u18e2\3\2\2\2\u18e4\u18e5\3\2\2\2\u18e5\u0365\3\2\2\2\u18e6"+
		"\u18e7\7\u02a6\2\2\u18e7\u18e8\5\u0364\u01b3\2\u18e8\u18e9\7\u02a7\2\2"+
		"\u18e9\u0367\3\2\2\2\u18ea\u18eb\7\u010a\2\2\u18eb\u18ec\7\u02a6\2\2\u18ec"+
		"\u18ed\7\u027c\2\2\u18ed\u18ee\tI\2\2\u18ee\u18ef\5\u024c\u0127\2\u18ef"+
		"\u18f1\7\u02a7\2\2\u18f0\u18f2\5\u02dc\u016f\2\u18f1\u18f0\3\2\2\2\u18f1"+
		"\u18f2\3\2\2\2\u18f2\u0369\3\2\2\2\u18f3\u18fa\7\u02a6\2\2\u18f4\u18f6"+
		"\7\u02ac\2\2\u18f5\u18f4\3\2\2\2\u18f5\u18f6\3\2\2\2\u18f6\u18f7\3\2\2"+
		"\2\u18f7\u18f9\5\u0372\u01ba\2\u18f8\u18f5\3\2\2\2\u18f9\u18fc\3\2\2\2"+
		"\u18fa\u18f8\3\2\2\2\u18fa\u18fb\3\2\2\2\u18fb\u18fd\3\2\2\2\u18fc\u18fa"+
		"\3\2\2\2\u18fd\u18ff\7\u02a7\2\2\u18fe\u1900\5\u0368\u01b5\2\u18ff\u18fe"+
		"\3\2\2\2\u18ff\u1900\3\2\2\2\u1900\u036b\3\2\2\2\u1901\u190b\7\u02a6\2"+
		"\2\u1902\u1904\7\u02ac\2\2\u1903\u1902\3\2\2\2\u1903\u1904\3\2\2\2\u1904"+
		"\u1905\3\2\2\2\u1905\u1907\5\u0372\u01ba\2\u1906\u1908\5\u0370\u01b9\2"+
		"\u1907\u1906\3\2\2\2\u1907\u1908\3\2\2\2\u1908\u190a\3\2\2\2\u1909\u1903"+
		"\3\2\2\2\u190a\u190d\3\2\2\2\u190b\u1909\3\2\2\2\u190b\u190c\3\2\2\2\u190c"+
		"\u190e\3\2\2\2\u190d\u190b\3\2\2\2\u190e\u1910\7\u02a7\2\2\u190f\u1911"+
		"\5\u0368\u01b5\2\u1910\u190f\3\2\2\2\u1910\u1911\3\2\2\2\u1911\u036d\3"+
		"\2\2\2\u1912\u1913\7\u02a6\2\2\u1913\u1920\5\u0354\u01ab\2\u1914\u1917"+
		"\7\u02ac\2\2\u1915\u1918\5\u038a\u01c6\2\u1916\u1918\7\u0161\2\2\u1917"+
		"\u1915\3\2\2\2\u1917\u1916\3\2\2\2\u1918\u191e\3\2\2\2\u1919\u191c\7\u02ac"+
		"\2\2\u191a\u191d\5\u038a\u01c6\2\u191b\u191d\7\u0161\2\2\u191c\u191a\3"+
		"\2\2\2\u191c\u191b\3\2\2\2\u191d\u191f\3\2\2\2\u191e\u1919\3\2\2\2\u191e"+
		"\u191f\3\2\2\2\u191f\u1921\3\2\2\2\u1920\u1914\3\2\2\2\u1920\u1921\3\2"+
		"\2\2\u1921\u1922\3\2\2\2\u1922\u1933\7\u024a\2\2\u1923\u1924\5\u0356\u01ac"+
		"\2\u1924\u1925\7\u029f\2\2\u1925\u1926\7\u02a9\2\2\u1926\u1934\3\2\2\2"+
		"\u1927\u1934\7\u02a9\2\2\u1928\u192a\7\u02ac\2\2\u1929\u1928\3\2\2\2\u1929"+
		"\u192a\3\2\2\2\u192a\u192b\3\2\2\2\u192b\u192d\5\u029c\u014f\2\u192c\u192e"+
		"\5\u030c\u0187\2\u192d\u192c\3\2\2\2\u192d\u192e\3\2\2\2\u192e\u1930\3"+
		"\2\2\2\u192f\u1929\3\2\2\2\u1930\u1931\3\2\2\2\u1931\u192f\3\2\2\2\u1931"+
		"\u1932\3\2\2\2\u1932\u1934\3\2\2\2\u1933\u1923\3\2\2\2\u1933\u1927\3\2"+
		"\2\2\u1933\u192f\3\2\2\2\u1934\u1935\3\2\2\2\u1935\u1937\7\u02a7\2\2\u1936"+
		"\u1938\5\u0368\u01b5\2\u1937\u1936\3\2\2\2\u1937\u1938\3\2\2\2\u1938\u036f"+
		"\3\2\2\2\u1939\u193a\tm\2\2\u193a\u193b\7\u0162\2\2\u193b\u0371\3\2\2"+
		"\2\u193c\u193d\5\u0390\u01c9\2\u193d\u193e\7\u02ba\2\2\u193e\u193f\7\u02b5"+
		"\2\2\u193f\u1941\3\2\2\2\u1940\u193c\3\2\2\2\u1940\u1941\3\2\2\2\u1941"+
		"\u1942\3\2\2\2\u1942\u1943\5\u029c\u014f\2\u1943\u0373\3\2\2\2\u1944\u194d"+
		"\5\u0376\u01bc\2\u1945\u1947\7\u01b7\2\2\u1946\u1945\3\2\2\2\u1946\u1947"+
		"\3\2\2\2\u1947\u1948\3\2\2\2\u1948\u194a\5\u033c\u019f\2\u1949\u194b\t"+
		"n\2\2\u194a\u1949\3\2\2\2\u194a\u194b\3\2\2\2\u194b\u194d\3\2\2\2\u194c"+
		"\u1944\3\2\2\2\u194c\u1946\3\2\2\2\u194d\u0375\3\2\2\2\u194e\u1950\5\u037a"+
		"\u01be\2\u194f\u1951\5\u0378\u01bd\2\u1950\u194f\3\2\2\2\u1950\u1951\3"+
		"\2\2\2\u1951\u195b\3\2\2\2\u1952\u1954\7\u025f\2\2\u1953\u1955\7\u011b"+
		"\2\2\u1954\u1953\3\2\2\2\u1954\u1955\3\2\2\2\u1955\u1956\3\2\2\2\u1956"+
		"\u1957\7\u0228\2\2\u1957\u195c\7\u0274\2\2\u1958\u1959\7C\2\2\u1959\u195a"+
		"\7\u01ec\2\2\u195a\u195c\5\u0358\u01ad\2\u195b\u1952\3\2\2\2\u195b\u1958"+
		"\3\2\2\2\u195b\u195c\3\2\2\2\u195c\u196e\3\2\2\2\u195d\u195e\7\u0100\2"+
		"\2\u195e\u1963\to\2\2\u195f\u1960\7\u02a6\2\2\u1960\u1961\5\u029c\u014f"+
		"\2\u1961\u1962\7\u02a7\2\2\u1962\u1964\3\2\2\2\u1963\u195f\3\2\2\2\u1963"+
		"\u1964\3\2\2\2\u1964\u1965\3\2\2\2\u1965\u1966\7\u022d\2\2\u1966\u196b"+
		"\tp\2\2\u1967\u1968\7\u02a6\2\2\u1968\u1969\5\u029c\u014f\2\u1969\u196a"+
		"\7\u02a7\2\2\u196a\u196c\3\2\2\2\u196b\u1967\3\2\2\2\u196b\u196c\3\2\2"+
		"\2\u196c\u196e\3\2\2\2\u196d\u194e\3\2\2\2\u196d\u195d\3\2\2\2\u196e\u0377"+
		"\3\2\2\2\u196f\u1970\7\u02a6\2\2\u1970\u1973\5\u038a\u01c6\2\u1971\u1972"+
		"\7\u02ac\2\2\u1972\u1974\5\u038a\u01c6\2\u1973\u1971\3\2\2\2\u1973\u1974"+
		"\3\2\2\2\u1974\u1976\3\2\2\2\u1975\u1977\tq\2\2\u1976\u1975\3\2\2\2\u1976"+
		"\u1977\3\2\2\2\u1977\u1978\3\2\2\2\u1978\u1979\7\u02a7\2\2\u1979\u0379"+
		"\3\2\2\2\u197a\u19b7\7.\2\2\u197b\u19b7\7\u0194\2\2\u197c\u19b7\7\u0143"+
		"\2\2\u197d\u19b7\7-\2\2\u197e\u19b7\7,\2\2\u197f\u19b7\7\u0144\2\2\u1980"+
		"\u19b7\7\u0198\2\2\u1981\u19b7\7\u0197\2\2\u1982\u19b7\7\u01f3\2\2\u1983"+
		"\u19b7\7\u01f4\2\2\u1984\u19b7\7\u0165\2\2\u1985\u19b7\7}\2\2\u1986\u19b7"+
		"\7\u00fe\2\2\u1987\u19b7\7\u0101\2\2\u1988\u19b7\7\u0164\2\2\u1989\u19b7"+
		"\7\u01f9\2\2\u198a\u19b7\7\u0163\2\2\u198b\u19b7\7~\2\2\u198c\u198e\7"+
		"\u0096\2\2\u198d\u198f\7\u019c\2\2\u198e\u198d\3\2\2\2\u198e\u198f\3\2"+
		"\2\2\u198f\u19b7\3\2\2\2\u1990\u19b7\7\u00c8\2\2\u1991\u19b7\7\u01af\2"+
		"\2\u1992\u19b7\7\u0147\2\2\u1993\u1995\7\u0123\2\2\u1994\u1996\7\u01ad"+
		"\2\2\u1995\u1994\3\2\2\2\u1995\u1996\3\2\2\2\u1996\u19b7\3\2\2\2\u1997"+
		"\u19b7\7D\2\2\u1998\u19b7\7C\2\2\u1999\u19b7\7\u024e\2\2\u199a\u19b7\7"+
		"\u024f\2\2\u199b\u19b7\7\u020c\2\2\u199c\u19b7\7\u01ad\2\2\u199d\u19b7"+
		"\7\63\2\2\u199e\u19b7\7v\2\2\u199f\u19b7\7\u01d3\2\2\u19a0\u19b7\7\u0246"+
		"\2\2\u19a1\u19b7\7\u0271\2\2\u19a2\u19b7\7\u013e\2\2\u19a3\u19b7\7w\2"+
		"\2\u19a4\u19b7\7\u00e2\2\2\u19a5\u19b7\7\u0138\2\2\u19a6\u19b7\7\u01e0"+
		"\2\2\u19a7\u19b7\7\u022a\2\2\u19a8\u19b7\7\u022b\2\2\u19a9\u19b7\7\u022c"+
		"\2\2\u19aa\u19b7\7\u0229\2\2\u19ab\u19b7\7\u0225\2\2\u19ac\u19b7\7\u0227"+
		"\2\2\u19ad\u19b7\7\u0226\2\2\u19ae\u19b7\7\u0224\2\2\u19af\u19b7\7\u0273"+
		"\2\2\u19b0\u19b7\7\u0098\2\2\u19b1\u19b7\7*\2\2\u19b2\u19b7\7/\2\2\u19b3"+
		"\u19b7\7J\2\2\u19b4\u19b7\7\u0148\2\2\u19b5\u19b7\7\u013a\2\2\u19b6\u197a"+
		"\3\2\2\2\u19b6\u197b\3\2\2\2\u19b6\u197c\3\2\2\2\u19b6\u197d\3\2\2\2\u19b6"+
		"\u197e\3\2\2\2\u19b6\u197f\3\2\2\2\u19b6\u1980\3\2\2\2\u19b6\u1981\3\2"+
		"\2\2\u19b6\u1982\3\2\2\2\u19b6\u1983\3\2\2\2\u19b6\u1984\3\2\2\2\u19b6"+
		"\u1985\3\2\2\2\u19b6\u1986\3\2\2\2\u19b6\u1987\3\2\2\2\u19b6\u1988\3\2"+
		"\2\2\u19b6\u1989\3\2\2\2\u19b6\u198a\3\2\2\2\u19b6\u198b\3\2\2\2\u19b6"+
		"\u198c\3\2\2\2\u19b6\u1990\3\2\2\2\u19b6\u1991\3\2\2\2\u19b6\u1992\3\2"+
		"\2\2\u19b6\u1993\3\2\2\2\u19b6\u1997\3\2\2\2\u19b6\u1998\3\2\2\2\u19b6"+
		"\u1999\3\2\2\2\u19b6\u199a\3\2\2\2\u19b6\u199b\3\2\2\2\u19b6\u199c\3\2"+
		"\2\2\u19b6\u199d\3\2\2\2\u19b6\u199e\3\2\2\2\u19b6\u199f\3\2\2\2\u19b6"+
		"\u19a0\3\2\2\2\u19b6\u19a1\3\2\2\2\u19b6\u19a2\3\2\2\2\u19b6\u19a3\3\2"+
		"\2\2\u19b6\u19a4\3\2\2\2\u19b6\u19a5\3\2\2\2\u19b6\u19a6\3\2\2\2\u19b6"+
		"\u19a7\3\2\2\2\u19b6\u19a8\3\2\2\2\u19b6\u19a9\3\2\2\2\u19b6\u19aa\3\2"+
		"\2\2\u19b6\u19ab\3\2\2\2\u19b6\u19ac\3\2\2\2\u19b6\u19ad\3\2\2\2\u19b6"+
		"\u19ae\3\2\2\2\u19b6\u19af\3\2\2\2\u19b6\u19b0\3\2\2\2\u19b6\u19b1\3\2"+
		"\2\2\u19b6\u19b2\3\2\2\2\u19b6\u19b3\3\2\2\2\u19b6\u19b4\3\2\2\2\u19b6"+
		"\u19b5\3\2\2\2\u19b7\u037b\3\2\2\2\u19b8\u19bc\7\u02b0\2\2\u19b9\u19ba"+
		"\7\u02b7\2\2\u19ba\u19bc\7\u02a0\2\2\u19bb\u19b8\3\2\2\2\u19bb\u19b9\3"+
		"\2\2\2\u19bc\u19c5\3\2\2\2\u19bd\u19bf\7\u00f0\2\2\u19be\u19bd\3\2\2\2"+
		"\u19be\u19bf\3\2\2\2\u19bf\u19c3\3\2\2\2\u19c0\u19c4\7\u02b0\2\2\u19c1"+
		"\u19c2\7\u02b7\2\2\u19c2\u19c4\7\u02a0\2\2\u19c3\u19c0\3\2\2\2\u19c3\u19c1"+
		"\3\2\2\2\u19c4\u19c6\3\2\2\2\u19c5\u19be\3\2\2\2\u19c5\u19c6\3\2\2\2\u19c6"+
		"\u19cb\3\2\2\2\u19c7\u19c8\7\u029f\2\2\u19c8\u19ca\5\u0380\u01c1\2\u19c9"+
		"\u19c7\3\2\2\2\u19ca\u19cd\3\2\2\2\u19cb\u19c9\3\2\2\2\u19cb\u19cc\3\2"+
		"\2\2\u19cc\u037d\3\2\2\2\u19cd\u19cb\3\2\2\2\u19ce\u19d3\5\u0380\u01c1"+
		"\2\u19cf\u19d0\7\u029f\2\2\u19d0\u19d2\5\u0380\u01c1\2\u19d1\u19cf\3\2"+
		"\2\2\u19d2\u19d5\3\2\2\2\u19d3\u19d1\3\2\2\2\u19d3\u19d4\3\2\2\2\u19d4"+
		"\u037f\3\2\2\2\u19d5\u19d3\3\2\2\2\u19d6\u19d7\7\u02bd\2\2\u19d7\u19d9"+
		"\5\u0358\u01ad\2\u19d8\u19d6\3\2\2\2\u19d8\u19d9\3\2\2\2\u19d9\u19da\3"+
		"\2\2\2\u19da\u19df\5\u0392\u01ca\2\u19db\u19dc\7\u029f\2\2\u19dc\u19de"+
		"\5\u0392\u01ca\2\u19dd\u19db\3\2\2\2\u19de\u19e1\3\2\2\2\u19df\u19dd\3"+
		"\2\2\2\u19df\u19e0\3\2\2\2\u19e0\u19e4\3\2\2\2\u19e1\u19df\3\2\2\2\u19e2"+
		"\u19e3\7\u02ae\2\2\u19e3\u19e5\5\u0352\u01aa\2\u19e4\u19e2\3\2\2\2\u19e4"+
		"\u19e5\3\2\2\2\u19e5\u19e7\3\2\2\2\u19e6\u19e8\5\u036a\u01b6\2\u19e7\u19e6"+
		"\3\2\2\2\u19e7\u19e8\3\2\2\2\u19e8\u0381\3\2\2\2\u19e9\u19ea\7\u02bd\2"+
		"\2\u19ea\u19ec\5\u0358\u01ad\2\u19eb\u19e9\3\2\2\2\u19eb\u19ec\3\2\2\2"+
		"\u19ec\u19ed\3\2\2\2\u19ed\u19f2\5\u0392\u01ca\2\u19ee\u19ef\7\u029f\2"+
		"\2\u19ef\u19f1\5\u0392\u01ca\2\u19f0\u19ee\3\2\2\2\u19f1\u19f4\3\2\2\2"+
		"\u19f2\u19f0\3\2\2\2\u19f2\u19f3\3\2\2\2\u19f3\u0383\3\2\2\2\u19f4\u19f2"+
		"\3\2\2\2\u19f5\u19f7\7\r\2\2\u19f6\u19f8\7\u01a2\2\2\u19f7\u19f6\3\2\2"+
		"\2\u19f7\u19f8\3\2\2\2\u19f8\u1a16\3\2\2\2\u19f9\u1a16\7\16\2\2\u19fa"+
		"\u1a16\7|\2\2\u19fb\u1a16\7\u0089\2\2\u19fc\u1a16\7\u00b4\2\2\u19fd\u19fe"+
		"\7\u00c6\2\2\u19fe\u1a16\7\22\2\2\u19ff\u1a16\7\u00ee\2\2\u1a00\u1a01"+
		"\7\u00f3\2\2\u1a01\u1a16\7\u01a2\2\2\u1a02\u1a16\7\u00fb\2\2\u1a03\u1a04"+
		"\7\u010a\2\2\u1a04\u1a16\7\u01e5\2\2\u1a05\u1a06\7\u0133\2\2\u1a06\u1a16"+
		"\7\u0255\2\2\u1a07\u1a08\7\u016f\2\2\u1a08\u1a09\7R\2\2\u1a09\u1a16\7"+
		"\u01b8\2\2\u1a0a\u1a0b\7\u01a9\2\2\u1a0b\u1a16\7\u01cd\2\2\u1a0c\u1a16"+
		"\7\u01ae\2\2\u1a0d\u1a16\7\u01b5\2\2\u1a0e\u1a16\7\u01e3\2\2\u1a0f\u1a10"+
		"\7\u0230\2\2\u1a10\u1a16\7\u0202\2\2\u1a11\u1a16\7\u023a\2\2\u1a12\u1a16"+
		"\7\u0244\2\2\u1a13\u1a16\7\u0249\2\2\u1a14\u1a16\7\u0261\2\2\u1a15\u19f5"+
		"\3\2\2\2\u1a15\u19f9\3\2\2\2\u1a15\u19fa\3\2\2\2\u1a15\u19fb\3\2\2\2\u1a15"+
		"\u19fc\3\2\2\2\u1a15\u19fd\3\2\2\2\u1a15\u19ff\3\2\2\2\u1a15\u1a00\3\2"+
		"\2\2\u1a15\u1a02\3\2\2\2\u1a15\u1a03\3\2\2\2\u1a15\u1a05\3\2\2\2\u1a15"+
		"\u1a07\3\2\2\2\u1a15\u1a0a\3\2\2\2\u1a15\u1a0c\3\2\2\2\u1a15\u1a0d\3\2"+
		"\2\2\u1a15\u1a0e\3\2\2\2\u1a15\u1a0f\3\2\2\2\u1a15\u1a11\3\2\2\2\u1a15"+
		"\u1a12\3\2\2\2\u1a15\u1a13\3\2\2\2\u1a15\u1a14\3\2\2\2\u1a16\u0385\3\2"+
		"\2\2\u1a17\u1a18\7\r\2\2\u1a18\u1b5e\7\u01a2\2\2\u1a19\u1b5e\7\b\2\2\u1a1a"+
		"\u1a1c\7\7\2\2\u1a1b\u1a1d\7\21\2\2\u1a1c\u1a1b\3\2\2\2\u1a1c\u1a1d\3"+
		"\2\2\2\u1a1d\u1a1e\3\2\2\2\u1a1e\u1a1f\7\u0202\2\2\u1a1f\u1a20\7\u0237"+
		"\2\2\u1a20\u1b5e\7\u01ec\2\2\u1a21\u1a22\tr\2\2\u1a22\u1a23\7\21\2\2\u1a23"+
		"\u1a24\7\u0202\2\2\u1a24\u1b5e\7\u01a5\2\2\u1a25\u1a26\7\7\2\2\u1a26\u1a27"+
		"\7\u0202\2\2\u1a27\u1a28\7\u0128\2\2\u1a28\u1b5e\7\u0166\2\2\u1a29\u1a2b"+
		"\7j\2\2\u1a2a\u1a2c\7\21\2\2\u1a2b\u1a2a\3\2\2\2\u1a2b\u1a2c\3\2\2\2\u1a2c"+
		"\u1a2d\3\2\2\2\u1a2d\u1b5e\7L\2\2\u1a2e\u1a2f\ts\2\2\u1a2f\u1a30\7\21"+
		"\2\2\u1a30\u1b5e\7L\2\2\u1a31\u1a32\tt\2\2\u1a32\u1a33\7\21\2\2\u1a33"+
		"\u1b5e\7c\2\2\u1a34\u1a35\7\u00b5\2\2\u1a35\u1a36\7\u01b2\2\2\u1a36\u1b5e"+
		"\7\u0196\2\2\u1a37\u1a38\7\16\2\2\u1a38\u1b5e\7s\2\2\u1a39\u1a3b\tu\2"+
		"\2\u1a3a\u1a3c\7\u01a7\2\2\u1a3b\u1a3a\3\2\2\2\u1a3b\u1a3c\3\2\2\2\u1a3c"+
		"\u1a3d\3\2\2\2\u1a3d\u1a3e\7s\2\2\u1a3e\u1b5e\7\u0119\2\2\u1a3f\u1a40"+
		"\7\u0097\2\2\u1a40\u1a41\7\u01a7\2\2\u1a41\u1a42\7s\2\2\u1a42\u1b5e\7"+
		"\u0119\2\2\u1a43\u1a44\7|\2\2\u1a44\u1a45\7[\2\2\u1a45\u1b5e\7\u01ea\2"+
		"\2\u1a46\u1a47\7|\2\2\u1a47\u1a48\7\21\2\2\u1a48\u1b5e\7\u01a3\2\2\u1a49"+
		"\u1a4a\7\17\2\2\u1a4a\u1a4b\7\21\2\2\u1a4b\u1b5e\7\u008e\2\2\u1a4c\u1a4e"+
		"\7j\2\2\u1a4d\u1a4f\7\21\2\2\u1a4e\u1a4d\3\2\2\2\u1a4e\u1a4f\3\2\2\2\u1a4f"+
		"\u1a50\3\2\2\2\u1a50\u1b5e\7\u008f\2\2\u1a51\u1a52\ts\2\2\u1a52\u1a53"+
		"\7\21\2\2\u1a53\u1b5e\7\u008f\2\2\u1a54\u1a55\tt\2\2\u1a55\u1a56\7\21"+
		"\2\2\u1a56\u1b5e\7\u0090\2\2\u1a57\u1a58\tt\2\2\u1a58\u1a59\7\21\2\2\u1a59"+
		"\u1b5e\7\u009a\2\2\u1a5a\u1a5f\7\u00c6\2\2\u1a5b\u1a5c\7\22\2\2\u1a5c"+
		"\u1a60\7\7\2\2\u1a5d\u1a5e\7\21\2\2\u1a5e\u1a60\7\u021d\2\2\u1a5f\u1a5b"+
		"\3\2\2\2\u1a5f\u1a5d\3\2\2\2\u1a60\u1b5e\3\2\2\2\u1a61\u1a62\tr\2\2\u1a62"+
		"\u1a63\7\21\2\2\u1a63\u1b5e\7\u00ee\2\2\u1a64\u1a66\7j\2\2\u1a65\u1a67"+
		"\7\21\2\2\u1a66\u1a65\3\2\2\2\u1a66\u1a67\3\2\2\2\u1a67\u1a68\3\2\2\2"+
		"\u1a68\u1b5e\7\u00ef\2\2\u1a69\u1a6a\tv\2\2\u1a6a\u1a6b\7\21\2\2\u1a6b"+
		"\u1b5e\7\u00ef\2\2\u1a6c\u1a6e\7j\2\2\u1a6d\u1a6f\tw\2\2\u1a6e\u1a6d\3"+
		"\2\2\2\u1a6e\u1a6f\3\2\2\2\u1a6f\u1a70\3\2\2\2\u1a70\u1b5e\7\u0108\2\2"+
		"\u1a71\u1a72\7\u00b4\2\2\u1a72\u1a73\7\21\2\2\u1a73\u1b5e\tx\2\2\u1a74"+
		"\u1a75\7\u0127\2\2\u1a75\u1b5e\7\u01db\2\2\u1a76\u1a77\7\7\2\2\u1a77\u1a78"+
		"\7\u010b\2\2\u1a78\u1b5e\7\u0128\2\2\u1a79\u1a7b\7j\2\2\u1a7a\u1a7c\7"+
		"\21\2\2\u1a7b\u1a7a\3\2\2\2\u1a7b\u1a7c\3\2\2\2\u1a7c\u1a7d\3\2\2\2\u1a7d"+
		"\u1b5e\7\u0113\2\2\u1a7e\u1a7f\tv\2\2\u1a7f\u1a80\7\21\2\2\u1a80\u1b5e"+
		"\7\u0113\2\2\u1a81\u1b5e\7\u0120\2\2\u1a82\u1a84\7j\2\2\u1a83\u1a85\7"+
		"\21\2\2\u1a84\u1a83\3\2\2\2\u1a84\u1a85\3\2\2\2\u1a85\u1a86\3\2\2\2\u1a86"+
		"\u1a87\7\u012d\2\2\u1a87\u1b5e\7\u0255\2\2\u1a88\u1a89\ts\2\2\u1a89\u1a8a"+
		"\7\21\2\2\u1a8a\u1a8b\7\u012d\2\2\u1a8b\u1b5e\7\u0255\2\2\u1a8c\u1a8e"+
		"\7\u00d5\2\2\u1a8d\u1a8c\3\2\2\2\u1a8d\u1a8e\3\2\2\2\u1a8e\u1a8f\3\2\2"+
		"\2\u1a8f\u1a90\7\u01a9\2\2\u1a90\u1b5e\7\u01cd\2\2\u1a91\u1a92\7\u016f"+
		"\2\2\u1a92\u1a93\7R\2\2\u1a93\u1b5e\7\u01b8\2\2\u1a94\u1a96\7j\2\2\u1a95"+
		"\u1a97\7\21\2\2\u1a96\u1a95\3\2\2\2\u1a96\u1a97\3\2\2\2\u1a97\u1a98\3"+
		"\2\2\2\u1a98\u1a99\7\u0136\2\2\u1a99\u1b5e\7\u013b\2\2\u1a9a\u1a9b\ty"+
		"\2\2\u1a9b\u1a9c\7\21\2\2\u1a9c\u1a9d\7\u0136\2\2\u1a9d\u1b5e\7\u013b"+
		"\2\2\u1a9e\u1aa0\7j\2\2\u1a9f\u1aa1\7\21\2\2\u1aa0\u1a9f\3\2\2\2\u1aa0"+
		"\u1aa1\3\2\2\2\u1aa1\u1aa2\3\2\2\2\u1aa2\u1b5e\7m\2\2\u1aa3\u1aa4\tz\2"+
		"\2\u1aa4\u1aa5\7\21\2\2\u1aa5\u1b5e\7m\2\2\u1aa6\u1aa8\7j\2\2\u1aa7\u1aa9"+
		"\7\21\2\2\u1aa8\u1aa7\3\2\2\2\u1aa8\u1aa9\3\2\2\2\u1aa9\u1aaa\3\2\2\2"+
		"\u1aaa\u1aab\7\u0130\2\2\u1aab\u1b5e\7\u00c9\2\2\u1aac\u1aad\t{\2\2\u1aad"+
		"\u1aae\7\21\2\2\u1aae\u1aaf\7\u0130\2\2\u1aaf\u1b5e\7\u00c9\2\2\u1ab0"+
		"\u1ab2\7j\2\2\u1ab1\u1ab3\7\21\2\2\u1ab2\u1ab1\3\2\2\2\u1ab2\u1ab3\3\2"+
		"\2\2\u1ab3\u1ab4\3\2\2\2\u1ab4\u1ab5\7m\2\2\u1ab5\u1b5e\7\u008f\2\2\u1ab6"+
		"\u1ab7\t|\2\2\u1ab7\u1ab8\7\21\2\2\u1ab8\u1ab9\7m\2\2\u1ab9\u1b5e\7\u008f"+
		"\2\2\u1aba\u1abc\7j\2\2\u1abb\u1abd\7\21\2\2\u1abc\u1abb\3\2\2\2\u1abc"+
		"\u1abd\3\2\2\2\u1abd\u1abe\3\2\2\2\u1abe\u1abf\7m\2\2\u1abf\u1ac0\7\67"+
		"\2\2\u1ac0\u1b5e\7\u01a4\2\2\u1ac1\u1ac2\t}\2\2\u1ac2\u1ac3\7\21\2\2\u1ac3"+
		"\u1ac4\7m\2\2\u1ac4\u1ac5\7\67\2\2\u1ac5\u1b5e\7\u01a4\2\2\u1ac6\u1ac8"+
		"\7j\2\2\u1ac7\u1ac9\7\21\2\2\u1ac8\u1ac7\3\2\2\2\u1ac8\u1ac9\3\2\2\2\u1ac9"+
		"\u1aca\3\2\2\2\u1aca\u1b5e\7\u0171\2\2\u1acb\u1acc\tv\2\2\u1acc\u1acd"+
		"\7\21\2\2\u1acd\u1b5e\7\u0171\2\2\u1ace\u1acf\tr\2\2\u1acf\u1ad0\7\21"+
		"\2\2\u1ad0\u1b5e\7\u017a\2\2\u1ad1\u1ad2\7j\2\2\u1ad2\u1ad3\7\u0195\2"+
		"\2\u1ad3\u1b5e\7s\2\2\u1ad4\u1ad5\7\u01ec\2\2\u1ad5\u1b5e\7`\2\2\u1ad6"+
		"\u1ad8\7j\2\2\u1ad7\u1ad9\7\21\2\2\u1ad8\u1ad7\3\2\2\2\u1ad8\u1ad9\3\2"+
		"\2\2\u1ad9\u1ada\3\2\2\2\u1ada\u1b5e\7\u01a3\2\2\u1adb\u1adc\tv\2\2\u1adc"+
		"\u1add\7\21\2\2\u1add\u1b5e\7\u01a3\2\2\u1ade\u1adf\tr\2\2\u1adf\u1b5e"+
		"\7\u01a5\2\2\u1ae0\u1ae1\7j\2\2\u1ae1\u1b5e\7\u01cf\2\2\u1ae2\u1ae3\t"+
		"~\2\2\u1ae3\u1ae4\7\21\2\2\u1ae4\u1b5e\7\u01cf\2\2\u1ae5\u1ae6\tr\2\2"+
		"\u1ae6\u1ae7\7\u01d1\2\2\u1ae7\u1b5e\7\u01e2\2\2\u1ae8\u1aea\7j\2\2\u1ae9"+
		"\u1aeb\7\21\2\2\u1aea\u1ae9\3\2\2\2\u1aea\u1aeb\3\2\2\2\u1aeb\u1aec\3"+
		"\2\2\2\u1aec\u1b5e\7\u01e5\2\2\u1aed\u1aee\t\177\2\2\u1aee\u1aef\7\21"+
		"\2\2\u1aef\u1b5e\7\u01e5\2\2\u1af0\u1af1\t\u0080\2\2\u1af1\u1b5e\7\u01ea"+
		"\2\2\u1af2\u1af3\7\16\2\2\u1af3\u1af4\7\u01c0\2\2\u1af4\u1b5e\7h\2\2\u1af5"+
		"\u1af7\7j\2\2\u1af6\u1af8\7\21\2\2\u1af7\u1af6\3\2\2\2\u1af7\u1af8\3\2"+
		"\2\2\u1af8\u1af9\3\2\2\2\u1af9\u1afa\7\u0202\2\2\u1afa\u1afb\7\u0231\2"+
		"\2\u1afb\u1b5e\7\u01a5\2\2\u1afc\u1afd\t\u0081\2\2\u1afd\u1afe\7\21\2"+
		"\2\u1afe\u1aff\7\u0202\2\2\u1aff\u1b00\7\u0231\2\2\u1b00\u1b5e\7\u01a5"+
		"\2\2\u1b01\u1b02\7\u0230\2\2\u1b02\u1b03\7\21\2\2\u1b03\u1b5e\7\u0202"+
		"\2\2\u1b04\u1b06\7j\2\2\u1b05\u1b07\7\21\2\2\u1b06\u1b05\3\2\2\2\u1b06"+
		"\u1b07\3\2\2\2\u1b07\u1b08\3\2\2\2\u1b08\u1b5e\7\u0214\2\2\u1b09\u1b0a"+
		"\7\u0097\2\2\u1b0a\u1b0b\7\21\2\2\u1b0b\u1b5e\7\u0214\2\2\u1b0c\u1b0d"+
		"\tt\2\2\u1b0d\u1b0e\7\u01a7\2\2\u1b0e\u1b5e\7\u0214\2\2\u1b0f\u1b11\7"+
		"j\2\2\u1b10\u1b12\7\21\2\2\u1b11\u1b10\3\2\2\2\u1b11\u1b12\3\2\2\2\u1b12"+
		"\u1b13\3\2\2\2\u1b13\u1b5e\7\u021d\2\2\u1b14\u1b15\t\u0082\2\2\u1b15\u1b16"+
		"\7\21\2\2\u1b16\u1b5e\7\u021d\2\2\u1b17\u1b18\t\u0083\2\2\u1b18\u1b5e"+
		"\7\u021c\2\2\u1b19\u1b1b\7j\2\2\u1b1a\u1b1c\7\21\2\2\u1b1b\u1b1a\3\2\2"+
		"\2\u1b1b\u1b1c\3\2\2\2\u1b1c\u1b1d\3\2\2\2\u1b1d\u1b5e\7\u0233\2\2\u1b1e"+
		"\u1b1f\ts\2\2\u1b1f\u1b20\7\21\2\2\u1b20\u1b5e\7\u0233\2\2\u1b21\u1b22"+
		"\7\7\2\2\u1b22\u1b23\7s\2\2\u1b23\u1b5e\7\u0233\2\2\u1b24\u1b26\7j\2\2"+
		"\u1b25\u1b27\7\21\2\2\u1b26\u1b25\3\2\2\2\u1b26\u1b27\3\2\2\2\u1b27\u1b28"+
		"\3\2\2\2\u1b28\u1b5e\7\u0238\2\2\u1b29\u1b2a\t\u0084\2\2\u1b2a\u1b2b\7"+
		"\21\2\2\u1b2b\u1b5e\7\u0238\2\2\u1b2c\u1b2d\tr\2\2\u1b2d\u1b5e\7\u0248"+
		"\2\2\u1b2e\u1b30\7j\2\2\u1b2f\u1b31\7\21\2\2\u1b30\u1b2f\3\2\2\2\u1b30"+
		"\u1b31\3\2\2\2\u1b31\u1b32\3\2\2\2\u1b32\u1b5e\7\u0255\2\2\u1b33\u1b34"+
		"\t\u0085\2\2\u1b34\u1b35\7\21\2\2\u1b35\u1b5e\7\u0255\2\2\u1b36\u1b37"+
		"\t\u0086\2\2\u1b37\u1b5e\7\21\2\2\u1b38\u1b39\7&\2\2\u1b39\u1b5e\7\u0248"+
		"\2\2\u1b3a\u1b3b\7B\2\2\u1b3b\u1b5e\7\u015d\2\2\u1b3c\u1b3d\7\u00b5\2"+
		"\2\u1b3d\u1b3e\7\3\2\2\u1b3e\u1b5e\7\u0196\2\2\u1b3f\u1b41\7\u00cd\2\2"+
		"\u1b40\u1b42\7\21\2\2\u1b41\u1b40\3\2\2\2\u1b41\u1b42\3\2\2\2\u1b42\u1b43"+
		"\3\2\2\2\u1b43\u1b5e\7\u022f\2\2\u1b44\u1b45\7\u00d8\2\2\u1b45\u1b47\7"+
		"\21\2\2\u1b46\u1b48\7\u0166\2\2\u1b47\u1b46\3\2\2\2\u1b47\u1b48\3\2\2"+
		"\2\u1b48\u1b49\3\2\2\2\u1b49\u1b5e\7\u01a1\2\2\u1b4a\u1b4b\7\u00f3\2\2"+
		"\u1b4b\u1b4c\7\21\2\2\u1b4c\u1b5e\7\u01a2\2\2\u1b4d\u1b4e\7\u010a\2\2"+
		"\u1b4e\u1b4f\7v\2\2\u1b4f\u1b5e\7\u0228\2\2\u1b50\u1b51\7\u010a\2\2\u1b51"+
		"\u1b5e\7\u0219\2\2\u1b52\u1b53\7\u01a8\2\2\u1b53\u1b5e\7x\2\2\u1b54\u1b5e"+
		"\7\u01c6\2\2\u1b55\u1b56\7\u01e3\2\2\u1b56\u1b57\7\21\2\2\u1b57\u1b5e"+
		"\t\u0087\2\2\u1b58\u1b5e\7\u0215\2\2\u1b59\u1b5e\7\u0217\2\2\u1b5a\u1b5e"+
		"\7\u0218\2\2\u1b5b\u1b5e\7\u021a\2\2\u1b5c\u1b5e\7\u021b\2\2\u1b5d\u1a17"+
		"\3\2\2\2\u1b5d\u1a19\3\2\2\2\u1b5d\u1a1a\3\2\2\2\u1b5d\u1a21\3\2\2\2\u1b5d"+
		"\u1a25\3\2\2\2\u1b5d\u1a29\3\2\2\2\u1b5d\u1a2e\3\2\2\2\u1b5d\u1a31\3\2"+
		"\2\2\u1b5d\u1a34\3\2\2\2\u1b5d\u1a37\3\2\2\2\u1b5d\u1a39\3\2\2\2\u1b5d"+
		"\u1a3f\3\2\2\2\u1b5d\u1a43\3\2\2\2\u1b5d\u1a46\3\2\2\2\u1b5d\u1a49\3\2"+
		"\2\2\u1b5d\u1a4c\3\2\2\2\u1b5d\u1a51\3\2\2\2\u1b5d\u1a54\3\2\2\2\u1b5d"+
		"\u1a57\3\2\2\2\u1b5d\u1a5a\3\2\2\2\u1b5d\u1a61\3\2\2\2\u1b5d\u1a64\3\2"+
		"\2\2\u1b5d\u1a69\3\2\2\2\u1b5d\u1a6c\3\2\2\2\u1b5d\u1a71\3\2\2\2\u1b5d"+
		"\u1a74\3\2\2\2\u1b5d\u1a76\3\2\2\2\u1b5d\u1a79\3\2\2\2\u1b5d\u1a7e\3\2"+
		"\2\2\u1b5d\u1a81\3\2\2\2\u1b5d\u1a82\3\2\2\2\u1b5d\u1a88\3\2\2\2\u1b5d"+
		"\u1a8d\3\2\2\2\u1b5d\u1a91\3\2\2\2\u1b5d\u1a94\3\2\2\2\u1b5d\u1a9a\3\2"+
		"\2\2\u1b5d\u1a9e\3\2\2\2\u1b5d\u1aa3\3\2\2\2\u1b5d\u1aa6\3\2\2\2\u1b5d"+
		"\u1aac\3\2\2\2\u1b5d\u1ab0\3\2\2\2\u1b5d\u1ab6\3\2\2\2\u1b5d\u1aba\3\2"+
		"\2\2\u1b5d\u1ac1\3\2\2\2\u1b5d\u1ac6\3\2\2\2\u1b5d\u1acb\3\2\2\2\u1b5d"+
		"\u1ace\3\2\2\2\u1b5d\u1ad1\3\2\2\2\u1b5d\u1ad4\3\2\2\2\u1b5d\u1ad6\3\2"+
		"\2\2\u1b5d\u1adb\3\2\2\2\u1b5d\u1ade\3\2\2\2\u1b5d\u1ae0\3\2\2\2\u1b5d"+
		"\u1ae2\3\2\2\2\u1b5d\u1ae5\3\2\2\2\u1b5d\u1ae8\3\2\2\2\u1b5d\u1aed\3\2"+
		"\2\2\u1b5d\u1af0\3\2\2\2\u1b5d\u1af2\3\2\2\2\u1b5d\u1af5\3\2\2\2\u1b5d"+
		"\u1afc\3\2\2\2\u1b5d\u1b01\3\2\2\2\u1b5d\u1b04\3\2\2\2\u1b5d\u1b09\3\2"+
		"\2\2\u1b5d\u1b0c\3\2\2\2\u1b5d\u1b0f\3\2\2\2\u1b5d\u1b14\3\2\2\2\u1b5d"+
		"\u1b17\3\2\2\2\u1b5d\u1b19\3\2\2\2\u1b5d\u1b1e\3\2\2\2\u1b5d\u1b21\3\2"+
		"\2\2\u1b5d\u1b24\3\2\2\2\u1b5d\u1b29\3\2\2\2\u1b5d\u1b2c\3\2\2\2\u1b5d"+
		"\u1b2e\3\2\2\2\u1b5d\u1b33\3\2\2\2\u1b5d\u1b36\3\2\2\2\u1b5d\u1b38\3\2"+
		"\2\2\u1b5d\u1b3a\3\2\2\2\u1b5d\u1b3c\3\2\2\2\u1b5d\u1b3f\3\2\2\2\u1b5d"+
		"\u1b44\3\2\2\2\u1b5d\u1b4a\3\2\2\2\u1b5d\u1b4d\3\2\2\2\u1b5d\u1b50\3\2"+
		"\2\2\u1b5d\u1b52\3\2\2\2\u1b5d\u1b54\3\2\2\2\u1b5d\u1b55\3\2\2\2\u1b5d"+
		"\u1b58\3\2\2\2\u1b5d\u1b59\3\2\2\2\u1b5d\u1b5a\3\2\2\2\u1b5d\u1b5b\3\2"+
		"\2\2\u1b5d\u1b5c\3\2\2\2\u1b5e\u0387\3\2\2\2\u1b5f\u1b62\7\u0225\2\2\u1b60"+
		"\u1b63\5\u038e\u01c8\2\u1b61\u1b63\5\u037c\u01bf\2\u1b62\u1b60\3\2\2\2"+
		"\u1b62\u1b61\3\2\2\2\u1b63\u1b68\3\2\2\2\u1b64\u1b65\7\30\2\2\u1b65\u1b66"+
		"\7\u0228\2\2\u1b66\u1b67\7\u0274\2\2\u1b67\u1b69\5\u038e\u01c8\2\u1b68"+
		"\u1b64\3\2\2\2\u1b68\u1b69\3\2\2\2\u1b69\u1b9e\3\2\2\2\u1b6a\u1b6e\7\u0100"+
		"\2\2\u1b6b\u1b6f\5\u038e\u01c8\2\u1b6c\u1b6f\5\u037c\u01bf\2\u1b6d\u1b6f"+
		"\5\u0380\u01c1\2\u1b6e\u1b6b\3\2\2\2\u1b6e\u1b6c\3\2\2\2\u1b6e\u1b6d\3"+
		"\2\2\2\u1b6f\u1b70\3\2\2\2\u1b70\u1b7e\t\u0088\2\2\u1b71\u1b74\7\u02a6"+
		"\2\2\u1b72\u1b75\7\u02a0\2\2\u1b73\u1b75\5\u037c\u01bf\2\u1b74\u1b72\3"+
		"\2\2\2\u1b74\u1b73\3\2\2\2\u1b75\u1b7b\3\2\2\2\u1b76\u1b79\7\u02ac\2\2"+
		"\u1b77\u1b7a\7\u02a0\2\2\u1b78\u1b7a\5\u037c\u01bf\2\u1b79\u1b77\3\2\2"+
		"\2\u1b79\u1b78\3\2\2\2\u1b7a\u1b7c\3\2\2\2\u1b7b\u1b76\3\2\2\2\u1b7b\u1b7c"+
		"\3\2\2\2\u1b7c\u1b7d\3\2\2\2\u1b7d\u1b7f\7\u02a7\2\2\u1b7e\u1b71\3\2\2"+
		"\2\u1b7e\u1b7f\3\2\2\2\u1b7f\u1b8f\3\2\2\2\u1b80\u1b8d\7\u022d\2\2\u1b81"+
		"\u1b8e\7w\2\2\u1b82\u1b8e\7\u00e2\2\2\u1b83\u1b8e\7\u0138\2\2\u1b84\u1b8b"+
		"\7\u01e0\2\2\u1b85\u1b88\7\u02a6\2\2\u1b86\u1b89\7\u02a0\2\2\u1b87\u1b89"+
		"\5\u037c\u01bf\2\u1b88\u1b86\3\2\2\2\u1b88\u1b87\3\2\2\2\u1b89\u1b8a\3"+
		"\2\2\2\u1b8a\u1b8c\7\u02a7\2\2\u1b8b\u1b85\3\2\2\2\u1b8b\u1b8c\3\2\2\2"+
		"\u1b8c\u1b8e\3\2\2\2\u1b8d\u1b81\3\2\2\2\u1b8d\u1b82\3\2\2\2\u1b8d\u1b83"+
		"\3\2\2\2\u1b8d\u1b84\3\2\2\2\u1b8e\u1b90\3\2\2\2\u1b8f\u1b80\3\2\2\2\u1b8f"+
		"\u1b90\3\2\2\2\u1b90\u1b9e\3\2\2\2\u1b91\u1b9e\5\u038a\u01c6\2\u1b92\u1b93"+
		"\7v\2\2\u1b93\u1b9e\5\u038e\u01c8\2\u1b94\u1b9e\5\u038e\u01c8\2\u1b95"+
		"\u1b9e\7\u0161\2\2\u1b96\u1b9e\7\u0234\2\2\u1b97\u1b9e\7\u00bf\2\2\u1b98"+
		"\u1b9e\7z\2\2\u1b99";
	private static final String _serializedATNSegment3 =
		"\u1b9e\7\u01eb\2\2\u1b9a\u1b9e\7\u0139\2\2\u1b9b\u1b9e\7\u012f\2\2\u1b9c"+
		"\u1b9e\7\u0082\2\2\u1b9d\u1b5f\3\2\2\2\u1b9d\u1b6a\3\2\2\2\u1b9d\u1b91"+
		"\3\2\2\2\u1b9d\u1b92\3\2\2\2\u1b9d\u1b94\3\2\2\2\u1b9d\u1b95\3\2\2\2\u1b9d"+
		"\u1b96\3\2\2\2\u1b9d\u1b97\3\2\2\2\u1b9d\u1b98\3\2\2\2\u1b9d\u1b99\3\2"+
		"\2\2\u1b9d\u1b9a\3\2\2\2\u1b9d\u1b9b\3\2\2\2\u1b9d\u1b9c\3\2\2\2\u1b9e"+
		"\u0389\3\2\2\2\u1b9f\u1ba0\t\u0089\2\2\u1ba0\u038b\3\2\2\2\u1ba1\u1ba2"+
		"\7\u02ab\2\2\u1ba2\u1ba3\5\u038a\u01c6\2\u1ba3\u038d\3\2\2\2\u1ba4\u1ba5"+
		"\t\u008a\2\2\u1ba5\u038f\3\2\2\2\u1ba6\u1ba7\7\u02bd\2\2\u1ba7\u1ba9\5"+
		"\u0358\u01ad\2\u1ba8\u1ba6\3\2\2\2\u1ba8\u1ba9\3\2\2\2\u1ba9\u1baa\3\2"+
		"\2\2\u1baa\u1bab\5\u0392\u01ca\2\u1bab\u0391\3\2\2\2\u1bac\u1baf\5\u0396"+
		"\u01cc\2\u1bad\u1baf\7\u02a3\2\2\u1bae\u1bac\3\2\2\2\u1bae\u1bad\3\2\2"+
		"\2\u1baf\u0393\3\2\2\2\u1bb0\u1bb1\7\u02a6\2\2\u1bb1\u1bb2\7\u02aa\2\2"+
		"\u1bb2\u1bb3\7\u02a7\2\2\u1bb3\u0395\3\2\2\2\u1bb4\u1bb5\t\u008b\2\2\u1bb5"+
		"\u0397\3\2\2\2\u1bb6\u1bb7\t\u008c\2\2\u1bb7\u0399\3\2\2\2\u1bb8\u1bb9"+
		"\t\u008d\2\2\u1bb9\u039b\3\2\2\2\u03e7\u039f\u03a3\u03b1\u03b5\u03b8\u03bc"+
		"\u03e7\u03f3\u03f8\u03fd\u0404\u040a\u040f\u0413\u041b\u041d\u0421\u0425"+
		"\u0428\u042c\u0431\u0437\u0440\u0443\u0449\u0452\u045f\u0464\u046e\u0471"+
		"\u0476\u047b\u0482\u0488\u048c\u0492\u0497\u049e\u04a5\u04ac\u04b1\u04b5"+
		"\u04c1\u04cb\u04d0\u04dc\u04e1\u04e6\u04e9\u04f6\u0502\u0507\u050c\u0518"+
		"\u051d\u0525\u0527\u052b\u052f\u0532\u0536\u053b\u0547\u054c\u0550\u0553"+
		"\u0558\u055f\u0569\u056e\u0571\u0575\u0578\u057d\u058f\u0594\u0599\u059b"+
		"\u05a2\u05a9\u05ac\u05af\u05b2\u05bd\u05c9\u05cd\u05d0\u05d9\u05e1\u05e9"+
		"\u05ec\u05f3\u05f7\u05fc\u0601\u062a\u0646\u064d\u0652\u0659\u0664\u066c"+
		"\u0670\u067c\u067f\u0685\u0688\u068d\u0692\u0696\u06a0\u06aa\u06b0\u06bb"+
		"\u06c0\u06c4\u06cc\u06d4\u06d9\u06dc\u06de\u06e1\u06ea\u06ef\u06f6\u06f9"+
		"\u06fc\u0700\u0703\u070b\u0710\u0715\u071c\u0726\u0736\u073c\u0746\u0750"+
		"\u0757\u075a\u075f\u0769\u076e\u0775\u0778\u077d\u0780\u0783\u0794\u0799"+
		"\u07a2\u07a5\u07aa\u07ad\u07b4\u07b7\u07be\u07c3\u07c7\u07cc\u07d1\u07db"+
		"\u07e1\u07eb\u07f0\u07f7\u07fd\u0801\u0804\u0807\u0818\u081d\u0825\u0833"+
		"\u083a\u084a\u0853\u0855\u086a\u0872\u087b\u087f\u0897\u0899\u08ab\u08ad"+
		"\u08b2\u08b7\u08bc\u08c1\u08cb\u08d4\u08dd\u08e2\u08e7\u08ec\u08f0\u08f3"+
		"\u08f9\u0907\u090c\u090e\u0911\u0919\u0926\u0928\u092c\u0934\u0936\u0938"+
		"\u093a\u093e\u0943\u094d\u0958\u095a\u0963\u0969\u096b\u096f\u0973\u0977"+
		"\u097b\u097d\u0982\u0987\u098c\u098f\u099a\u099d\u09a0\u09a3\u09a8\u09ad"+
		"\u09b1\u09b5\u09bb\u09bf\u09c3\u09cf\u09d4\u09d7\u09db\u09df\u09e4\u09e8"+
		"\u09ee\u09f3\u09f6\u09fe\u0a01\u0a05\u0a0b\u0a0f\u0a12\u0a15\u0a1d\u0a1f"+
		"\u0a23\u0a28\u0a2f\u0a40\u0a42\u0a51\u0a53\u0a61\u0a64\u0a67\u0a71\u0a74"+
		"\u0a77\u0a7e\u0a84\u0a89\u0a8d\u0a90\u0a93\u0a99\u0a9e\u0aa1\u0aa5\u0aa9"+
		"\u0aac\u0ab3\u0ab6\u0ab8\u0abd\u0ac5\u0ad2\u0ad4\u0ad6\u0ad9\u0add\u0ae7"+
		"\u0aeb\u0af0\u0af5\u0af9\u0afb\u0afe\u0b02\u0b0c\u0b14\u0b1c\u0b1f\u0b22"+
		"\u0b25\u0b28\u0b2a\u0b31\u0b33\u0b37\u0b3d\u0b40\u0b44\u0b49\u0b58\u0b5e"+
		"\u0b63\u0b68\u0b6d\u0b72\u0b74\u0b76\u0b7b\u0b81\u0b86\u0b8b\u0b91\u0b95"+
		"\u0b9a\u0ba0\u0ba3\u0ba6\u0ba9\u0bac\u0baf\u0bb3\u0bc3\u0bc8\u0bcb\u0bcd"+
		"\u0bd1\u0bda\u0bde\u0be2\u0be6\u0be9\u0beb\u0bf0\u0bf6\u0bf9\u0bfc\u0c00"+
		"\u0c07\u0c0b\u0c10\u0c15\u0c18\u0c1b\u0c1e\u0c20\u0c24\u0c27\u0c2b\u0c33"+
		"\u0c35\u0c37\u0c3a\u0c43\u0c45\u0c59\u0c60\u0c62\u0c6e\u0c70\u0c73\u0c77"+
		"\u0c7a\u0c85\u0c98\u0ca1\u0ca6\u0cab\u0cb1\u0cb8\u0cbd\u0cbf\u0ccf\u0cd4"+
		"\u0cda\u0ce1\u0cf4\u0cff\u0d0a\u0d12\u0d14\u0d23\u0d2c\u0d31\u0d35\u0d38"+
		"\u0d46\u0d4e\u0d52\u0d55\u0d5d\u0d69\u0d6d\u0d72\u0d75\u0d82\u0d86\u0d8e"+
		"\u0d93\u0d97\u0d9b\u0d9f\u0da5\u0da8\u0dab\u0dc6\u0dcc\u0dd0\u0dd7\u0ddc"+
		"\u0de2\u0de6\u0de9\u0def\u0df8\u0e00\u0e04\u0e08\u0e10\u0e19\u0e1f\u0e21"+
		"\u0e3d\u0e42\u0e46\u0e4d\u0e51\u0e55\u0e59\u0e65\u0e69\u0e77\u0e7d\u0e84"+
		"\u0e89\u0e94\u0e97\u0e9d\u0e9f\u0ea8\u0eb2\u0eb7\u0ec6\u0eca\u0ecd\u0ed1"+
		"\u0edf\u0ee1\u0ee5\u0eed\u0ef4\u0ef9\u0efb\u0f00\u0f05\u0f0d\u0f14\u0f18"+
		"\u0f1b\u0f27\u0f2d\u0f36\u0f39\u0f3f\u0f44\u0f4a\u0f4f\u0f51\u0f58\u0f5b"+
		"\u0f62\u0f6d\u0f73\u0f77\u0f7d\u0f82\u0f84\u0f8a\u0f95\u0f97\u0f99\u0f9c"+
		"\u0fa0\u0fa3\u0fa7\u0fab\u0fb0\u0fbb\u0fbf\u0fc7\u0fca\u0fcf\u0fd1\u0fd6"+
		"\u0fdb\u0fdf\u0fe5\u0fe9\u0fec\u0ff4\u0ff7\u0ffb\u0fff\u1004\u1007\u100b"+
		"\u100f\u1013\u1026\u102e\u1032\u1036\u103c\u1040\u1045\u1047\u104a\u104e"+
		"\u1051\u1054\u1057\u105b\u1067\u106a\u106d\u1072\u1078\u107d\u1083\u1087"+
		"\u108c\u1093\u1099\u10a0\u10a3\u10a6\u10aa\u10af\u10b3\u10b5\u10c0\u10c7"+
		"\u10cb\u10d5\u10d9\u10dd\u10e2\u10ed\u10f2\u10f8\u10fd\u1100\u1105\u1107"+
		"\u110d\u1112\u1115\u111a\u111f\u1128\u112d\u1133\u1139\u113e\u1142\u1144"+
		"\u1149\u114d\u1153\u1157\u1160\u1165\u1168\u116e\u1173\u1175\u1177\u117c"+
		"\u1181\u1186\u118e\u1193\u119a\u119e\u11a7\u11ab\u11b0\u11bb\u11bd\u11cd"+
		"\u11d2\u11d8\u11de\u11ec\u11f1\u11f7\u11fa\u11fd\u1201\u1206\u120f\u1211"+
		"\u1215\u1218\u121d\u121f\u1223\u122f\u1238\u123c\u1241\u1245\u1249\u124e"+
		"\u1251\u125b\u1261\u1264\u1267\u126b\u1270\u1279\u1283\u1287\u128b\u128e"+
		"\u1291\u1296\u129b\u129e\u12a1\u12a7\u12aa\u12b0\u12b3\u12b6\u12bb\u12be"+
		"\u12c6\u12cc\u12d1\u12d6\u12de\u12e8\u12ec\u12ee\u12f1\u12fd\u1301\u1304"+
		"\u1313\u1318\u131c\u1323\u1326\u132f\u1336\u133b\u133f\u1347\u134d\u1355"+
		"\u1358\u1361\u1364\u1367\u1370\u1376\u137c\u137e\u138b\u138d\u1396\u1398"+
		"\u139c\u13a2\u13a6\u13b4\u13b9\u13c4\u13cf\u13d3\u13da\u13df\u13e3\u13e8"+
		"\u13f0\u13f2\u13f8\u13fb\u1406\u140b\u1415\u1417\u1419\u1423\u1427\u1429"+
		"\u1435\u143d\u144a\u144d\u1459\u145b\u1463\u146b\u1472\u1476\u147d\u1481"+
		"\u1486\u148a\u1492\u1496\u149d\u14a2\u14ab\u14b4\u14b7\u14cb\u14cf\u14d2"+
		"\u14d9\u14dc\u14e0\u14e3\u14ea\u14ed\u14f3\u14f6\u14fa\u14fd\u1504\u1509"+
		"\u1517\u151e\u1529\u1532\u153b\u153f\u1543\u155d\u1560\u1563\u156d\u1571"+
		"\u1576\u157b\u1580\u1589\u158c\u158e\u1592\u1599\u15a0\u15a8\u15b7\u15bc"+
		"\u15c1\u15c7\u15ca\u15ce\u15d8\u15e4\u15e6\u15ed\u15f1\u15fa\u1603\u1611"+
		"\u1619\u161c\u1625\u162b\u1635\u163d\u1640\u1643\u164c\u1651\u1656\u165b"+
		"\u1660\u1665\u1668\u166d\u1672\u1676\u167c\u1682\u168b\u1690\u1698\u169c"+
		"\u16a1\u16a7\u16ae\u16b3\u16ba\u16be\u16c3\u16cb\u16ce\u16d1\u16d4\u16d8"+
		"\u16dd\u16e2\u16e6\u16ed\u16f2\u16f4\u16ff\u1703\u1705\u1710\u171b\u1720"+
		"\u1725\u1727\u172b\u172e\u1732\u173f\u1744\u1748\u174d\u1753\u1757\u175c"+
		"\u1760\u1765\u176a\u176d\u1770\u1775\u177e\u1786\u178a\u1794\u1797\u1799"+
		"\u17a3\u17a5\u17ab\u17b1\u17b3\u17c1\u17c3\u17cd\u17d6\u17df\u17e3\u17e7"+
		"\u17ec\u17f0\u17f3\u17f7\u17fe\u1802\u1806\u180b\u180f\u1822\u1827\u182e"+
		"\u1839\u1840\u1847\u184b\u1852\u1857\u1860\u1868\u1870\u1876\u187b\u1880"+
		"\u1884\u1889\u188c\u1891\u1895\u1899\u189e\u18a7\u18ad\u18b2\u18b9\u18c7"+
		"\u18cc\u18dc\u18df\u18e4\u18f1\u18f5\u18fa\u18ff\u1903\u1907\u190b\u1910"+
		"\u1917\u191c\u191e\u1920\u1929\u192d\u1931\u1933\u1937\u1940\u1946\u194a"+
		"\u194c\u1950\u1954\u195b\u1963\u196b\u196d\u1973\u1976\u198e\u1995\u19b6"+
		"\u19bb\u19be\u19c3\u19c5\u19cb\u19d3\u19d8\u19df\u19e4\u19e7\u19eb\u19f2"+
		"\u19f7\u1a15\u1a1c\u1a2b\u1a3b\u1a4e\u1a5f\u1a66\u1a6e\u1a7b\u1a84\u1a8d"+
		"\u1a96\u1aa0\u1aa8\u1ab2\u1abc\u1ac8\u1ad8\u1aea\u1af7\u1b06\u1b11\u1b1b"+
		"\u1b26\u1b30\u1b41\u1b47\u1b5d\u1b62\u1b68\u1b6e\u1b74\u1b79\u1b7b\u1b7e"+
		"\u1b88\u1b8b\u1b8d\u1b8f\u1b9d\u1ba8\u1bae";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}